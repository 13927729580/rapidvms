// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linksystem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "linksystem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class LinkLoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkLoginReq> {
} _LinkLoginReq_default_instance_;
class LinkLoginRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkLoginResp> {
} _LinkLoginResp_default_instance_;
class LinkListCamReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkListCamReq> {
} _LinkListCamReq_default_instance_;
class LinkListCamRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkListCamResp> {
} _LinkListCamResp_default_instance_;

namespace protobuf_linksystem_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginReq, strusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginReq, strpasswd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginResp, strnonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginResp, bretnonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginResp, bret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkListCamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkListCamReq, strid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkListCamReq, ball_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkListCamResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkListCamResp, clist_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LinkLoginReq)},
  { 6, -1, sizeof(LinkLoginResp)},
  { 13, -1, sizeof(LinkListCamReq)},
  { 19, -1, sizeof(LinkListCamResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkLoginResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkListCamReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkListCamResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "linksystem.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _LinkLoginReq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LinkLoginResp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LinkListCamReq_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LinkListCamResp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_vidconf_2eproto::InitDefaults();
  _LinkLoginReq_default_instance_.DefaultConstruct();
  _LinkLoginResp_default_instance_.DefaultConstruct();
  _LinkListCamReq_default_instance_.DefaultConstruct();
  _LinkListCamResp_default_instance_.DefaultConstruct();
  _LinkListCamResp_default_instance_.get_mutable()->clist_ = const_cast< ::VidCameraList*>(
      ::VidCameraList::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020linksystem.proto\032\rvidconf.proto\"6\n\014Lin"
      "kLoginReq\022\023\n\013strUserName\030\001 \001(\t\022\021\n\tstrPas"
      "swd\030\002 \001(\t\"B\n\rLinkLoginResp\022\020\n\010strNonce\030\001"
      " \001(\t\022\021\n\tbRetNonce\030\002 \001(\010\022\014\n\004bRet\030\003 \001(\010\"-\n"
      "\016LinkListCamReq\022\r\n\005strId\030\001 \001(\t\022\014\n\004bAll\030\002"
      " \001(\010\"0\n\017LinkListCamResp\022\035\n\005cList\030\001 \001(\0132\016"
      ".VidCameraListb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "linksystem.proto", &protobuf_RegisterTypes);
  ::protobuf_vidconf_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_linksystem_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkLoginReq::kStrUserNameFieldNumber;
const int LinkLoginReq::kStrPasswdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkLoginReq::LinkLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkLoginReq)
}
LinkLoginReq::LinkLoginReq(const LinkLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strusername().size() > 0) {
    strusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strusername_);
  }
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strpasswd().size() > 0) {
    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
  // @@protoc_insertion_point(copy_constructor:LinkLoginReq)
}

void LinkLoginReq::SharedCtor() {
  strusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LinkLoginReq::~LinkLoginReq() {
  // @@protoc_insertion_point(destructor:LinkLoginReq)
  SharedDtor();
}

void LinkLoginReq::SharedDtor() {
  strusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkLoginReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[0].descriptor;
}

const LinkLoginReq& LinkLoginReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkLoginReq* LinkLoginReq::New(::google::protobuf::Arena* arena) const {
  LinkLoginReq* n = new LinkLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkLoginReq)
  strusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LinkLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strUserName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strusername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strusername().data(), this->strusername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkLoginReq.strUserName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strPasswd = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strpasswd().data(), this->strpasswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkLoginReq.strPasswd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkLoginReq)
  return false;
#undef DO_
}

void LinkLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkLoginReq)
  // string strUserName = 1;
  if (this->strusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strusername().data(), this->strusername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginReq.strUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strusername(), output);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginReq.strPasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strpasswd(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkLoginReq)
}

::google::protobuf::uint8* LinkLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkLoginReq)
  // string strUserName = 1;
  if (this->strusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strusername().data(), this->strusername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginReq.strUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strusername(), target);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginReq.strPasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpasswd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkLoginReq)
  return target;
}

size_t LinkLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkLoginReq)
  size_t total_size = 0;

  // string strUserName = 1;
  if (this->strusername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strusername());
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strpasswd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkLoginReq)
    MergeFrom(*source);
  }
}

void LinkLoginReq::MergeFrom(const LinkLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strusername().size() > 0) {

    strusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strusername_);
  }
  if (from.strpasswd().size() > 0) {

    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
}

void LinkLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkLoginReq::CopyFrom(const LinkLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkLoginReq::IsInitialized() const {
  return true;
}

void LinkLoginReq::Swap(LinkLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkLoginReq::InternalSwap(LinkLoginReq* other) {
  strusername_.Swap(&other->strusername_);
  strpasswd_.Swap(&other->strpasswd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkLoginReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkLoginReq

// string strUserName = 1;
void LinkLoginReq::clear_strusername() {
  strusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkLoginReq::strusername() const {
  // @@protoc_insertion_point(field_get:LinkLoginReq.strUserName)
  return strusername_.GetNoArena();
}
void LinkLoginReq::set_strusername(const ::std::string& value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkLoginReq.strUserName)
}
#if LANG_CXX11
void LinkLoginReq::set_strusername(::std::string&& value) {
  
  strusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkLoginReq.strUserName)
}
#endif
void LinkLoginReq::set_strusername(const char* value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkLoginReq.strUserName)
}
void LinkLoginReq::set_strusername(const char* value, size_t size) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkLoginReq.strUserName)
}
::std::string* LinkLoginReq::mutable_strusername() {
  
  // @@protoc_insertion_point(field_mutable:LinkLoginReq.strUserName)
  return strusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkLoginReq::release_strusername() {
  // @@protoc_insertion_point(field_release:LinkLoginReq.strUserName)
  
  return strusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkLoginReq::set_allocated_strusername(::std::string* strusername) {
  if (strusername != NULL) {
    
  } else {
    
  }
  strusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strusername);
  // @@protoc_insertion_point(field_set_allocated:LinkLoginReq.strUserName)
}

// string strPasswd = 2;
void LinkLoginReq::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkLoginReq::strpasswd() const {
  // @@protoc_insertion_point(field_get:LinkLoginReq.strPasswd)
  return strpasswd_.GetNoArena();
}
void LinkLoginReq::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkLoginReq.strPasswd)
}
#if LANG_CXX11
void LinkLoginReq::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkLoginReq.strPasswd)
}
#endif
void LinkLoginReq::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkLoginReq.strPasswd)
}
void LinkLoginReq::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkLoginReq.strPasswd)
}
::std::string* LinkLoginReq::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:LinkLoginReq.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkLoginReq::release_strpasswd() {
  // @@protoc_insertion_point(field_release:LinkLoginReq.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkLoginReq::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:LinkLoginReq.strPasswd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkLoginResp::kStrNonceFieldNumber;
const int LinkLoginResp::kBRetNonceFieldNumber;
const int LinkLoginResp::kBRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkLoginResp::LinkLoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkLoginResp)
}
LinkLoginResp::LinkLoginResp(const LinkLoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strnonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strnonce().size() > 0) {
    strnonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strnonce_);
  }
  ::memcpy(&bretnonce_, &from.bretnonce_,
    reinterpret_cast<char*>(&bret_) -
    reinterpret_cast<char*>(&bretnonce_) + sizeof(bret_));
  // @@protoc_insertion_point(copy_constructor:LinkLoginResp)
}

void LinkLoginResp::SharedCtor() {
  strnonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bretnonce_, 0, reinterpret_cast<char*>(&bret_) -
    reinterpret_cast<char*>(&bretnonce_) + sizeof(bret_));
  _cached_size_ = 0;
}

LinkLoginResp::~LinkLoginResp() {
  // @@protoc_insertion_point(destructor:LinkLoginResp)
  SharedDtor();
}

void LinkLoginResp::SharedDtor() {
  strnonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkLoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkLoginResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[1].descriptor;
}

const LinkLoginResp& LinkLoginResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkLoginResp* LinkLoginResp::New(::google::protobuf::Arena* arena) const {
  LinkLoginResp* n = new LinkLoginResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkLoginResp)
  strnonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bretnonce_, 0, reinterpret_cast<char*>(&bret_) -
    reinterpret_cast<char*>(&bretnonce_) + sizeof(bret_));
}

bool LinkLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkLoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strNonce = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnonce()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strnonce().data(), this->strnonce().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkLoginResp.strNonce"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bRetNonce = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bretnonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bRet = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkLoginResp)
  return false;
#undef DO_
}

void LinkLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkLoginResp)
  // string strNonce = 1;
  if (this->strnonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strnonce().data(), this->strnonce().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginResp.strNonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strnonce(), output);
  }

  // bool bRetNonce = 2;
  if (this->bretnonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bretnonce(), output);
  }

  // bool bRet = 3;
  if (this->bret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bret(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkLoginResp)
}

::google::protobuf::uint8* LinkLoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkLoginResp)
  // string strNonce = 1;
  if (this->strnonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strnonce().data(), this->strnonce().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginResp.strNonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strnonce(), target);
  }

  // bool bRetNonce = 2;
  if (this->bretnonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bretnonce(), target);
  }

  // bool bRet = 3;
  if (this->bret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bret(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkLoginResp)
  return target;
}

size_t LinkLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkLoginResp)
  size_t total_size = 0;

  // string strNonce = 1;
  if (this->strnonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strnonce());
  }

  // bool bRetNonce = 2;
  if (this->bretnonce() != 0) {
    total_size += 1 + 1;
  }

  // bool bRet = 3;
  if (this->bret() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkLoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkLoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkLoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkLoginResp)
    MergeFrom(*source);
  }
}

void LinkLoginResp::MergeFrom(const LinkLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strnonce().size() > 0) {

    strnonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strnonce_);
  }
  if (from.bretnonce() != 0) {
    set_bretnonce(from.bretnonce());
  }
  if (from.bret() != 0) {
    set_bret(from.bret());
  }
}

void LinkLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkLoginResp::CopyFrom(const LinkLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkLoginResp::IsInitialized() const {
  return true;
}

void LinkLoginResp::Swap(LinkLoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkLoginResp::InternalSwap(LinkLoginResp* other) {
  strnonce_.Swap(&other->strnonce_);
  std::swap(bretnonce_, other->bretnonce_);
  std::swap(bret_, other->bret_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkLoginResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkLoginResp

// string strNonce = 1;
void LinkLoginResp::clear_strnonce() {
  strnonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkLoginResp::strnonce() const {
  // @@protoc_insertion_point(field_get:LinkLoginResp.strNonce)
  return strnonce_.GetNoArena();
}
void LinkLoginResp::set_strnonce(const ::std::string& value) {
  
  strnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkLoginResp.strNonce)
}
#if LANG_CXX11
void LinkLoginResp::set_strnonce(::std::string&& value) {
  
  strnonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkLoginResp.strNonce)
}
#endif
void LinkLoginResp::set_strnonce(const char* value) {
  
  strnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkLoginResp.strNonce)
}
void LinkLoginResp::set_strnonce(const char* value, size_t size) {
  
  strnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkLoginResp.strNonce)
}
::std::string* LinkLoginResp::mutable_strnonce() {
  
  // @@protoc_insertion_point(field_mutable:LinkLoginResp.strNonce)
  return strnonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkLoginResp::release_strnonce() {
  // @@protoc_insertion_point(field_release:LinkLoginResp.strNonce)
  
  return strnonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkLoginResp::set_allocated_strnonce(::std::string* strnonce) {
  if (strnonce != NULL) {
    
  } else {
    
  }
  strnonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strnonce);
  // @@protoc_insertion_point(field_set_allocated:LinkLoginResp.strNonce)
}

// bool bRetNonce = 2;
void LinkLoginResp::clear_bretnonce() {
  bretnonce_ = false;
}
bool LinkLoginResp::bretnonce() const {
  // @@protoc_insertion_point(field_get:LinkLoginResp.bRetNonce)
  return bretnonce_;
}
void LinkLoginResp::set_bretnonce(bool value) {
  
  bretnonce_ = value;
  // @@protoc_insertion_point(field_set:LinkLoginResp.bRetNonce)
}

// bool bRet = 3;
void LinkLoginResp::clear_bret() {
  bret_ = false;
}
bool LinkLoginResp::bret() const {
  // @@protoc_insertion_point(field_get:LinkLoginResp.bRet)
  return bret_;
}
void LinkLoginResp::set_bret(bool value) {
  
  bret_ = value;
  // @@protoc_insertion_point(field_set:LinkLoginResp.bRet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkListCamReq::kStrIdFieldNumber;
const int LinkListCamReq::kBAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkListCamReq::LinkListCamReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkListCamReq)
}
LinkListCamReq::LinkListCamReq(const LinkListCamReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strid().size() > 0) {
    strid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  ball_ = from.ball_;
  // @@protoc_insertion_point(copy_constructor:LinkListCamReq)
}

void LinkListCamReq::SharedCtor() {
  strid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ball_ = false;
  _cached_size_ = 0;
}

LinkListCamReq::~LinkListCamReq() {
  // @@protoc_insertion_point(destructor:LinkListCamReq)
  SharedDtor();
}

void LinkListCamReq::SharedDtor() {
  strid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkListCamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkListCamReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[2].descriptor;
}

const LinkListCamReq& LinkListCamReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkListCamReq* LinkListCamReq::New(::google::protobuf::Arena* arena) const {
  LinkListCamReq* n = new LinkListCamReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkListCamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkListCamReq)
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ball_ = false;
}

bool LinkListCamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkListCamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strId = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strid().data(), this->strid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkListCamReq.strId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bAll = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkListCamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkListCamReq)
  return false;
#undef DO_
}

void LinkListCamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkListCamReq)
  // string strId = 1;
  if (this->strid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), this->strid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkListCamReq.strId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strid(), output);
  }

  // bool bAll = 2;
  if (this->ball() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ball(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkListCamReq)
}

::google::protobuf::uint8* LinkListCamReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkListCamReq)
  // string strId = 1;
  if (this->strid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), this->strid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkListCamReq.strId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strid(), target);
  }

  // bool bAll = 2;
  if (this->ball() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ball(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkListCamReq)
  return target;
}

size_t LinkListCamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkListCamReq)
  size_t total_size = 0;

  // string strId = 1;
  if (this->strid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strid());
  }

  // bool bAll = 2;
  if (this->ball() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkListCamReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkListCamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkListCamReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkListCamReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkListCamReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkListCamReq)
    MergeFrom(*source);
  }
}

void LinkListCamReq::MergeFrom(const LinkListCamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkListCamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strid().size() > 0) {

    strid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  if (from.ball() != 0) {
    set_ball(from.ball());
  }
}

void LinkListCamReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkListCamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkListCamReq::CopyFrom(const LinkListCamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkListCamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkListCamReq::IsInitialized() const {
  return true;
}

void LinkListCamReq::Swap(LinkListCamReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkListCamReq::InternalSwap(LinkListCamReq* other) {
  strid_.Swap(&other->strid_);
  std::swap(ball_, other->ball_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkListCamReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkListCamReq

// string strId = 1;
void LinkListCamReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkListCamReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkListCamReq.strId)
  return strid_.GetNoArena();
}
void LinkListCamReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkListCamReq.strId)
}
#if LANG_CXX11
void LinkListCamReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkListCamReq.strId)
}
#endif
void LinkListCamReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkListCamReq.strId)
}
void LinkListCamReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkListCamReq.strId)
}
::std::string* LinkListCamReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkListCamReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkListCamReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkListCamReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkListCamReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkListCamReq.strId)
}

// bool bAll = 2;
void LinkListCamReq::clear_ball() {
  ball_ = false;
}
bool LinkListCamReq::ball() const {
  // @@protoc_insertion_point(field_get:LinkListCamReq.bAll)
  return ball_;
}
void LinkListCamReq::set_ball(bool value) {
  
  ball_ = value;
  // @@protoc_insertion_point(field_set:LinkListCamReq.bAll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkListCamResp::kCListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkListCamResp::LinkListCamResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkListCamResp)
}
LinkListCamResp::LinkListCamResp(const LinkListCamResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clist()) {
    clist_ = new ::VidCameraList(*from.clist_);
  } else {
    clist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LinkListCamResp)
}

void LinkListCamResp::SharedCtor() {
  clist_ = NULL;
  _cached_size_ = 0;
}

LinkListCamResp::~LinkListCamResp() {
  // @@protoc_insertion_point(destructor:LinkListCamResp)
  SharedDtor();
}

void LinkListCamResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete clist_;
  }
}

void LinkListCamResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkListCamResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[3].descriptor;
}

const LinkListCamResp& LinkListCamResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkListCamResp* LinkListCamResp::New(::google::protobuf::Arena* arena) const {
  LinkListCamResp* n = new LinkListCamResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkListCamResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkListCamResp)
  if (GetArenaNoVirtual() == NULL && clist_ != NULL) {
    delete clist_;
  }
  clist_ = NULL;
}

bool LinkListCamResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkListCamResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VidCameraList cList = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkListCamResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkListCamResp)
  return false;
#undef DO_
}

void LinkListCamResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkListCamResp)
  // .VidCameraList cList = 1;
  if (this->has_clist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->clist_, output);
  }

  // @@protoc_insertion_point(serialize_end:LinkListCamResp)
}

::google::protobuf::uint8* LinkListCamResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkListCamResp)
  // .VidCameraList cList = 1;
  if (this->has_clist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->clist_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkListCamResp)
  return target;
}

size_t LinkListCamResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkListCamResp)
  size_t total_size = 0;

  // .VidCameraList cList = 1;
  if (this->has_clist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clist_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkListCamResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkListCamResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkListCamResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkListCamResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkListCamResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkListCamResp)
    MergeFrom(*source);
  }
}

void LinkListCamResp::MergeFrom(const LinkListCamResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkListCamResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clist()) {
    mutable_clist()->::VidCameraList::MergeFrom(from.clist());
  }
}

void LinkListCamResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkListCamResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkListCamResp::CopyFrom(const LinkListCamResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkListCamResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkListCamResp::IsInitialized() const {
  return true;
}

void LinkListCamResp::Swap(LinkListCamResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkListCamResp::InternalSwap(LinkListCamResp* other) {
  std::swap(clist_, other->clist_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkListCamResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkListCamResp

// .VidCameraList cList = 1;
bool LinkListCamResp::has_clist() const {
  return this != internal_default_instance() && clist_ != NULL;
}
void LinkListCamResp::clear_clist() {
  if (GetArenaNoVirtual() == NULL && clist_ != NULL) delete clist_;
  clist_ = NULL;
}
const ::VidCameraList& LinkListCamResp::clist() const {
  // @@protoc_insertion_point(field_get:LinkListCamResp.cList)
  return clist_ != NULL ? *clist_
                         : *::VidCameraList::internal_default_instance();
}
::VidCameraList* LinkListCamResp::mutable_clist() {
  
  if (clist_ == NULL) {
    clist_ = new ::VidCameraList;
  }
  // @@protoc_insertion_point(field_mutable:LinkListCamResp.cList)
  return clist_;
}
::VidCameraList* LinkListCamResp::release_clist() {
  // @@protoc_insertion_point(field_release:LinkListCamResp.cList)
  
  ::VidCameraList* temp = clist_;
  clist_ = NULL;
  return temp;
}
void LinkListCamResp::set_allocated_clist(::VidCameraList* clist) {
  delete clist_;
  clist_ = clist;
  if (clist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkListCamResp.cList)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
