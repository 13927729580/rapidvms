// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linksystem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "linksystem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class LinkLoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkLoginReq> {
} _LinkLoginReq_default_instance_;
class LinkLoginRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkLoginResp> {
} _LinkLoginResp_default_instance_;
class LinkKeepaliveReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkKeepaliveReq> {
} _LinkKeepaliveReq_default_instance_;
class LinkKeepaliveRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkKeepaliveResp> {
} _LinkKeepaliveResp_default_instance_;
class LinkListCamReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkListCamReq> {
} _LinkListCamReq_default_instance_;
class LinkListCamRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkListCamResp> {
} _LinkListCamResp_default_instance_;
class LinkCamReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkCamReq> {
} _LinkCamReq_default_instance_;
class LinkCamRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkCamResp> {
} _LinkCamResp_default_instance_;
class LinkVidDiskListReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkVidDiskListReq> {
} _LinkVidDiskListReq_default_instance_;
class LinkVidDiskListRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkVidDiskListResp> {
} _LinkVidDiskListResp_default_instance_;
class LinkSysVidDiskListReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkSysVidDiskListReq> {
} _LinkSysVidDiskListReq_default_instance_;
class LinkSysVidDiskListRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkSysVidDiskListResp> {
} _LinkSysVidDiskListResp_default_instance_;
class LinkAddDiskReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkAddDiskReq> {
} _LinkAddDiskReq_default_instance_;
class LinkAddDiskRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkAddDiskResp> {
} _LinkAddDiskResp_default_instance_;
class LinkDelDiskReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkDelDiskReq> {
} _LinkDelDiskReq_default_instance_;
class LinkDelDiskRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkDelDiskResp> {
} _LinkDelDiskResp_default_instance_;
class LinkUpdateDiskLimitReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkUpdateDiskLimitReq> {
} _LinkUpdateDiskLimitReq_default_instance_;
class LinkUpdateDiskLimitRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkUpdateDiskLimitResp> {
} _LinkUpdateDiskLimitResp_default_instance_;
class LinkGetLicReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkGetLicReq> {
} _LinkGetLicReq_default_instance_;
class LinkGetLicRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkGetLicResp> {
} _LinkGetLicResp_default_instance_;
class LinkGetVerReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkGetVerReq> {
} _LinkGetVerReq_default_instance_;
class LinkGetVerRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkGetVerResp> {
} _LinkGetVerResp_default_instance_;

namespace protobuf_linksystem_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginReq, strusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginReq, strpasswd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginResp, strnonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginResp, bretnonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkLoginResp, bret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkKeepaliveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkKeepaliveReq, nkeepalive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkKeepaliveResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkKeepaliveResp, nkeepalive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkListCamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkListCamReq, ball_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkListCamResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkListCamResp, clist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCamReq, strid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCamResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCamResp, ccam_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkVidDiskListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkVidDiskListReq, ball_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkVidDiskListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkVidDiskListResp, cdisk_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkSysVidDiskListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkSysVidDiskListReq, ball_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkSysVidDiskListResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkSysVidDiskListResp, cdisk_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkAddDiskReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkAddDiskReq, cdisk_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkAddDiskResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkAddDiskResp, bsuccess_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDelDiskReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDelDiskReq, strid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDelDiskResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDelDiskResp, bsuccess_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkUpdateDiskLimitReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkUpdateDiskLimitReq, strid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkUpdateDiskLimitReq, nlimit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkUpdateDiskLimitResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkUpdateDiskLimitResp, bsuccess_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetLicReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetLicReq, strfake_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetLicResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetLicResp, strlic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetLicResp, strhostid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetLicResp, nch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetLicResp, strtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetLicResp, strstarttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetLicResp, strexpiretime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetVerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetVerReq, strfake_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetVerResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetVerResp, strver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkGetVerResp, strinfo_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LinkLoginReq)},
  { 6, -1, sizeof(LinkLoginResp)},
  { 13, -1, sizeof(LinkKeepaliveReq)},
  { 18, -1, sizeof(LinkKeepaliveResp)},
  { 23, -1, sizeof(LinkListCamReq)},
  { 28, -1, sizeof(LinkListCamResp)},
  { 33, -1, sizeof(LinkCamReq)},
  { 38, -1, sizeof(LinkCamResp)},
  { 43, -1, sizeof(LinkVidDiskListReq)},
  { 48, -1, sizeof(LinkVidDiskListResp)},
  { 53, -1, sizeof(LinkSysVidDiskListReq)},
  { 58, -1, sizeof(LinkSysVidDiskListResp)},
  { 63, -1, sizeof(LinkAddDiskReq)},
  { 68, -1, sizeof(LinkAddDiskResp)},
  { 73, -1, sizeof(LinkDelDiskReq)},
  { 78, -1, sizeof(LinkDelDiskResp)},
  { 83, -1, sizeof(LinkUpdateDiskLimitReq)},
  { 89, -1, sizeof(LinkUpdateDiskLimitResp)},
  { 94, -1, sizeof(LinkGetLicReq)},
  { 99, -1, sizeof(LinkGetLicResp)},
  { 109, -1, sizeof(LinkGetVerReq)},
  { 114, -1, sizeof(LinkGetVerResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkLoginResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkKeepaliveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkKeepaliveResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkListCamReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkListCamResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkCamReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkCamResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkVidDiskListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkVidDiskListResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkSysVidDiskListReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkSysVidDiskListResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkAddDiskReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkAddDiskResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkDelDiskReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkDelDiskResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkUpdateDiskLimitReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkUpdateDiskLimitResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkGetLicReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkGetLicResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkGetVerReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkGetVerResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "linksystem.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace

void TableStruct::Shutdown() {
  _LinkLoginReq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LinkLoginResp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LinkKeepaliveReq_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LinkKeepaliveResp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LinkListCamReq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _LinkListCamResp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _LinkCamReq_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _LinkCamResp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _LinkVidDiskListReq_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _LinkVidDiskListResp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _LinkSysVidDiskListReq_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _LinkSysVidDiskListResp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _LinkAddDiskReq_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _LinkAddDiskResp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _LinkDelDiskReq_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _LinkDelDiskResp_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _LinkUpdateDiskLimitReq_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _LinkUpdateDiskLimitResp_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _LinkGetLicReq_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _LinkGetLicResp_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _LinkGetVerReq_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _LinkGetVerResp_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_vidconf_2eproto::InitDefaults();
  _LinkLoginReq_default_instance_.DefaultConstruct();
  _LinkLoginResp_default_instance_.DefaultConstruct();
  _LinkKeepaliveReq_default_instance_.DefaultConstruct();
  _LinkKeepaliveResp_default_instance_.DefaultConstruct();
  _LinkListCamReq_default_instance_.DefaultConstruct();
  _LinkListCamResp_default_instance_.DefaultConstruct();
  _LinkCamReq_default_instance_.DefaultConstruct();
  _LinkCamResp_default_instance_.DefaultConstruct();
  _LinkVidDiskListReq_default_instance_.DefaultConstruct();
  _LinkVidDiskListResp_default_instance_.DefaultConstruct();
  _LinkSysVidDiskListReq_default_instance_.DefaultConstruct();
  _LinkSysVidDiskListResp_default_instance_.DefaultConstruct();
  _LinkAddDiskReq_default_instance_.DefaultConstruct();
  _LinkAddDiskResp_default_instance_.DefaultConstruct();
  _LinkDelDiskReq_default_instance_.DefaultConstruct();
  _LinkDelDiskResp_default_instance_.DefaultConstruct();
  _LinkUpdateDiskLimitReq_default_instance_.DefaultConstruct();
  _LinkUpdateDiskLimitResp_default_instance_.DefaultConstruct();
  _LinkGetLicReq_default_instance_.DefaultConstruct();
  _LinkGetLicResp_default_instance_.DefaultConstruct();
  _LinkGetVerReq_default_instance_.DefaultConstruct();
  _LinkGetVerResp_default_instance_.DefaultConstruct();
  _LinkListCamResp_default_instance_.get_mutable()->clist_ = const_cast< ::VidCameraList*>(
      ::VidCameraList::internal_default_instance());
  _LinkCamResp_default_instance_.get_mutable()->ccam_ = const_cast< ::VidCamera*>(
      ::VidCamera::internal_default_instance());
  _LinkVidDiskListResp_default_instance_.get_mutable()->cdisk_ = const_cast< ::VidDiskList*>(
      ::VidDiskList::internal_default_instance());
  _LinkSysVidDiskListResp_default_instance_.get_mutable()->cdisk_ = const_cast< ::VidDiskList*>(
      ::VidDiskList::internal_default_instance());
  _LinkAddDiskReq_default_instance_.get_mutable()->cdisk_ = const_cast< ::VidDisk*>(
      ::VidDisk::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020linksystem.proto\032\rvidconf.proto\"6\n\014Lin"
      "kLoginReq\022\023\n\013strUserName\030\001 \001(\t\022\021\n\tstrPas"
      "swd\030\002 \001(\t\"B\n\rLinkLoginResp\022\020\n\010strNonce\030\001"
      " \001(\t\022\021\n\tbRetNonce\030\002 \001(\010\022\014\n\004bRet\030\003 \001(\010\"&\n"
      "\020LinkKeepaliveReq\022\022\n\nnKeepalive\030\001 \001(\005\"\'\n"
      "\021LinkKeepaliveResp\022\022\n\nnKeepalive\030\001 \001(\005\"\036"
      "\n\016LinkListCamReq\022\014\n\004bAll\030\001 \001(\010\"0\n\017LinkLi"
      "stCamResp\022\035\n\005cList\030\001 \001(\0132\016.VidCameraList"
      "\"\033\n\nLinkCamReq\022\r\n\005strId\030\001 \001(\t\"\'\n\013LinkCam"
      "Resp\022\030\n\004cCam\030\001 \001(\0132\n.VidCamera\"\"\n\022LinkVi"
      "dDiskListReq\022\014\n\004bAll\030\001 \001(\010\"2\n\023LinkVidDis"
      "kListResp\022\033\n\005cDisk\030\001 \001(\0132\014.VidDiskList\"%"
      "\n\025LinkSysVidDiskListReq\022\014\n\004bAll\030\001 \001(\010\"5\n"
      "\026LinkSysVidDiskListResp\022\033\n\005cDisk\030\001 \001(\0132\014"
      ".VidDiskList\")\n\016LinkAddDiskReq\022\027\n\005cDisk\030"
      "\001 \001(\0132\010.VidDisk\"#\n\017LinkAddDiskResp\022\020\n\010bS"
      "uccess\030\001 \001(\010\"\037\n\016LinkDelDiskReq\022\r\n\005strId\030"
      "\001 \001(\t\"#\n\017LinkDelDiskResp\022\020\n\010bSuccess\030\001 \001"
      "(\010\"7\n\026LinkUpdateDiskLimitReq\022\r\n\005strId\030\001 "
      "\001(\t\022\016\n\006nLimit\030\002 \001(\003\"+\n\027LinkUpdateDiskLim"
      "itResp\022\020\n\010bSuccess\030\001 \001(\010\" \n\rLinkGetLicRe"
      "q\022\017\n\007strFake\030\001 \001(\t\"~\n\016LinkGetLicResp\022\016\n\006"
      "strLic\030\001 \001(\t\022\021\n\tstrHostId\030\002 \001(\t\022\013\n\003nCh\030\003"
      " \001(\005\022\017\n\007strType\030\004 \001(\t\022\024\n\014strStartTime\030\005 "
      "\001(\t\022\025\n\rstrExpireTime\030\006 \001(\t\" \n\rLinkGetVer"
      "Req\022\017\n\007strFake\030\001 \001(\t\"1\n\016LinkGetVerResp\022\016"
      "\n\006strVer\030\001 \001(\t\022\017\n\007strInfo\030\002 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1079);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "linksystem.proto", &protobuf_RegisterTypes);
  ::protobuf_vidconf_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_linksystem_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkLoginReq::kStrUserNameFieldNumber;
const int LinkLoginReq::kStrPasswdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkLoginReq::LinkLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkLoginReq)
}
LinkLoginReq::LinkLoginReq(const LinkLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strusername().size() > 0) {
    strusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strusername_);
  }
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strpasswd().size() > 0) {
    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
  // @@protoc_insertion_point(copy_constructor:LinkLoginReq)
}

void LinkLoginReq::SharedCtor() {
  strusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LinkLoginReq::~LinkLoginReq() {
  // @@protoc_insertion_point(destructor:LinkLoginReq)
  SharedDtor();
}

void LinkLoginReq::SharedDtor() {
  strusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkLoginReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[0].descriptor;
}

const LinkLoginReq& LinkLoginReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkLoginReq* LinkLoginReq::New(::google::protobuf::Arena* arena) const {
  LinkLoginReq* n = new LinkLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkLoginReq)
  strusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LinkLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strUserName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strusername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strusername().data(), this->strusername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkLoginReq.strUserName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strPasswd = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strpasswd().data(), this->strpasswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkLoginReq.strPasswd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkLoginReq)
  return false;
#undef DO_
}

void LinkLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkLoginReq)
  // string strUserName = 1;
  if (this->strusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strusername().data(), this->strusername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginReq.strUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strusername(), output);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginReq.strPasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strpasswd(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkLoginReq)
}

::google::protobuf::uint8* LinkLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkLoginReq)
  // string strUserName = 1;
  if (this->strusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strusername().data(), this->strusername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginReq.strUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strusername(), target);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginReq.strPasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpasswd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkLoginReq)
  return target;
}

size_t LinkLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkLoginReq)
  size_t total_size = 0;

  // string strUserName = 1;
  if (this->strusername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strusername());
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strpasswd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkLoginReq)
    MergeFrom(*source);
  }
}

void LinkLoginReq::MergeFrom(const LinkLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strusername().size() > 0) {

    strusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strusername_);
  }
  if (from.strpasswd().size() > 0) {

    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
}

void LinkLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkLoginReq::CopyFrom(const LinkLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkLoginReq::IsInitialized() const {
  return true;
}

void LinkLoginReq::Swap(LinkLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkLoginReq::InternalSwap(LinkLoginReq* other) {
  strusername_.Swap(&other->strusername_);
  strpasswd_.Swap(&other->strpasswd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkLoginReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkLoginReq

// string strUserName = 1;
void LinkLoginReq::clear_strusername() {
  strusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkLoginReq::strusername() const {
  // @@protoc_insertion_point(field_get:LinkLoginReq.strUserName)
  return strusername_.GetNoArena();
}
void LinkLoginReq::set_strusername(const ::std::string& value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkLoginReq.strUserName)
}
#if LANG_CXX11
void LinkLoginReq::set_strusername(::std::string&& value) {
  
  strusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkLoginReq.strUserName)
}
#endif
void LinkLoginReq::set_strusername(const char* value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkLoginReq.strUserName)
}
void LinkLoginReq::set_strusername(const char* value, size_t size) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkLoginReq.strUserName)
}
::std::string* LinkLoginReq::mutable_strusername() {
  
  // @@protoc_insertion_point(field_mutable:LinkLoginReq.strUserName)
  return strusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkLoginReq::release_strusername() {
  // @@protoc_insertion_point(field_release:LinkLoginReq.strUserName)
  
  return strusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkLoginReq::set_allocated_strusername(::std::string* strusername) {
  if (strusername != NULL) {
    
  } else {
    
  }
  strusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strusername);
  // @@protoc_insertion_point(field_set_allocated:LinkLoginReq.strUserName)
}

// string strPasswd = 2;
void LinkLoginReq::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkLoginReq::strpasswd() const {
  // @@protoc_insertion_point(field_get:LinkLoginReq.strPasswd)
  return strpasswd_.GetNoArena();
}
void LinkLoginReq::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkLoginReq.strPasswd)
}
#if LANG_CXX11
void LinkLoginReq::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkLoginReq.strPasswd)
}
#endif
void LinkLoginReq::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkLoginReq.strPasswd)
}
void LinkLoginReq::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkLoginReq.strPasswd)
}
::std::string* LinkLoginReq::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:LinkLoginReq.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkLoginReq::release_strpasswd() {
  // @@protoc_insertion_point(field_release:LinkLoginReq.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkLoginReq::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:LinkLoginReq.strPasswd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkLoginResp::kStrNonceFieldNumber;
const int LinkLoginResp::kBRetNonceFieldNumber;
const int LinkLoginResp::kBRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkLoginResp::LinkLoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkLoginResp)
}
LinkLoginResp::LinkLoginResp(const LinkLoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strnonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strnonce().size() > 0) {
    strnonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strnonce_);
  }
  ::memcpy(&bretnonce_, &from.bretnonce_,
    reinterpret_cast<char*>(&bret_) -
    reinterpret_cast<char*>(&bretnonce_) + sizeof(bret_));
  // @@protoc_insertion_point(copy_constructor:LinkLoginResp)
}

void LinkLoginResp::SharedCtor() {
  strnonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bretnonce_, 0, reinterpret_cast<char*>(&bret_) -
    reinterpret_cast<char*>(&bretnonce_) + sizeof(bret_));
  _cached_size_ = 0;
}

LinkLoginResp::~LinkLoginResp() {
  // @@protoc_insertion_point(destructor:LinkLoginResp)
  SharedDtor();
}

void LinkLoginResp::SharedDtor() {
  strnonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkLoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkLoginResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[1].descriptor;
}

const LinkLoginResp& LinkLoginResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkLoginResp* LinkLoginResp::New(::google::protobuf::Arena* arena) const {
  LinkLoginResp* n = new LinkLoginResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkLoginResp)
  strnonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bretnonce_, 0, reinterpret_cast<char*>(&bret_) -
    reinterpret_cast<char*>(&bretnonce_) + sizeof(bret_));
}

bool LinkLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkLoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strNonce = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnonce()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strnonce().data(), this->strnonce().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkLoginResp.strNonce"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bRetNonce = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bretnonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bRet = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkLoginResp)
  return false;
#undef DO_
}

void LinkLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkLoginResp)
  // string strNonce = 1;
  if (this->strnonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strnonce().data(), this->strnonce().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginResp.strNonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strnonce(), output);
  }

  // bool bRetNonce = 2;
  if (this->bretnonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bretnonce(), output);
  }

  // bool bRet = 3;
  if (this->bret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bret(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkLoginResp)
}

::google::protobuf::uint8* LinkLoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkLoginResp)
  // string strNonce = 1;
  if (this->strnonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strnonce().data(), this->strnonce().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkLoginResp.strNonce");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strnonce(), target);
  }

  // bool bRetNonce = 2;
  if (this->bretnonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bretnonce(), target);
  }

  // bool bRet = 3;
  if (this->bret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bret(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkLoginResp)
  return target;
}

size_t LinkLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkLoginResp)
  size_t total_size = 0;

  // string strNonce = 1;
  if (this->strnonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strnonce());
  }

  // bool bRetNonce = 2;
  if (this->bretnonce() != 0) {
    total_size += 1 + 1;
  }

  // bool bRet = 3;
  if (this->bret() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkLoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkLoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkLoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkLoginResp)
    MergeFrom(*source);
  }
}

void LinkLoginResp::MergeFrom(const LinkLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strnonce().size() > 0) {

    strnonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strnonce_);
  }
  if (from.bretnonce() != 0) {
    set_bretnonce(from.bretnonce());
  }
  if (from.bret() != 0) {
    set_bret(from.bret());
  }
}

void LinkLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkLoginResp::CopyFrom(const LinkLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkLoginResp::IsInitialized() const {
  return true;
}

void LinkLoginResp::Swap(LinkLoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkLoginResp::InternalSwap(LinkLoginResp* other) {
  strnonce_.Swap(&other->strnonce_);
  std::swap(bretnonce_, other->bretnonce_);
  std::swap(bret_, other->bret_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkLoginResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkLoginResp

// string strNonce = 1;
void LinkLoginResp::clear_strnonce() {
  strnonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkLoginResp::strnonce() const {
  // @@protoc_insertion_point(field_get:LinkLoginResp.strNonce)
  return strnonce_.GetNoArena();
}
void LinkLoginResp::set_strnonce(const ::std::string& value) {
  
  strnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkLoginResp.strNonce)
}
#if LANG_CXX11
void LinkLoginResp::set_strnonce(::std::string&& value) {
  
  strnonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkLoginResp.strNonce)
}
#endif
void LinkLoginResp::set_strnonce(const char* value) {
  
  strnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkLoginResp.strNonce)
}
void LinkLoginResp::set_strnonce(const char* value, size_t size) {
  
  strnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkLoginResp.strNonce)
}
::std::string* LinkLoginResp::mutable_strnonce() {
  
  // @@protoc_insertion_point(field_mutable:LinkLoginResp.strNonce)
  return strnonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkLoginResp::release_strnonce() {
  // @@protoc_insertion_point(field_release:LinkLoginResp.strNonce)
  
  return strnonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkLoginResp::set_allocated_strnonce(::std::string* strnonce) {
  if (strnonce != NULL) {
    
  } else {
    
  }
  strnonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strnonce);
  // @@protoc_insertion_point(field_set_allocated:LinkLoginResp.strNonce)
}

// bool bRetNonce = 2;
void LinkLoginResp::clear_bretnonce() {
  bretnonce_ = false;
}
bool LinkLoginResp::bretnonce() const {
  // @@protoc_insertion_point(field_get:LinkLoginResp.bRetNonce)
  return bretnonce_;
}
void LinkLoginResp::set_bretnonce(bool value) {
  
  bretnonce_ = value;
  // @@protoc_insertion_point(field_set:LinkLoginResp.bRetNonce)
}

// bool bRet = 3;
void LinkLoginResp::clear_bret() {
  bret_ = false;
}
bool LinkLoginResp::bret() const {
  // @@protoc_insertion_point(field_get:LinkLoginResp.bRet)
  return bret_;
}
void LinkLoginResp::set_bret(bool value) {
  
  bret_ = value;
  // @@protoc_insertion_point(field_set:LinkLoginResp.bRet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkKeepaliveReq::kNKeepaliveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkKeepaliveReq::LinkKeepaliveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkKeepaliveReq)
}
LinkKeepaliveReq::LinkKeepaliveReq(const LinkKeepaliveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nkeepalive_ = from.nkeepalive_;
  // @@protoc_insertion_point(copy_constructor:LinkKeepaliveReq)
}

void LinkKeepaliveReq::SharedCtor() {
  nkeepalive_ = 0;
  _cached_size_ = 0;
}

LinkKeepaliveReq::~LinkKeepaliveReq() {
  // @@protoc_insertion_point(destructor:LinkKeepaliveReq)
  SharedDtor();
}

void LinkKeepaliveReq::SharedDtor() {
}

void LinkKeepaliveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkKeepaliveReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[2].descriptor;
}

const LinkKeepaliveReq& LinkKeepaliveReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkKeepaliveReq* LinkKeepaliveReq::New(::google::protobuf::Arena* arena) const {
  LinkKeepaliveReq* n = new LinkKeepaliveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkKeepaliveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkKeepaliveReq)
  nkeepalive_ = 0;
}

bool LinkKeepaliveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkKeepaliveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nKeepalive = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nkeepalive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkKeepaliveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkKeepaliveReq)
  return false;
#undef DO_
}

void LinkKeepaliveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkKeepaliveReq)
  // int32 nKeepalive = 1;
  if (this->nkeepalive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nkeepalive(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkKeepaliveReq)
}

::google::protobuf::uint8* LinkKeepaliveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkKeepaliveReq)
  // int32 nKeepalive = 1;
  if (this->nkeepalive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nkeepalive(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkKeepaliveReq)
  return target;
}

size_t LinkKeepaliveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkKeepaliveReq)
  size_t total_size = 0;

  // int32 nKeepalive = 1;
  if (this->nkeepalive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nkeepalive());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkKeepaliveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkKeepaliveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkKeepaliveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkKeepaliveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkKeepaliveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkKeepaliveReq)
    MergeFrom(*source);
  }
}

void LinkKeepaliveReq::MergeFrom(const LinkKeepaliveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkKeepaliveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nkeepalive() != 0) {
    set_nkeepalive(from.nkeepalive());
  }
}

void LinkKeepaliveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkKeepaliveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkKeepaliveReq::CopyFrom(const LinkKeepaliveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkKeepaliveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkKeepaliveReq::IsInitialized() const {
  return true;
}

void LinkKeepaliveReq::Swap(LinkKeepaliveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkKeepaliveReq::InternalSwap(LinkKeepaliveReq* other) {
  std::swap(nkeepalive_, other->nkeepalive_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkKeepaliveReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkKeepaliveReq

// int32 nKeepalive = 1;
void LinkKeepaliveReq::clear_nkeepalive() {
  nkeepalive_ = 0;
}
::google::protobuf::int32 LinkKeepaliveReq::nkeepalive() const {
  // @@protoc_insertion_point(field_get:LinkKeepaliveReq.nKeepalive)
  return nkeepalive_;
}
void LinkKeepaliveReq::set_nkeepalive(::google::protobuf::int32 value) {
  
  nkeepalive_ = value;
  // @@protoc_insertion_point(field_set:LinkKeepaliveReq.nKeepalive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkKeepaliveResp::kNKeepaliveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkKeepaliveResp::LinkKeepaliveResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkKeepaliveResp)
}
LinkKeepaliveResp::LinkKeepaliveResp(const LinkKeepaliveResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nkeepalive_ = from.nkeepalive_;
  // @@protoc_insertion_point(copy_constructor:LinkKeepaliveResp)
}

void LinkKeepaliveResp::SharedCtor() {
  nkeepalive_ = 0;
  _cached_size_ = 0;
}

LinkKeepaliveResp::~LinkKeepaliveResp() {
  // @@protoc_insertion_point(destructor:LinkKeepaliveResp)
  SharedDtor();
}

void LinkKeepaliveResp::SharedDtor() {
}

void LinkKeepaliveResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkKeepaliveResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[3].descriptor;
}

const LinkKeepaliveResp& LinkKeepaliveResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkKeepaliveResp* LinkKeepaliveResp::New(::google::protobuf::Arena* arena) const {
  LinkKeepaliveResp* n = new LinkKeepaliveResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkKeepaliveResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkKeepaliveResp)
  nkeepalive_ = 0;
}

bool LinkKeepaliveResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkKeepaliveResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nKeepalive = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nkeepalive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkKeepaliveResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkKeepaliveResp)
  return false;
#undef DO_
}

void LinkKeepaliveResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkKeepaliveResp)
  // int32 nKeepalive = 1;
  if (this->nkeepalive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nkeepalive(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkKeepaliveResp)
}

::google::protobuf::uint8* LinkKeepaliveResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkKeepaliveResp)
  // int32 nKeepalive = 1;
  if (this->nkeepalive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nkeepalive(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkKeepaliveResp)
  return target;
}

size_t LinkKeepaliveResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkKeepaliveResp)
  size_t total_size = 0;

  // int32 nKeepalive = 1;
  if (this->nkeepalive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nkeepalive());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkKeepaliveResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkKeepaliveResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkKeepaliveResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkKeepaliveResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkKeepaliveResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkKeepaliveResp)
    MergeFrom(*source);
  }
}

void LinkKeepaliveResp::MergeFrom(const LinkKeepaliveResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkKeepaliveResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nkeepalive() != 0) {
    set_nkeepalive(from.nkeepalive());
  }
}

void LinkKeepaliveResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkKeepaliveResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkKeepaliveResp::CopyFrom(const LinkKeepaliveResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkKeepaliveResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkKeepaliveResp::IsInitialized() const {
  return true;
}

void LinkKeepaliveResp::Swap(LinkKeepaliveResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkKeepaliveResp::InternalSwap(LinkKeepaliveResp* other) {
  std::swap(nkeepalive_, other->nkeepalive_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkKeepaliveResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkKeepaliveResp

// int32 nKeepalive = 1;
void LinkKeepaliveResp::clear_nkeepalive() {
  nkeepalive_ = 0;
}
::google::protobuf::int32 LinkKeepaliveResp::nkeepalive() const {
  // @@protoc_insertion_point(field_get:LinkKeepaliveResp.nKeepalive)
  return nkeepalive_;
}
void LinkKeepaliveResp::set_nkeepalive(::google::protobuf::int32 value) {
  
  nkeepalive_ = value;
  // @@protoc_insertion_point(field_set:LinkKeepaliveResp.nKeepalive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkListCamReq::kBAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkListCamReq::LinkListCamReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkListCamReq)
}
LinkListCamReq::LinkListCamReq(const LinkListCamReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ball_ = from.ball_;
  // @@protoc_insertion_point(copy_constructor:LinkListCamReq)
}

void LinkListCamReq::SharedCtor() {
  ball_ = false;
  _cached_size_ = 0;
}

LinkListCamReq::~LinkListCamReq() {
  // @@protoc_insertion_point(destructor:LinkListCamReq)
  SharedDtor();
}

void LinkListCamReq::SharedDtor() {
}

void LinkListCamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkListCamReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[4].descriptor;
}

const LinkListCamReq& LinkListCamReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkListCamReq* LinkListCamReq::New(::google::protobuf::Arena* arena) const {
  LinkListCamReq* n = new LinkListCamReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkListCamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkListCamReq)
  ball_ = false;
}

bool LinkListCamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkListCamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool bAll = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkListCamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkListCamReq)
  return false;
#undef DO_
}

void LinkListCamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkListCamReq)
  // bool bAll = 1;
  if (this->ball() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ball(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkListCamReq)
}

::google::protobuf::uint8* LinkListCamReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkListCamReq)
  // bool bAll = 1;
  if (this->ball() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ball(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkListCamReq)
  return target;
}

size_t LinkListCamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkListCamReq)
  size_t total_size = 0;

  // bool bAll = 1;
  if (this->ball() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkListCamReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkListCamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkListCamReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkListCamReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkListCamReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkListCamReq)
    MergeFrom(*source);
  }
}

void LinkListCamReq::MergeFrom(const LinkListCamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkListCamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ball() != 0) {
    set_ball(from.ball());
  }
}

void LinkListCamReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkListCamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkListCamReq::CopyFrom(const LinkListCamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkListCamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkListCamReq::IsInitialized() const {
  return true;
}

void LinkListCamReq::Swap(LinkListCamReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkListCamReq::InternalSwap(LinkListCamReq* other) {
  std::swap(ball_, other->ball_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkListCamReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkListCamReq

// bool bAll = 1;
void LinkListCamReq::clear_ball() {
  ball_ = false;
}
bool LinkListCamReq::ball() const {
  // @@protoc_insertion_point(field_get:LinkListCamReq.bAll)
  return ball_;
}
void LinkListCamReq::set_ball(bool value) {
  
  ball_ = value;
  // @@protoc_insertion_point(field_set:LinkListCamReq.bAll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkListCamResp::kCListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkListCamResp::LinkListCamResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkListCamResp)
}
LinkListCamResp::LinkListCamResp(const LinkListCamResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clist()) {
    clist_ = new ::VidCameraList(*from.clist_);
  } else {
    clist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LinkListCamResp)
}

void LinkListCamResp::SharedCtor() {
  clist_ = NULL;
  _cached_size_ = 0;
}

LinkListCamResp::~LinkListCamResp() {
  // @@protoc_insertion_point(destructor:LinkListCamResp)
  SharedDtor();
}

void LinkListCamResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete clist_;
  }
}

void LinkListCamResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkListCamResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[5].descriptor;
}

const LinkListCamResp& LinkListCamResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkListCamResp* LinkListCamResp::New(::google::protobuf::Arena* arena) const {
  LinkListCamResp* n = new LinkListCamResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkListCamResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkListCamResp)
  if (GetArenaNoVirtual() == NULL && clist_ != NULL) {
    delete clist_;
  }
  clist_ = NULL;
}

bool LinkListCamResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkListCamResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VidCameraList cList = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkListCamResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkListCamResp)
  return false;
#undef DO_
}

void LinkListCamResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkListCamResp)
  // .VidCameraList cList = 1;
  if (this->has_clist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->clist_, output);
  }

  // @@protoc_insertion_point(serialize_end:LinkListCamResp)
}

::google::protobuf::uint8* LinkListCamResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkListCamResp)
  // .VidCameraList cList = 1;
  if (this->has_clist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->clist_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkListCamResp)
  return target;
}

size_t LinkListCamResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkListCamResp)
  size_t total_size = 0;

  // .VidCameraList cList = 1;
  if (this->has_clist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clist_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkListCamResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkListCamResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkListCamResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkListCamResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkListCamResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkListCamResp)
    MergeFrom(*source);
  }
}

void LinkListCamResp::MergeFrom(const LinkListCamResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkListCamResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clist()) {
    mutable_clist()->::VidCameraList::MergeFrom(from.clist());
  }
}

void LinkListCamResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkListCamResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkListCamResp::CopyFrom(const LinkListCamResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkListCamResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkListCamResp::IsInitialized() const {
  return true;
}

void LinkListCamResp::Swap(LinkListCamResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkListCamResp::InternalSwap(LinkListCamResp* other) {
  std::swap(clist_, other->clist_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkListCamResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkListCamResp

// .VidCameraList cList = 1;
bool LinkListCamResp::has_clist() const {
  return this != internal_default_instance() && clist_ != NULL;
}
void LinkListCamResp::clear_clist() {
  if (GetArenaNoVirtual() == NULL && clist_ != NULL) delete clist_;
  clist_ = NULL;
}
const ::VidCameraList& LinkListCamResp::clist() const {
  // @@protoc_insertion_point(field_get:LinkListCamResp.cList)
  return clist_ != NULL ? *clist_
                         : *::VidCameraList::internal_default_instance();
}
::VidCameraList* LinkListCamResp::mutable_clist() {
  
  if (clist_ == NULL) {
    clist_ = new ::VidCameraList;
  }
  // @@protoc_insertion_point(field_mutable:LinkListCamResp.cList)
  return clist_;
}
::VidCameraList* LinkListCamResp::release_clist() {
  // @@protoc_insertion_point(field_release:LinkListCamResp.cList)
  
  ::VidCameraList* temp = clist_;
  clist_ = NULL;
  return temp;
}
void LinkListCamResp::set_allocated_clist(::VidCameraList* clist) {
  delete clist_;
  clist_ = clist;
  if (clist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkListCamResp.cList)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkCamReq::kStrIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkCamReq::LinkCamReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkCamReq)
}
LinkCamReq::LinkCamReq(const LinkCamReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strid().size() > 0) {
    strid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  // @@protoc_insertion_point(copy_constructor:LinkCamReq)
}

void LinkCamReq::SharedCtor() {
  strid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LinkCamReq::~LinkCamReq() {
  // @@protoc_insertion_point(destructor:LinkCamReq)
  SharedDtor();
}

void LinkCamReq::SharedDtor() {
  strid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkCamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkCamReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[6].descriptor;
}

const LinkCamReq& LinkCamReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkCamReq* LinkCamReq::New(::google::protobuf::Arena* arena) const {
  LinkCamReq* n = new LinkCamReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkCamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkCamReq)
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LinkCamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkCamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strId = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strid().data(), this->strid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkCamReq.strId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkCamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkCamReq)
  return false;
#undef DO_
}

void LinkCamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkCamReq)
  // string strId = 1;
  if (this->strid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), this->strid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkCamReq.strId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strid(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkCamReq)
}

::google::protobuf::uint8* LinkCamReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkCamReq)
  // string strId = 1;
  if (this->strid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), this->strid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkCamReq.strId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkCamReq)
  return target;
}

size_t LinkCamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkCamReq)
  size_t total_size = 0;

  // string strId = 1;
  if (this->strid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkCamReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkCamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkCamReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkCamReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkCamReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkCamReq)
    MergeFrom(*source);
  }
}

void LinkCamReq::MergeFrom(const LinkCamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkCamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strid().size() > 0) {

    strid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
}

void LinkCamReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkCamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkCamReq::CopyFrom(const LinkCamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkCamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkCamReq::IsInitialized() const {
  return true;
}

void LinkCamReq::Swap(LinkCamReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkCamReq::InternalSwap(LinkCamReq* other) {
  strid_.Swap(&other->strid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkCamReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkCamReq

// string strId = 1;
void LinkCamReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkCamReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkCamReq.strId)
  return strid_.GetNoArena();
}
void LinkCamReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkCamReq.strId)
}
#if LANG_CXX11
void LinkCamReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkCamReq.strId)
}
#endif
void LinkCamReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkCamReq.strId)
}
void LinkCamReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkCamReq.strId)
}
::std::string* LinkCamReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkCamReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkCamReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkCamReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkCamReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkCamReq.strId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkCamResp::kCCamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkCamResp::LinkCamResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkCamResp)
}
LinkCamResp::LinkCamResp(const LinkCamResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ccam()) {
    ccam_ = new ::VidCamera(*from.ccam_);
  } else {
    ccam_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LinkCamResp)
}

void LinkCamResp::SharedCtor() {
  ccam_ = NULL;
  _cached_size_ = 0;
}

LinkCamResp::~LinkCamResp() {
  // @@protoc_insertion_point(destructor:LinkCamResp)
  SharedDtor();
}

void LinkCamResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ccam_;
  }
}

void LinkCamResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkCamResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[7].descriptor;
}

const LinkCamResp& LinkCamResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkCamResp* LinkCamResp::New(::google::protobuf::Arena* arena) const {
  LinkCamResp* n = new LinkCamResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkCamResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkCamResp)
  if (GetArenaNoVirtual() == NULL && ccam_ != NULL) {
    delete ccam_;
  }
  ccam_ = NULL;
}

bool LinkCamResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkCamResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VidCamera cCam = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ccam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkCamResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkCamResp)
  return false;
#undef DO_
}

void LinkCamResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkCamResp)
  // .VidCamera cCam = 1;
  if (this->has_ccam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ccam_, output);
  }

  // @@protoc_insertion_point(serialize_end:LinkCamResp)
}

::google::protobuf::uint8* LinkCamResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkCamResp)
  // .VidCamera cCam = 1;
  if (this->has_ccam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ccam_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkCamResp)
  return target;
}

size_t LinkCamResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkCamResp)
  size_t total_size = 0;

  // .VidCamera cCam = 1;
  if (this->has_ccam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ccam_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkCamResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkCamResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkCamResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkCamResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkCamResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkCamResp)
    MergeFrom(*source);
  }
}

void LinkCamResp::MergeFrom(const LinkCamResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkCamResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ccam()) {
    mutable_ccam()->::VidCamera::MergeFrom(from.ccam());
  }
}

void LinkCamResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkCamResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkCamResp::CopyFrom(const LinkCamResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkCamResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkCamResp::IsInitialized() const {
  return true;
}

void LinkCamResp::Swap(LinkCamResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkCamResp::InternalSwap(LinkCamResp* other) {
  std::swap(ccam_, other->ccam_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkCamResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkCamResp

// .VidCamera cCam = 1;
bool LinkCamResp::has_ccam() const {
  return this != internal_default_instance() && ccam_ != NULL;
}
void LinkCamResp::clear_ccam() {
  if (GetArenaNoVirtual() == NULL && ccam_ != NULL) delete ccam_;
  ccam_ = NULL;
}
const ::VidCamera& LinkCamResp::ccam() const {
  // @@protoc_insertion_point(field_get:LinkCamResp.cCam)
  return ccam_ != NULL ? *ccam_
                         : *::VidCamera::internal_default_instance();
}
::VidCamera* LinkCamResp::mutable_ccam() {
  
  if (ccam_ == NULL) {
    ccam_ = new ::VidCamera;
  }
  // @@protoc_insertion_point(field_mutable:LinkCamResp.cCam)
  return ccam_;
}
::VidCamera* LinkCamResp::release_ccam() {
  // @@protoc_insertion_point(field_release:LinkCamResp.cCam)
  
  ::VidCamera* temp = ccam_;
  ccam_ = NULL;
  return temp;
}
void LinkCamResp::set_allocated_ccam(::VidCamera* ccam) {
  delete ccam_;
  ccam_ = ccam;
  if (ccam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkCamResp.cCam)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkVidDiskListReq::kBAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkVidDiskListReq::LinkVidDiskListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkVidDiskListReq)
}
LinkVidDiskListReq::LinkVidDiskListReq(const LinkVidDiskListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ball_ = from.ball_;
  // @@protoc_insertion_point(copy_constructor:LinkVidDiskListReq)
}

void LinkVidDiskListReq::SharedCtor() {
  ball_ = false;
  _cached_size_ = 0;
}

LinkVidDiskListReq::~LinkVidDiskListReq() {
  // @@protoc_insertion_point(destructor:LinkVidDiskListReq)
  SharedDtor();
}

void LinkVidDiskListReq::SharedDtor() {
}

void LinkVidDiskListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkVidDiskListReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[8].descriptor;
}

const LinkVidDiskListReq& LinkVidDiskListReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkVidDiskListReq* LinkVidDiskListReq::New(::google::protobuf::Arena* arena) const {
  LinkVidDiskListReq* n = new LinkVidDiskListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkVidDiskListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkVidDiskListReq)
  ball_ = false;
}

bool LinkVidDiskListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkVidDiskListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool bAll = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkVidDiskListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkVidDiskListReq)
  return false;
#undef DO_
}

void LinkVidDiskListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkVidDiskListReq)
  // bool bAll = 1;
  if (this->ball() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ball(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkVidDiskListReq)
}

::google::protobuf::uint8* LinkVidDiskListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkVidDiskListReq)
  // bool bAll = 1;
  if (this->ball() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ball(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkVidDiskListReq)
  return target;
}

size_t LinkVidDiskListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkVidDiskListReq)
  size_t total_size = 0;

  // bool bAll = 1;
  if (this->ball() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkVidDiskListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkVidDiskListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkVidDiskListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkVidDiskListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkVidDiskListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkVidDiskListReq)
    MergeFrom(*source);
  }
}

void LinkVidDiskListReq::MergeFrom(const LinkVidDiskListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkVidDiskListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ball() != 0) {
    set_ball(from.ball());
  }
}

void LinkVidDiskListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkVidDiskListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkVidDiskListReq::CopyFrom(const LinkVidDiskListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkVidDiskListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkVidDiskListReq::IsInitialized() const {
  return true;
}

void LinkVidDiskListReq::Swap(LinkVidDiskListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkVidDiskListReq::InternalSwap(LinkVidDiskListReq* other) {
  std::swap(ball_, other->ball_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkVidDiskListReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkVidDiskListReq

// bool bAll = 1;
void LinkVidDiskListReq::clear_ball() {
  ball_ = false;
}
bool LinkVidDiskListReq::ball() const {
  // @@protoc_insertion_point(field_get:LinkVidDiskListReq.bAll)
  return ball_;
}
void LinkVidDiskListReq::set_ball(bool value) {
  
  ball_ = value;
  // @@protoc_insertion_point(field_set:LinkVidDiskListReq.bAll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkVidDiskListResp::kCDiskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkVidDiskListResp::LinkVidDiskListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkVidDiskListResp)
}
LinkVidDiskListResp::LinkVidDiskListResp(const LinkVidDiskListResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cdisk()) {
    cdisk_ = new ::VidDiskList(*from.cdisk_);
  } else {
    cdisk_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LinkVidDiskListResp)
}

void LinkVidDiskListResp::SharedCtor() {
  cdisk_ = NULL;
  _cached_size_ = 0;
}

LinkVidDiskListResp::~LinkVidDiskListResp() {
  // @@protoc_insertion_point(destructor:LinkVidDiskListResp)
  SharedDtor();
}

void LinkVidDiskListResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cdisk_;
  }
}

void LinkVidDiskListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkVidDiskListResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[9].descriptor;
}

const LinkVidDiskListResp& LinkVidDiskListResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkVidDiskListResp* LinkVidDiskListResp::New(::google::protobuf::Arena* arena) const {
  LinkVidDiskListResp* n = new LinkVidDiskListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkVidDiskListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkVidDiskListResp)
  if (GetArenaNoVirtual() == NULL && cdisk_ != NULL) {
    delete cdisk_;
  }
  cdisk_ = NULL;
}

bool LinkVidDiskListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkVidDiskListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VidDiskList cDisk = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdisk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkVidDiskListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkVidDiskListResp)
  return false;
#undef DO_
}

void LinkVidDiskListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkVidDiskListResp)
  // .VidDiskList cDisk = 1;
  if (this->has_cdisk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cdisk_, output);
  }

  // @@protoc_insertion_point(serialize_end:LinkVidDiskListResp)
}

::google::protobuf::uint8* LinkVidDiskListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkVidDiskListResp)
  // .VidDiskList cDisk = 1;
  if (this->has_cdisk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cdisk_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkVidDiskListResp)
  return target;
}

size_t LinkVidDiskListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkVidDiskListResp)
  size_t total_size = 0;

  // .VidDiskList cDisk = 1;
  if (this->has_cdisk()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cdisk_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkVidDiskListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkVidDiskListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkVidDiskListResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkVidDiskListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkVidDiskListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkVidDiskListResp)
    MergeFrom(*source);
  }
}

void LinkVidDiskListResp::MergeFrom(const LinkVidDiskListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkVidDiskListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cdisk()) {
    mutable_cdisk()->::VidDiskList::MergeFrom(from.cdisk());
  }
}

void LinkVidDiskListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkVidDiskListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkVidDiskListResp::CopyFrom(const LinkVidDiskListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkVidDiskListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkVidDiskListResp::IsInitialized() const {
  return true;
}

void LinkVidDiskListResp::Swap(LinkVidDiskListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkVidDiskListResp::InternalSwap(LinkVidDiskListResp* other) {
  std::swap(cdisk_, other->cdisk_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkVidDiskListResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkVidDiskListResp

// .VidDiskList cDisk = 1;
bool LinkVidDiskListResp::has_cdisk() const {
  return this != internal_default_instance() && cdisk_ != NULL;
}
void LinkVidDiskListResp::clear_cdisk() {
  if (GetArenaNoVirtual() == NULL && cdisk_ != NULL) delete cdisk_;
  cdisk_ = NULL;
}
const ::VidDiskList& LinkVidDiskListResp::cdisk() const {
  // @@protoc_insertion_point(field_get:LinkVidDiskListResp.cDisk)
  return cdisk_ != NULL ? *cdisk_
                         : *::VidDiskList::internal_default_instance();
}
::VidDiskList* LinkVidDiskListResp::mutable_cdisk() {
  
  if (cdisk_ == NULL) {
    cdisk_ = new ::VidDiskList;
  }
  // @@protoc_insertion_point(field_mutable:LinkVidDiskListResp.cDisk)
  return cdisk_;
}
::VidDiskList* LinkVidDiskListResp::release_cdisk() {
  // @@protoc_insertion_point(field_release:LinkVidDiskListResp.cDisk)
  
  ::VidDiskList* temp = cdisk_;
  cdisk_ = NULL;
  return temp;
}
void LinkVidDiskListResp::set_allocated_cdisk(::VidDiskList* cdisk) {
  delete cdisk_;
  cdisk_ = cdisk;
  if (cdisk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkVidDiskListResp.cDisk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkSysVidDiskListReq::kBAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkSysVidDiskListReq::LinkSysVidDiskListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkSysVidDiskListReq)
}
LinkSysVidDiskListReq::LinkSysVidDiskListReq(const LinkSysVidDiskListReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ball_ = from.ball_;
  // @@protoc_insertion_point(copy_constructor:LinkSysVidDiskListReq)
}

void LinkSysVidDiskListReq::SharedCtor() {
  ball_ = false;
  _cached_size_ = 0;
}

LinkSysVidDiskListReq::~LinkSysVidDiskListReq() {
  // @@protoc_insertion_point(destructor:LinkSysVidDiskListReq)
  SharedDtor();
}

void LinkSysVidDiskListReq::SharedDtor() {
}

void LinkSysVidDiskListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkSysVidDiskListReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[10].descriptor;
}

const LinkSysVidDiskListReq& LinkSysVidDiskListReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkSysVidDiskListReq* LinkSysVidDiskListReq::New(::google::protobuf::Arena* arena) const {
  LinkSysVidDiskListReq* n = new LinkSysVidDiskListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkSysVidDiskListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkSysVidDiskListReq)
  ball_ = false;
}

bool LinkSysVidDiskListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkSysVidDiskListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool bAll = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkSysVidDiskListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkSysVidDiskListReq)
  return false;
#undef DO_
}

void LinkSysVidDiskListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkSysVidDiskListReq)
  // bool bAll = 1;
  if (this->ball() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ball(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkSysVidDiskListReq)
}

::google::protobuf::uint8* LinkSysVidDiskListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkSysVidDiskListReq)
  // bool bAll = 1;
  if (this->ball() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ball(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkSysVidDiskListReq)
  return target;
}

size_t LinkSysVidDiskListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkSysVidDiskListReq)
  size_t total_size = 0;

  // bool bAll = 1;
  if (this->ball() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkSysVidDiskListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkSysVidDiskListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkSysVidDiskListReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkSysVidDiskListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkSysVidDiskListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkSysVidDiskListReq)
    MergeFrom(*source);
  }
}

void LinkSysVidDiskListReq::MergeFrom(const LinkSysVidDiskListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkSysVidDiskListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ball() != 0) {
    set_ball(from.ball());
  }
}

void LinkSysVidDiskListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkSysVidDiskListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkSysVidDiskListReq::CopyFrom(const LinkSysVidDiskListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkSysVidDiskListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkSysVidDiskListReq::IsInitialized() const {
  return true;
}

void LinkSysVidDiskListReq::Swap(LinkSysVidDiskListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkSysVidDiskListReq::InternalSwap(LinkSysVidDiskListReq* other) {
  std::swap(ball_, other->ball_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkSysVidDiskListReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkSysVidDiskListReq

// bool bAll = 1;
void LinkSysVidDiskListReq::clear_ball() {
  ball_ = false;
}
bool LinkSysVidDiskListReq::ball() const {
  // @@protoc_insertion_point(field_get:LinkSysVidDiskListReq.bAll)
  return ball_;
}
void LinkSysVidDiskListReq::set_ball(bool value) {
  
  ball_ = value;
  // @@protoc_insertion_point(field_set:LinkSysVidDiskListReq.bAll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkSysVidDiskListResp::kCDiskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkSysVidDiskListResp::LinkSysVidDiskListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkSysVidDiskListResp)
}
LinkSysVidDiskListResp::LinkSysVidDiskListResp(const LinkSysVidDiskListResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cdisk()) {
    cdisk_ = new ::VidDiskList(*from.cdisk_);
  } else {
    cdisk_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LinkSysVidDiskListResp)
}

void LinkSysVidDiskListResp::SharedCtor() {
  cdisk_ = NULL;
  _cached_size_ = 0;
}

LinkSysVidDiskListResp::~LinkSysVidDiskListResp() {
  // @@protoc_insertion_point(destructor:LinkSysVidDiskListResp)
  SharedDtor();
}

void LinkSysVidDiskListResp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cdisk_;
  }
}

void LinkSysVidDiskListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkSysVidDiskListResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[11].descriptor;
}

const LinkSysVidDiskListResp& LinkSysVidDiskListResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkSysVidDiskListResp* LinkSysVidDiskListResp::New(::google::protobuf::Arena* arena) const {
  LinkSysVidDiskListResp* n = new LinkSysVidDiskListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkSysVidDiskListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkSysVidDiskListResp)
  if (GetArenaNoVirtual() == NULL && cdisk_ != NULL) {
    delete cdisk_;
  }
  cdisk_ = NULL;
}

bool LinkSysVidDiskListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkSysVidDiskListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VidDiskList cDisk = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdisk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkSysVidDiskListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkSysVidDiskListResp)
  return false;
#undef DO_
}

void LinkSysVidDiskListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkSysVidDiskListResp)
  // .VidDiskList cDisk = 1;
  if (this->has_cdisk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cdisk_, output);
  }

  // @@protoc_insertion_point(serialize_end:LinkSysVidDiskListResp)
}

::google::protobuf::uint8* LinkSysVidDiskListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkSysVidDiskListResp)
  // .VidDiskList cDisk = 1;
  if (this->has_cdisk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cdisk_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkSysVidDiskListResp)
  return target;
}

size_t LinkSysVidDiskListResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkSysVidDiskListResp)
  size_t total_size = 0;

  // .VidDiskList cDisk = 1;
  if (this->has_cdisk()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cdisk_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkSysVidDiskListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkSysVidDiskListResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkSysVidDiskListResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkSysVidDiskListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkSysVidDiskListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkSysVidDiskListResp)
    MergeFrom(*source);
  }
}

void LinkSysVidDiskListResp::MergeFrom(const LinkSysVidDiskListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkSysVidDiskListResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cdisk()) {
    mutable_cdisk()->::VidDiskList::MergeFrom(from.cdisk());
  }
}

void LinkSysVidDiskListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkSysVidDiskListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkSysVidDiskListResp::CopyFrom(const LinkSysVidDiskListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkSysVidDiskListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkSysVidDiskListResp::IsInitialized() const {
  return true;
}

void LinkSysVidDiskListResp::Swap(LinkSysVidDiskListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkSysVidDiskListResp::InternalSwap(LinkSysVidDiskListResp* other) {
  std::swap(cdisk_, other->cdisk_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkSysVidDiskListResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkSysVidDiskListResp

// .VidDiskList cDisk = 1;
bool LinkSysVidDiskListResp::has_cdisk() const {
  return this != internal_default_instance() && cdisk_ != NULL;
}
void LinkSysVidDiskListResp::clear_cdisk() {
  if (GetArenaNoVirtual() == NULL && cdisk_ != NULL) delete cdisk_;
  cdisk_ = NULL;
}
const ::VidDiskList& LinkSysVidDiskListResp::cdisk() const {
  // @@protoc_insertion_point(field_get:LinkSysVidDiskListResp.cDisk)
  return cdisk_ != NULL ? *cdisk_
                         : *::VidDiskList::internal_default_instance();
}
::VidDiskList* LinkSysVidDiskListResp::mutable_cdisk() {
  
  if (cdisk_ == NULL) {
    cdisk_ = new ::VidDiskList;
  }
  // @@protoc_insertion_point(field_mutable:LinkSysVidDiskListResp.cDisk)
  return cdisk_;
}
::VidDiskList* LinkSysVidDiskListResp::release_cdisk() {
  // @@protoc_insertion_point(field_release:LinkSysVidDiskListResp.cDisk)
  
  ::VidDiskList* temp = cdisk_;
  cdisk_ = NULL;
  return temp;
}
void LinkSysVidDiskListResp::set_allocated_cdisk(::VidDiskList* cdisk) {
  delete cdisk_;
  cdisk_ = cdisk;
  if (cdisk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkSysVidDiskListResp.cDisk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkAddDiskReq::kCDiskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkAddDiskReq::LinkAddDiskReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkAddDiskReq)
}
LinkAddDiskReq::LinkAddDiskReq(const LinkAddDiskReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cdisk()) {
    cdisk_ = new ::VidDisk(*from.cdisk_);
  } else {
    cdisk_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LinkAddDiskReq)
}

void LinkAddDiskReq::SharedCtor() {
  cdisk_ = NULL;
  _cached_size_ = 0;
}

LinkAddDiskReq::~LinkAddDiskReq() {
  // @@protoc_insertion_point(destructor:LinkAddDiskReq)
  SharedDtor();
}

void LinkAddDiskReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cdisk_;
  }
}

void LinkAddDiskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkAddDiskReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[12].descriptor;
}

const LinkAddDiskReq& LinkAddDiskReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkAddDiskReq* LinkAddDiskReq::New(::google::protobuf::Arena* arena) const {
  LinkAddDiskReq* n = new LinkAddDiskReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkAddDiskReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkAddDiskReq)
  if (GetArenaNoVirtual() == NULL && cdisk_ != NULL) {
    delete cdisk_;
  }
  cdisk_ = NULL;
}

bool LinkAddDiskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkAddDiskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VidDisk cDisk = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdisk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkAddDiskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkAddDiskReq)
  return false;
#undef DO_
}

void LinkAddDiskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkAddDiskReq)
  // .VidDisk cDisk = 1;
  if (this->has_cdisk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cdisk_, output);
  }

  // @@protoc_insertion_point(serialize_end:LinkAddDiskReq)
}

::google::protobuf::uint8* LinkAddDiskReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkAddDiskReq)
  // .VidDisk cDisk = 1;
  if (this->has_cdisk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cdisk_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkAddDiskReq)
  return target;
}

size_t LinkAddDiskReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkAddDiskReq)
  size_t total_size = 0;

  // .VidDisk cDisk = 1;
  if (this->has_cdisk()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cdisk_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkAddDiskReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkAddDiskReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAddDiskReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkAddDiskReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkAddDiskReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkAddDiskReq)
    MergeFrom(*source);
  }
}

void LinkAddDiskReq::MergeFrom(const LinkAddDiskReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkAddDiskReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cdisk()) {
    mutable_cdisk()->::VidDisk::MergeFrom(from.cdisk());
  }
}

void LinkAddDiskReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkAddDiskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAddDiskReq::CopyFrom(const LinkAddDiskReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkAddDiskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAddDiskReq::IsInitialized() const {
  return true;
}

void LinkAddDiskReq::Swap(LinkAddDiskReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkAddDiskReq::InternalSwap(LinkAddDiskReq* other) {
  std::swap(cdisk_, other->cdisk_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkAddDiskReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkAddDiskReq

// .VidDisk cDisk = 1;
bool LinkAddDiskReq::has_cdisk() const {
  return this != internal_default_instance() && cdisk_ != NULL;
}
void LinkAddDiskReq::clear_cdisk() {
  if (GetArenaNoVirtual() == NULL && cdisk_ != NULL) delete cdisk_;
  cdisk_ = NULL;
}
const ::VidDisk& LinkAddDiskReq::cdisk() const {
  // @@protoc_insertion_point(field_get:LinkAddDiskReq.cDisk)
  return cdisk_ != NULL ? *cdisk_
                         : *::VidDisk::internal_default_instance();
}
::VidDisk* LinkAddDiskReq::mutable_cdisk() {
  
  if (cdisk_ == NULL) {
    cdisk_ = new ::VidDisk;
  }
  // @@protoc_insertion_point(field_mutable:LinkAddDiskReq.cDisk)
  return cdisk_;
}
::VidDisk* LinkAddDiskReq::release_cdisk() {
  // @@protoc_insertion_point(field_release:LinkAddDiskReq.cDisk)
  
  ::VidDisk* temp = cdisk_;
  cdisk_ = NULL;
  return temp;
}
void LinkAddDiskReq::set_allocated_cdisk(::VidDisk* cdisk) {
  delete cdisk_;
  cdisk_ = cdisk;
  if (cdisk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkAddDiskReq.cDisk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkAddDiskResp::kBSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkAddDiskResp::LinkAddDiskResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkAddDiskResp)
}
LinkAddDiskResp::LinkAddDiskResp(const LinkAddDiskResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bsuccess_ = from.bsuccess_;
  // @@protoc_insertion_point(copy_constructor:LinkAddDiskResp)
}

void LinkAddDiskResp::SharedCtor() {
  bsuccess_ = false;
  _cached_size_ = 0;
}

LinkAddDiskResp::~LinkAddDiskResp() {
  // @@protoc_insertion_point(destructor:LinkAddDiskResp)
  SharedDtor();
}

void LinkAddDiskResp::SharedDtor() {
}

void LinkAddDiskResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkAddDiskResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[13].descriptor;
}

const LinkAddDiskResp& LinkAddDiskResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkAddDiskResp* LinkAddDiskResp::New(::google::protobuf::Arena* arena) const {
  LinkAddDiskResp* n = new LinkAddDiskResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkAddDiskResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkAddDiskResp)
  bsuccess_ = false;
}

bool LinkAddDiskResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkAddDiskResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool bSuccess = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkAddDiskResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkAddDiskResp)
  return false;
#undef DO_
}

void LinkAddDiskResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkAddDiskResp)
  // bool bSuccess = 1;
  if (this->bsuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bsuccess(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkAddDiskResp)
}

::google::protobuf::uint8* LinkAddDiskResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkAddDiskResp)
  // bool bSuccess = 1;
  if (this->bsuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bsuccess(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkAddDiskResp)
  return target;
}

size_t LinkAddDiskResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkAddDiskResp)
  size_t total_size = 0;

  // bool bSuccess = 1;
  if (this->bsuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkAddDiskResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkAddDiskResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAddDiskResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkAddDiskResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkAddDiskResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkAddDiskResp)
    MergeFrom(*source);
  }
}

void LinkAddDiskResp::MergeFrom(const LinkAddDiskResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkAddDiskResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.bsuccess() != 0) {
    set_bsuccess(from.bsuccess());
  }
}

void LinkAddDiskResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkAddDiskResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAddDiskResp::CopyFrom(const LinkAddDiskResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkAddDiskResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAddDiskResp::IsInitialized() const {
  return true;
}

void LinkAddDiskResp::Swap(LinkAddDiskResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkAddDiskResp::InternalSwap(LinkAddDiskResp* other) {
  std::swap(bsuccess_, other->bsuccess_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkAddDiskResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkAddDiskResp

// bool bSuccess = 1;
void LinkAddDiskResp::clear_bsuccess() {
  bsuccess_ = false;
}
bool LinkAddDiskResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkAddDiskResp.bSuccess)
  return bsuccess_;
}
void LinkAddDiskResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkAddDiskResp.bSuccess)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkDelDiskReq::kStrIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkDelDiskReq::LinkDelDiskReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDelDiskReq)
}
LinkDelDiskReq::LinkDelDiskReq(const LinkDelDiskReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strid().size() > 0) {
    strid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  // @@protoc_insertion_point(copy_constructor:LinkDelDiskReq)
}

void LinkDelDiskReq::SharedCtor() {
  strid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LinkDelDiskReq::~LinkDelDiskReq() {
  // @@protoc_insertion_point(destructor:LinkDelDiskReq)
  SharedDtor();
}

void LinkDelDiskReq::SharedDtor() {
  strid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkDelDiskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkDelDiskReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[14].descriptor;
}

const LinkDelDiskReq& LinkDelDiskReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkDelDiskReq* LinkDelDiskReq::New(::google::protobuf::Arena* arena) const {
  LinkDelDiskReq* n = new LinkDelDiskReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkDelDiskReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkDelDiskReq)
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LinkDelDiskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDelDiskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strId = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strid().data(), this->strid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkDelDiskReq.strId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDelDiskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDelDiskReq)
  return false;
#undef DO_
}

void LinkDelDiskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDelDiskReq)
  // string strId = 1;
  if (this->strid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), this->strid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkDelDiskReq.strId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strid(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkDelDiskReq)
}

::google::protobuf::uint8* LinkDelDiskReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkDelDiskReq)
  // string strId = 1;
  if (this->strid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), this->strid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkDelDiskReq.strId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkDelDiskReq)
  return target;
}

size_t LinkDelDiskReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkDelDiskReq)
  size_t total_size = 0;

  // string strId = 1;
  if (this->strid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkDelDiskReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkDelDiskReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkDelDiskReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkDelDiskReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkDelDiskReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkDelDiskReq)
    MergeFrom(*source);
  }
}

void LinkDelDiskReq::MergeFrom(const LinkDelDiskReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkDelDiskReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strid().size() > 0) {

    strid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
}

void LinkDelDiskReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkDelDiskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkDelDiskReq::CopyFrom(const LinkDelDiskReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkDelDiskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkDelDiskReq::IsInitialized() const {
  return true;
}

void LinkDelDiskReq::Swap(LinkDelDiskReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkDelDiskReq::InternalSwap(LinkDelDiskReq* other) {
  strid_.Swap(&other->strid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkDelDiskReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkDelDiskReq

// string strId = 1;
void LinkDelDiskReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkDelDiskReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkDelDiskReq.strId)
  return strid_.GetNoArena();
}
void LinkDelDiskReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkDelDiskReq.strId)
}
#if LANG_CXX11
void LinkDelDiskReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkDelDiskReq.strId)
}
#endif
void LinkDelDiskReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkDelDiskReq.strId)
}
void LinkDelDiskReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkDelDiskReq.strId)
}
::std::string* LinkDelDiskReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkDelDiskReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkDelDiskReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkDelDiskReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkDelDiskReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkDelDiskReq.strId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkDelDiskResp::kBSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkDelDiskResp::LinkDelDiskResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkDelDiskResp)
}
LinkDelDiskResp::LinkDelDiskResp(const LinkDelDiskResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bsuccess_ = from.bsuccess_;
  // @@protoc_insertion_point(copy_constructor:LinkDelDiskResp)
}

void LinkDelDiskResp::SharedCtor() {
  bsuccess_ = false;
  _cached_size_ = 0;
}

LinkDelDiskResp::~LinkDelDiskResp() {
  // @@protoc_insertion_point(destructor:LinkDelDiskResp)
  SharedDtor();
}

void LinkDelDiskResp::SharedDtor() {
}

void LinkDelDiskResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkDelDiskResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[15].descriptor;
}

const LinkDelDiskResp& LinkDelDiskResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkDelDiskResp* LinkDelDiskResp::New(::google::protobuf::Arena* arena) const {
  LinkDelDiskResp* n = new LinkDelDiskResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkDelDiskResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkDelDiskResp)
  bsuccess_ = false;
}

bool LinkDelDiskResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkDelDiskResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool bSuccess = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkDelDiskResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkDelDiskResp)
  return false;
#undef DO_
}

void LinkDelDiskResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkDelDiskResp)
  // bool bSuccess = 1;
  if (this->bsuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bsuccess(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkDelDiskResp)
}

::google::protobuf::uint8* LinkDelDiskResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkDelDiskResp)
  // bool bSuccess = 1;
  if (this->bsuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bsuccess(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkDelDiskResp)
  return target;
}

size_t LinkDelDiskResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkDelDiskResp)
  size_t total_size = 0;

  // bool bSuccess = 1;
  if (this->bsuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkDelDiskResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkDelDiskResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkDelDiskResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkDelDiskResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkDelDiskResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkDelDiskResp)
    MergeFrom(*source);
  }
}

void LinkDelDiskResp::MergeFrom(const LinkDelDiskResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkDelDiskResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.bsuccess() != 0) {
    set_bsuccess(from.bsuccess());
  }
}

void LinkDelDiskResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkDelDiskResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkDelDiskResp::CopyFrom(const LinkDelDiskResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkDelDiskResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkDelDiskResp::IsInitialized() const {
  return true;
}

void LinkDelDiskResp::Swap(LinkDelDiskResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkDelDiskResp::InternalSwap(LinkDelDiskResp* other) {
  std::swap(bsuccess_, other->bsuccess_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkDelDiskResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkDelDiskResp

// bool bSuccess = 1;
void LinkDelDiskResp::clear_bsuccess() {
  bsuccess_ = false;
}
bool LinkDelDiskResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkDelDiskResp.bSuccess)
  return bsuccess_;
}
void LinkDelDiskResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkDelDiskResp.bSuccess)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkUpdateDiskLimitReq::kStrIdFieldNumber;
const int LinkUpdateDiskLimitReq::kNLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkUpdateDiskLimitReq::LinkUpdateDiskLimitReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkUpdateDiskLimitReq)
}
LinkUpdateDiskLimitReq::LinkUpdateDiskLimitReq(const LinkUpdateDiskLimitReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strid().size() > 0) {
    strid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  nlimit_ = from.nlimit_;
  // @@protoc_insertion_point(copy_constructor:LinkUpdateDiskLimitReq)
}

void LinkUpdateDiskLimitReq::SharedCtor() {
  strid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nlimit_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

LinkUpdateDiskLimitReq::~LinkUpdateDiskLimitReq() {
  // @@protoc_insertion_point(destructor:LinkUpdateDiskLimitReq)
  SharedDtor();
}

void LinkUpdateDiskLimitReq::SharedDtor() {
  strid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkUpdateDiskLimitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkUpdateDiskLimitReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[16].descriptor;
}

const LinkUpdateDiskLimitReq& LinkUpdateDiskLimitReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkUpdateDiskLimitReq* LinkUpdateDiskLimitReq::New(::google::protobuf::Arena* arena) const {
  LinkUpdateDiskLimitReq* n = new LinkUpdateDiskLimitReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkUpdateDiskLimitReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkUpdateDiskLimitReq)
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nlimit_ = GOOGLE_LONGLONG(0);
}

bool LinkUpdateDiskLimitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkUpdateDiskLimitReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strId = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strid().data(), this->strid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkUpdateDiskLimitReq.strId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nLimit = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkUpdateDiskLimitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkUpdateDiskLimitReq)
  return false;
#undef DO_
}

void LinkUpdateDiskLimitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkUpdateDiskLimitReq)
  // string strId = 1;
  if (this->strid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), this->strid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkUpdateDiskLimitReq.strId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strid(), output);
  }

  // int64 nLimit = 2;
  if (this->nlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nlimit(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkUpdateDiskLimitReq)
}

::google::protobuf::uint8* LinkUpdateDiskLimitReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkUpdateDiskLimitReq)
  // string strId = 1;
  if (this->strid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), this->strid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkUpdateDiskLimitReq.strId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strid(), target);
  }

  // int64 nLimit = 2;
  if (this->nlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nlimit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkUpdateDiskLimitReq)
  return target;
}

size_t LinkUpdateDiskLimitReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkUpdateDiskLimitReq)
  size_t total_size = 0;

  // string strId = 1;
  if (this->strid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strid());
  }

  // int64 nLimit = 2;
  if (this->nlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nlimit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkUpdateDiskLimitReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkUpdateDiskLimitReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkUpdateDiskLimitReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkUpdateDiskLimitReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkUpdateDiskLimitReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkUpdateDiskLimitReq)
    MergeFrom(*source);
  }
}

void LinkUpdateDiskLimitReq::MergeFrom(const LinkUpdateDiskLimitReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkUpdateDiskLimitReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strid().size() > 0) {

    strid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  if (from.nlimit() != 0) {
    set_nlimit(from.nlimit());
  }
}

void LinkUpdateDiskLimitReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkUpdateDiskLimitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkUpdateDiskLimitReq::CopyFrom(const LinkUpdateDiskLimitReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkUpdateDiskLimitReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkUpdateDiskLimitReq::IsInitialized() const {
  return true;
}

void LinkUpdateDiskLimitReq::Swap(LinkUpdateDiskLimitReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkUpdateDiskLimitReq::InternalSwap(LinkUpdateDiskLimitReq* other) {
  strid_.Swap(&other->strid_);
  std::swap(nlimit_, other->nlimit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkUpdateDiskLimitReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkUpdateDiskLimitReq

// string strId = 1;
void LinkUpdateDiskLimitReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkUpdateDiskLimitReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkUpdateDiskLimitReq.strId)
  return strid_.GetNoArena();
}
void LinkUpdateDiskLimitReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkUpdateDiskLimitReq.strId)
}
#if LANG_CXX11
void LinkUpdateDiskLimitReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkUpdateDiskLimitReq.strId)
}
#endif
void LinkUpdateDiskLimitReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkUpdateDiskLimitReq.strId)
}
void LinkUpdateDiskLimitReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkUpdateDiskLimitReq.strId)
}
::std::string* LinkUpdateDiskLimitReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkUpdateDiskLimitReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkUpdateDiskLimitReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkUpdateDiskLimitReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkUpdateDiskLimitReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkUpdateDiskLimitReq.strId)
}

// int64 nLimit = 2;
void LinkUpdateDiskLimitReq::clear_nlimit() {
  nlimit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LinkUpdateDiskLimitReq::nlimit() const {
  // @@protoc_insertion_point(field_get:LinkUpdateDiskLimitReq.nLimit)
  return nlimit_;
}
void LinkUpdateDiskLimitReq::set_nlimit(::google::protobuf::int64 value) {
  
  nlimit_ = value;
  // @@protoc_insertion_point(field_set:LinkUpdateDiskLimitReq.nLimit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkUpdateDiskLimitResp::kBSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkUpdateDiskLimitResp::LinkUpdateDiskLimitResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkUpdateDiskLimitResp)
}
LinkUpdateDiskLimitResp::LinkUpdateDiskLimitResp(const LinkUpdateDiskLimitResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bsuccess_ = from.bsuccess_;
  // @@protoc_insertion_point(copy_constructor:LinkUpdateDiskLimitResp)
}

void LinkUpdateDiskLimitResp::SharedCtor() {
  bsuccess_ = false;
  _cached_size_ = 0;
}

LinkUpdateDiskLimitResp::~LinkUpdateDiskLimitResp() {
  // @@protoc_insertion_point(destructor:LinkUpdateDiskLimitResp)
  SharedDtor();
}

void LinkUpdateDiskLimitResp::SharedDtor() {
}

void LinkUpdateDiskLimitResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkUpdateDiskLimitResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[17].descriptor;
}

const LinkUpdateDiskLimitResp& LinkUpdateDiskLimitResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkUpdateDiskLimitResp* LinkUpdateDiskLimitResp::New(::google::protobuf::Arena* arena) const {
  LinkUpdateDiskLimitResp* n = new LinkUpdateDiskLimitResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkUpdateDiskLimitResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkUpdateDiskLimitResp)
  bsuccess_ = false;
}

bool LinkUpdateDiskLimitResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkUpdateDiskLimitResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool bSuccess = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkUpdateDiskLimitResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkUpdateDiskLimitResp)
  return false;
#undef DO_
}

void LinkUpdateDiskLimitResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkUpdateDiskLimitResp)
  // bool bSuccess = 1;
  if (this->bsuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bsuccess(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkUpdateDiskLimitResp)
}

::google::protobuf::uint8* LinkUpdateDiskLimitResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkUpdateDiskLimitResp)
  // bool bSuccess = 1;
  if (this->bsuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bsuccess(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkUpdateDiskLimitResp)
  return target;
}

size_t LinkUpdateDiskLimitResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkUpdateDiskLimitResp)
  size_t total_size = 0;

  // bool bSuccess = 1;
  if (this->bsuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkUpdateDiskLimitResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkUpdateDiskLimitResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkUpdateDiskLimitResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkUpdateDiskLimitResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkUpdateDiskLimitResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkUpdateDiskLimitResp)
    MergeFrom(*source);
  }
}

void LinkUpdateDiskLimitResp::MergeFrom(const LinkUpdateDiskLimitResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkUpdateDiskLimitResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.bsuccess() != 0) {
    set_bsuccess(from.bsuccess());
  }
}

void LinkUpdateDiskLimitResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkUpdateDiskLimitResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkUpdateDiskLimitResp::CopyFrom(const LinkUpdateDiskLimitResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkUpdateDiskLimitResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkUpdateDiskLimitResp::IsInitialized() const {
  return true;
}

void LinkUpdateDiskLimitResp::Swap(LinkUpdateDiskLimitResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkUpdateDiskLimitResp::InternalSwap(LinkUpdateDiskLimitResp* other) {
  std::swap(bsuccess_, other->bsuccess_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkUpdateDiskLimitResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkUpdateDiskLimitResp

// bool bSuccess = 1;
void LinkUpdateDiskLimitResp::clear_bsuccess() {
  bsuccess_ = false;
}
bool LinkUpdateDiskLimitResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkUpdateDiskLimitResp.bSuccess)
  return bsuccess_;
}
void LinkUpdateDiskLimitResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkUpdateDiskLimitResp.bSuccess)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkGetLicReq::kStrFakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkGetLicReq::LinkGetLicReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkGetLicReq)
}
LinkGetLicReq::LinkGetLicReq(const LinkGetLicReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strfake_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strfake().size() > 0) {
    strfake_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strfake_);
  }
  // @@protoc_insertion_point(copy_constructor:LinkGetLicReq)
}

void LinkGetLicReq::SharedCtor() {
  strfake_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LinkGetLicReq::~LinkGetLicReq() {
  // @@protoc_insertion_point(destructor:LinkGetLicReq)
  SharedDtor();
}

void LinkGetLicReq::SharedDtor() {
  strfake_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkGetLicReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkGetLicReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[18].descriptor;
}

const LinkGetLicReq& LinkGetLicReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkGetLicReq* LinkGetLicReq::New(::google::protobuf::Arena* arena) const {
  LinkGetLicReq* n = new LinkGetLicReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkGetLicReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkGetLicReq)
  strfake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LinkGetLicReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkGetLicReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strFake = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfake()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strfake().data(), this->strfake().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkGetLicReq.strFake"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkGetLicReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkGetLicReq)
  return false;
#undef DO_
}

void LinkGetLicReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkGetLicReq)
  // string strFake = 1;
  if (this->strfake().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strfake().data(), this->strfake().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicReq.strFake");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strfake(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkGetLicReq)
}

::google::protobuf::uint8* LinkGetLicReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkGetLicReq)
  // string strFake = 1;
  if (this->strfake().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strfake().data(), this->strfake().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicReq.strFake");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strfake(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkGetLicReq)
  return target;
}

size_t LinkGetLicReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkGetLicReq)
  size_t total_size = 0;

  // string strFake = 1;
  if (this->strfake().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strfake());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkGetLicReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkGetLicReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkGetLicReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkGetLicReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkGetLicReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkGetLicReq)
    MergeFrom(*source);
  }
}

void LinkGetLicReq::MergeFrom(const LinkGetLicReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkGetLicReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strfake().size() > 0) {

    strfake_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strfake_);
  }
}

void LinkGetLicReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkGetLicReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkGetLicReq::CopyFrom(const LinkGetLicReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkGetLicReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkGetLicReq::IsInitialized() const {
  return true;
}

void LinkGetLicReq::Swap(LinkGetLicReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkGetLicReq::InternalSwap(LinkGetLicReq* other) {
  strfake_.Swap(&other->strfake_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkGetLicReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkGetLicReq

// string strFake = 1;
void LinkGetLicReq::clear_strfake() {
  strfake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkGetLicReq::strfake() const {
  // @@protoc_insertion_point(field_get:LinkGetLicReq.strFake)
  return strfake_.GetNoArena();
}
void LinkGetLicReq::set_strfake(const ::std::string& value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicReq.strFake)
}
#if LANG_CXX11
void LinkGetLicReq::set_strfake(::std::string&& value) {
  
  strfake_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicReq.strFake)
}
#endif
void LinkGetLicReq::set_strfake(const char* value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicReq.strFake)
}
void LinkGetLicReq::set_strfake(const char* value, size_t size) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicReq.strFake)
}
::std::string* LinkGetLicReq::mutable_strfake() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicReq.strFake)
  return strfake_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkGetLicReq::release_strfake() {
  // @@protoc_insertion_point(field_release:LinkGetLicReq.strFake)
  
  return strfake_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkGetLicReq::set_allocated_strfake(::std::string* strfake) {
  if (strfake != NULL) {
    
  } else {
    
  }
  strfake_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfake);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicReq.strFake)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkGetLicResp::kStrLicFieldNumber;
const int LinkGetLicResp::kStrHostIdFieldNumber;
const int LinkGetLicResp::kNChFieldNumber;
const int LinkGetLicResp::kStrTypeFieldNumber;
const int LinkGetLicResp::kStrStartTimeFieldNumber;
const int LinkGetLicResp::kStrExpireTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkGetLicResp::LinkGetLicResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkGetLicResp)
}
LinkGetLicResp::LinkGetLicResp(const LinkGetLicResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strlic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strlic().size() > 0) {
    strlic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strlic_);
  }
  strhostid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strhostid().size() > 0) {
    strhostid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strhostid_);
  }
  strtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strtype().size() > 0) {
    strtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtype_);
  }
  strstarttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strstarttime().size() > 0) {
    strstarttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strstarttime_);
  }
  strexpiretime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strexpiretime().size() > 0) {
    strexpiretime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strexpiretime_);
  }
  nch_ = from.nch_;
  // @@protoc_insertion_point(copy_constructor:LinkGetLicResp)
}

void LinkGetLicResp::SharedCtor() {
  strlic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strhostid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strstarttime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strexpiretime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nch_ = 0;
  _cached_size_ = 0;
}

LinkGetLicResp::~LinkGetLicResp() {
  // @@protoc_insertion_point(destructor:LinkGetLicResp)
  SharedDtor();
}

void LinkGetLicResp::SharedDtor() {
  strlic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strhostid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strstarttime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strexpiretime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkGetLicResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkGetLicResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[19].descriptor;
}

const LinkGetLicResp& LinkGetLicResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkGetLicResp* LinkGetLicResp::New(::google::protobuf::Arena* arena) const {
  LinkGetLicResp* n = new LinkGetLicResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkGetLicResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkGetLicResp)
  strlic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strhostid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strstarttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strexpiretime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nch_ = 0;
}

bool LinkGetLicResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkGetLicResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strLic = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strlic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strlic().data(), this->strlic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkGetLicResp.strLic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strHostId = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strhostid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strhostid().data(), this->strhostid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkGetLicResp.strHostId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nCh = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strType = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strtype().data(), this->strtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkGetLicResp.strType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strStartTime = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strstarttime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strstarttime().data(), this->strstarttime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkGetLicResp.strStartTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strExpireTime = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strexpiretime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strexpiretime().data(), this->strexpiretime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkGetLicResp.strExpireTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkGetLicResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkGetLicResp)
  return false;
#undef DO_
}

void LinkGetLicResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkGetLicResp)
  // string strLic = 1;
  if (this->strlic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strlic().data(), this->strlic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strLic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strlic(), output);
  }

  // string strHostId = 2;
  if (this->strhostid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strhostid().data(), this->strhostid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strHostId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strhostid(), output);
  }

  // int32 nCh = 3;
  if (this->nch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nch(), output);
  }

  // string strType = 4;
  if (this->strtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtype().data(), this->strtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->strtype(), output);
  }

  // string strStartTime = 5;
  if (this->strstarttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strstarttime().data(), this->strstarttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strStartTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->strstarttime(), output);
  }

  // string strExpireTime = 6;
  if (this->strexpiretime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strexpiretime().data(), this->strexpiretime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strExpireTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->strexpiretime(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkGetLicResp)
}

::google::protobuf::uint8* LinkGetLicResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkGetLicResp)
  // string strLic = 1;
  if (this->strlic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strlic().data(), this->strlic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strLic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strlic(), target);
  }

  // string strHostId = 2;
  if (this->strhostid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strhostid().data(), this->strhostid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strHostId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strhostid(), target);
  }

  // int32 nCh = 3;
  if (this->nch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nch(), target);
  }

  // string strType = 4;
  if (this->strtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtype().data(), this->strtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strtype(), target);
  }

  // string strStartTime = 5;
  if (this->strstarttime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strstarttime().data(), this->strstarttime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strStartTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strstarttime(), target);
  }

  // string strExpireTime = 6;
  if (this->strexpiretime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strexpiretime().data(), this->strexpiretime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetLicResp.strExpireTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strexpiretime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkGetLicResp)
  return target;
}

size_t LinkGetLicResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkGetLicResp)
  size_t total_size = 0;

  // string strLic = 1;
  if (this->strlic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strlic());
  }

  // string strHostId = 2;
  if (this->strhostid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strhostid());
  }

  // string strType = 4;
  if (this->strtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strtype());
  }

  // string strStartTime = 5;
  if (this->strstarttime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strstarttime());
  }

  // string strExpireTime = 6;
  if (this->strexpiretime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strexpiretime());
  }

  // int32 nCh = 3;
  if (this->nch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkGetLicResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkGetLicResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkGetLicResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkGetLicResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkGetLicResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkGetLicResp)
    MergeFrom(*source);
  }
}

void LinkGetLicResp::MergeFrom(const LinkGetLicResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkGetLicResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strlic().size() > 0) {

    strlic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strlic_);
  }
  if (from.strhostid().size() > 0) {

    strhostid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strhostid_);
  }
  if (from.strtype().size() > 0) {

    strtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtype_);
  }
  if (from.strstarttime().size() > 0) {

    strstarttime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strstarttime_);
  }
  if (from.strexpiretime().size() > 0) {

    strexpiretime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strexpiretime_);
  }
  if (from.nch() != 0) {
    set_nch(from.nch());
  }
}

void LinkGetLicResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkGetLicResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkGetLicResp::CopyFrom(const LinkGetLicResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkGetLicResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkGetLicResp::IsInitialized() const {
  return true;
}

void LinkGetLicResp::Swap(LinkGetLicResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkGetLicResp::InternalSwap(LinkGetLicResp* other) {
  strlic_.Swap(&other->strlic_);
  strhostid_.Swap(&other->strhostid_);
  strtype_.Swap(&other->strtype_);
  strstarttime_.Swap(&other->strstarttime_);
  strexpiretime_.Swap(&other->strexpiretime_);
  std::swap(nch_, other->nch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkGetLicResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkGetLicResp

// string strLic = 1;
void LinkGetLicResp::clear_strlic() {
  strlic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkGetLicResp::strlic() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strLic)
  return strlic_.GetNoArena();
}
void LinkGetLicResp::set_strlic(const ::std::string& value) {
  
  strlic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strLic)
}
#if LANG_CXX11
void LinkGetLicResp::set_strlic(::std::string&& value) {
  
  strlic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strLic)
}
#endif
void LinkGetLicResp::set_strlic(const char* value) {
  
  strlic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strLic)
}
void LinkGetLicResp::set_strlic(const char* value, size_t size) {
  
  strlic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strLic)
}
::std::string* LinkGetLicResp::mutable_strlic() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strLic)
  return strlic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkGetLicResp::release_strlic() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strLic)
  
  return strlic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkGetLicResp::set_allocated_strlic(::std::string* strlic) {
  if (strlic != NULL) {
    
  } else {
    
  }
  strlic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strlic);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strLic)
}

// string strHostId = 2;
void LinkGetLicResp::clear_strhostid() {
  strhostid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkGetLicResp::strhostid() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strHostId)
  return strhostid_.GetNoArena();
}
void LinkGetLicResp::set_strhostid(const ::std::string& value) {
  
  strhostid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strHostId)
}
#if LANG_CXX11
void LinkGetLicResp::set_strhostid(::std::string&& value) {
  
  strhostid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strHostId)
}
#endif
void LinkGetLicResp::set_strhostid(const char* value) {
  
  strhostid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strHostId)
}
void LinkGetLicResp::set_strhostid(const char* value, size_t size) {
  
  strhostid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strHostId)
}
::std::string* LinkGetLicResp::mutable_strhostid() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strHostId)
  return strhostid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkGetLicResp::release_strhostid() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strHostId)
  
  return strhostid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkGetLicResp::set_allocated_strhostid(::std::string* strhostid) {
  if (strhostid != NULL) {
    
  } else {
    
  }
  strhostid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strhostid);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strHostId)
}

// int32 nCh = 3;
void LinkGetLicResp::clear_nch() {
  nch_ = 0;
}
::google::protobuf::int32 LinkGetLicResp::nch() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.nCh)
  return nch_;
}
void LinkGetLicResp::set_nch(::google::protobuf::int32 value) {
  
  nch_ = value;
  // @@protoc_insertion_point(field_set:LinkGetLicResp.nCh)
}

// string strType = 4;
void LinkGetLicResp::clear_strtype() {
  strtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkGetLicResp::strtype() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strType)
  return strtype_.GetNoArena();
}
void LinkGetLicResp::set_strtype(const ::std::string& value) {
  
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strType)
}
#if LANG_CXX11
void LinkGetLicResp::set_strtype(::std::string&& value) {
  
  strtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strType)
}
#endif
void LinkGetLicResp::set_strtype(const char* value) {
  
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strType)
}
void LinkGetLicResp::set_strtype(const char* value, size_t size) {
  
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strType)
}
::std::string* LinkGetLicResp::mutable_strtype() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strType)
  return strtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkGetLicResp::release_strtype() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strType)
  
  return strtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkGetLicResp::set_allocated_strtype(::std::string* strtype) {
  if (strtype != NULL) {
    
  } else {
    
  }
  strtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtype);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strType)
}

// string strStartTime = 5;
void LinkGetLicResp::clear_strstarttime() {
  strstarttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkGetLicResp::strstarttime() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strStartTime)
  return strstarttime_.GetNoArena();
}
void LinkGetLicResp::set_strstarttime(const ::std::string& value) {
  
  strstarttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strStartTime)
}
#if LANG_CXX11
void LinkGetLicResp::set_strstarttime(::std::string&& value) {
  
  strstarttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strStartTime)
}
#endif
void LinkGetLicResp::set_strstarttime(const char* value) {
  
  strstarttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strStartTime)
}
void LinkGetLicResp::set_strstarttime(const char* value, size_t size) {
  
  strstarttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strStartTime)
}
::std::string* LinkGetLicResp::mutable_strstarttime() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strStartTime)
  return strstarttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkGetLicResp::release_strstarttime() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strStartTime)
  
  return strstarttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkGetLicResp::set_allocated_strstarttime(::std::string* strstarttime) {
  if (strstarttime != NULL) {
    
  } else {
    
  }
  strstarttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strstarttime);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strStartTime)
}

// string strExpireTime = 6;
void LinkGetLicResp::clear_strexpiretime() {
  strexpiretime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkGetLicResp::strexpiretime() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strExpireTime)
  return strexpiretime_.GetNoArena();
}
void LinkGetLicResp::set_strexpiretime(const ::std::string& value) {
  
  strexpiretime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strExpireTime)
}
#if LANG_CXX11
void LinkGetLicResp::set_strexpiretime(::std::string&& value) {
  
  strexpiretime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strExpireTime)
}
#endif
void LinkGetLicResp::set_strexpiretime(const char* value) {
  
  strexpiretime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strExpireTime)
}
void LinkGetLicResp::set_strexpiretime(const char* value, size_t size) {
  
  strexpiretime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strExpireTime)
}
::std::string* LinkGetLicResp::mutable_strexpiretime() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strExpireTime)
  return strexpiretime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkGetLicResp::release_strexpiretime() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strExpireTime)
  
  return strexpiretime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkGetLicResp::set_allocated_strexpiretime(::std::string* strexpiretime) {
  if (strexpiretime != NULL) {
    
  } else {
    
  }
  strexpiretime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strexpiretime);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strExpireTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkGetVerReq::kStrFakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkGetVerReq::LinkGetVerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkGetVerReq)
}
LinkGetVerReq::LinkGetVerReq(const LinkGetVerReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strfake_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strfake().size() > 0) {
    strfake_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strfake_);
  }
  // @@protoc_insertion_point(copy_constructor:LinkGetVerReq)
}

void LinkGetVerReq::SharedCtor() {
  strfake_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LinkGetVerReq::~LinkGetVerReq() {
  // @@protoc_insertion_point(destructor:LinkGetVerReq)
  SharedDtor();
}

void LinkGetVerReq::SharedDtor() {
  strfake_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkGetVerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkGetVerReq::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[20].descriptor;
}

const LinkGetVerReq& LinkGetVerReq::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkGetVerReq* LinkGetVerReq::New(::google::protobuf::Arena* arena) const {
  LinkGetVerReq* n = new LinkGetVerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkGetVerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkGetVerReq)
  strfake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LinkGetVerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkGetVerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strFake = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfake()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strfake().data(), this->strfake().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkGetVerReq.strFake"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkGetVerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkGetVerReq)
  return false;
#undef DO_
}

void LinkGetVerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkGetVerReq)
  // string strFake = 1;
  if (this->strfake().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strfake().data(), this->strfake().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetVerReq.strFake");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strfake(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkGetVerReq)
}

::google::protobuf::uint8* LinkGetVerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkGetVerReq)
  // string strFake = 1;
  if (this->strfake().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strfake().data(), this->strfake().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetVerReq.strFake");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strfake(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkGetVerReq)
  return target;
}

size_t LinkGetVerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkGetVerReq)
  size_t total_size = 0;

  // string strFake = 1;
  if (this->strfake().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strfake());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkGetVerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkGetVerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkGetVerReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkGetVerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkGetVerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkGetVerReq)
    MergeFrom(*source);
  }
}

void LinkGetVerReq::MergeFrom(const LinkGetVerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkGetVerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strfake().size() > 0) {

    strfake_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strfake_);
  }
}

void LinkGetVerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkGetVerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkGetVerReq::CopyFrom(const LinkGetVerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkGetVerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkGetVerReq::IsInitialized() const {
  return true;
}

void LinkGetVerReq::Swap(LinkGetVerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkGetVerReq::InternalSwap(LinkGetVerReq* other) {
  strfake_.Swap(&other->strfake_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkGetVerReq::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkGetVerReq

// string strFake = 1;
void LinkGetVerReq::clear_strfake() {
  strfake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkGetVerReq::strfake() const {
  // @@protoc_insertion_point(field_get:LinkGetVerReq.strFake)
  return strfake_.GetNoArena();
}
void LinkGetVerReq::set_strfake(const ::std::string& value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetVerReq.strFake)
}
#if LANG_CXX11
void LinkGetVerReq::set_strfake(::std::string&& value) {
  
  strfake_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetVerReq.strFake)
}
#endif
void LinkGetVerReq::set_strfake(const char* value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetVerReq.strFake)
}
void LinkGetVerReq::set_strfake(const char* value, size_t size) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetVerReq.strFake)
}
::std::string* LinkGetVerReq::mutable_strfake() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetVerReq.strFake)
  return strfake_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkGetVerReq::release_strfake() {
  // @@protoc_insertion_point(field_release:LinkGetVerReq.strFake)
  
  return strfake_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkGetVerReq::set_allocated_strfake(::std::string* strfake) {
  if (strfake != NULL) {
    
  } else {
    
  }
  strfake_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfake);
  // @@protoc_insertion_point(field_set_allocated:LinkGetVerReq.strFake)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkGetVerResp::kStrVerFieldNumber;
const int LinkGetVerResp::kStrInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkGetVerResp::LinkGetVerResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linksystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkGetVerResp)
}
LinkGetVerResp::LinkGetVerResp(const LinkGetVerResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strver().size() > 0) {
    strver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strver_);
  }
  strinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strinfo().size() > 0) {
    strinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:LinkGetVerResp)
}

void LinkGetVerResp::SharedCtor() {
  strver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LinkGetVerResp::~LinkGetVerResp() {
  // @@protoc_insertion_point(destructor:LinkGetVerResp)
  SharedDtor();
}

void LinkGetVerResp::SharedDtor() {
  strver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinkGetVerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkGetVerResp::descriptor() {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[21].descriptor;
}

const LinkGetVerResp& LinkGetVerResp::default_instance() {
  protobuf_linksystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkGetVerResp* LinkGetVerResp::New(::google::protobuf::Arena* arena) const {
  LinkGetVerResp* n = new LinkGetVerResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkGetVerResp::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkGetVerResp)
  strver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LinkGetVerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkGetVerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strVer = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strver().data(), this->strver().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkGetVerResp.strVer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strInfo = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strinfo().data(), this->strinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LinkGetVerResp.strInfo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkGetVerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkGetVerResp)
  return false;
#undef DO_
}

void LinkGetVerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkGetVerResp)
  // string strVer = 1;
  if (this->strver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strver().data(), this->strver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetVerResp.strVer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strver(), output);
  }

  // string strInfo = 2;
  if (this->strinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strinfo().data(), this->strinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetVerResp.strInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strinfo(), output);
  }

  // @@protoc_insertion_point(serialize_end:LinkGetVerResp)
}

::google::protobuf::uint8* LinkGetVerResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkGetVerResp)
  // string strVer = 1;
  if (this->strver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strver().data(), this->strver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetVerResp.strVer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strver(), target);
  }

  // string strInfo = 2;
  if (this->strinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strinfo().data(), this->strinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LinkGetVerResp.strInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strinfo(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkGetVerResp)
  return target;
}

size_t LinkGetVerResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkGetVerResp)
  size_t total_size = 0;

  // string strVer = 1;
  if (this->strver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strver());
  }

  // string strInfo = 2;
  if (this->strinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strinfo());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkGetVerResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkGetVerResp)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkGetVerResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkGetVerResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkGetVerResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkGetVerResp)
    MergeFrom(*source);
  }
}

void LinkGetVerResp::MergeFrom(const LinkGetVerResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkGetVerResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strver().size() > 0) {

    strver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strver_);
  }
  if (from.strinfo().size() > 0) {

    strinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strinfo_);
  }
}

void LinkGetVerResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkGetVerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkGetVerResp::CopyFrom(const LinkGetVerResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkGetVerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkGetVerResp::IsInitialized() const {
  return true;
}

void LinkGetVerResp::Swap(LinkGetVerResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkGetVerResp::InternalSwap(LinkGetVerResp* other) {
  strver_.Swap(&other->strver_);
  strinfo_.Swap(&other->strinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkGetVerResp::GetMetadata() const {
  protobuf_linksystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linksystem_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkGetVerResp

// string strVer = 1;
void LinkGetVerResp::clear_strver() {
  strver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkGetVerResp::strver() const {
  // @@protoc_insertion_point(field_get:LinkGetVerResp.strVer)
  return strver_.GetNoArena();
}
void LinkGetVerResp::set_strver(const ::std::string& value) {
  
  strver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetVerResp.strVer)
}
#if LANG_CXX11
void LinkGetVerResp::set_strver(::std::string&& value) {
  
  strver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetVerResp.strVer)
}
#endif
void LinkGetVerResp::set_strver(const char* value) {
  
  strver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetVerResp.strVer)
}
void LinkGetVerResp::set_strver(const char* value, size_t size) {
  
  strver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetVerResp.strVer)
}
::std::string* LinkGetVerResp::mutable_strver() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetVerResp.strVer)
  return strver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkGetVerResp::release_strver() {
  // @@protoc_insertion_point(field_release:LinkGetVerResp.strVer)
  
  return strver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkGetVerResp::set_allocated_strver(::std::string* strver) {
  if (strver != NULL) {
    
  } else {
    
  }
  strver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strver);
  // @@protoc_insertion_point(field_set_allocated:LinkGetVerResp.strVer)
}

// string strInfo = 2;
void LinkGetVerResp::clear_strinfo() {
  strinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LinkGetVerResp::strinfo() const {
  // @@protoc_insertion_point(field_get:LinkGetVerResp.strInfo)
  return strinfo_.GetNoArena();
}
void LinkGetVerResp::set_strinfo(const ::std::string& value) {
  
  strinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetVerResp.strInfo)
}
#if LANG_CXX11
void LinkGetVerResp::set_strinfo(::std::string&& value) {
  
  strinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetVerResp.strInfo)
}
#endif
void LinkGetVerResp::set_strinfo(const char* value) {
  
  strinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetVerResp.strInfo)
}
void LinkGetVerResp::set_strinfo(const char* value, size_t size) {
  
  strinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetVerResp.strInfo)
}
::std::string* LinkGetVerResp::mutable_strinfo() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetVerResp.strInfo)
  return strinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LinkGetVerResp::release_strinfo() {
  // @@protoc_insertion_point(field_release:LinkGetVerResp.strInfo)
  
  return strinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LinkGetVerResp::set_allocated_strinfo(::std::string* strinfo) {
  if (strinfo != NULL) {
    
  } else {
    
  }
  strinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strinfo);
  // @@protoc_insertion_point(field_set_allocated:LinkGetVerResp.strInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
