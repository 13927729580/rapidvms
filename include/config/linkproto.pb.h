// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linkproto.proto

#ifndef PROTOBUF_linkproto_2eproto__INCLUDED
#define PROTOBUF_linkproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "linksystem.pb.h"
// @@protoc_insertion_point(includes)
class LinkAddDiskReq;
class LinkAddDiskReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddDiskReqDefaultTypeInternal _LinkAddDiskReq_default_instance_;
class LinkAddDiskResp;
class LinkAddDiskRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddDiskRespDefaultTypeInternal _LinkAddDiskResp_default_instance_;
class LinkCamReq;
class LinkCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamReqDefaultTypeInternal _LinkCamReq_default_instance_;
class LinkCamResp;
class LinkCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamRespDefaultTypeInternal _LinkCamResp_default_instance_;
class LinkDelDiskReq;
class LinkDelDiskReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelDiskReqDefaultTypeInternal _LinkDelDiskReq_default_instance_;
class LinkDelDiskResp;
class LinkDelDiskRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelDiskRespDefaultTypeInternal _LinkDelDiskResp_default_instance_;
class LinkGetLicReq;
class LinkGetLicReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetLicReqDefaultTypeInternal _LinkGetLicReq_default_instance_;
class LinkGetLicResp;
class LinkGetLicRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetLicRespDefaultTypeInternal _LinkGetLicResp_default_instance_;
class LinkGetVerReq;
class LinkGetVerReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetVerReqDefaultTypeInternal _LinkGetVerReq_default_instance_;
class LinkGetVerResp;
class LinkGetVerRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetVerRespDefaultTypeInternal _LinkGetVerResp_default_instance_;
class LinkKeepaliveReq;
class LinkKeepaliveReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkKeepaliveReqDefaultTypeInternal _LinkKeepaliveReq_default_instance_;
class LinkKeepaliveResp;
class LinkKeepaliveRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkKeepaliveRespDefaultTypeInternal _LinkKeepaliveResp_default_instance_;
class LinkListCamReq;
class LinkListCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkListCamReqDefaultTypeInternal _LinkListCamReq_default_instance_;
class LinkListCamResp;
class LinkListCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkListCamRespDefaultTypeInternal _LinkListCamResp_default_instance_;
class LinkLoginReq;
class LinkLoginReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkLoginReqDefaultTypeInternal _LinkLoginReq_default_instance_;
class LinkLoginResp;
class LinkLoginRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkLoginRespDefaultTypeInternal _LinkLoginResp_default_instance_;
class LinkSysVidDiskListReq;
class LinkSysVidDiskListReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkSysVidDiskListReqDefaultTypeInternal _LinkSysVidDiskListReq_default_instance_;
class LinkSysVidDiskListResp;
class LinkSysVidDiskListRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkSysVidDiskListRespDefaultTypeInternal _LinkSysVidDiskListResp_default_instance_;
class LinkUpdateDiskLimitReq;
class LinkUpdateDiskLimitReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkUpdateDiskLimitReqDefaultTypeInternal _LinkUpdateDiskLimitReq_default_instance_;
class LinkUpdateDiskLimitResp;
class LinkUpdateDiskLimitRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkUpdateDiskLimitRespDefaultTypeInternal _LinkUpdateDiskLimitResp_default_instance_;
class LinkVidDiskListReq;
class LinkVidDiskListReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkVidDiskListReqDefaultTypeInternal _LinkVidDiskListReq_default_instance_;
class LinkVidDiskListResp;
class LinkVidDiskListRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkVidDiskListRespDefaultTypeInternal _LinkVidDiskListResp_default_instance_;
namespace Link {
class LinkCmd;
class LinkCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkCmdDefaultTypeInternal _LinkCmd_default_instance_;
}  // namespace Link

namespace Link {

namespace protobuf_linkproto_2eproto {
// Internal implementation detail -- do not call these.
struct VE_LIBRARY_API TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void VE_LIBRARY_API AddDescriptors();
void VE_LIBRARY_API InitDefaults();
}  // namespace protobuf_linkproto_2eproto

enum LinkCmdType {
  LINK_CMD_ZERO = 0,
  LINK_CMD_LOGIN_REQ = 1,
  LINK_CMD_LOGIN_RESP = 2,
  LINK_CMD_KEEPALIVE_REQ = 3,
  LINK_CMD_KEEPALIVE_RESP = 4,
  LINK_CMD_CAM_LIST_REQ = 5,
  LINK_CMD_CAM_LIST_RESP = 6,
  LINK_CMD_CAM_REQ = 7,
  LINK_CMD_CAM_RESP = 8,
  LINK_CMD_DISK_LIST_REQ = 9,
  LINK_CMD_DISK_LIST_RESP = 10,
  LINK_CMD_SYS_DISK_LIST_REQ = 11,
  LINK_CMD_SYS_DISK_LIST_RESP = 12,
  LINK_CMD_ADD_DISK_REQ = 13,
  LINK_CMD_ADD_DISK_RESP = 14,
  LINK_CMD_DEL_DISK_REQ = 15,
  LINK_CMD_DEL_DISK_RESP = 16,
  LINK_CMD_UPDATE_DISK_LIMIT_REQ = 17,
  LINK_CMD_UPDATE_DISK_LIMIT_RESP = 18,
  LINK_CMD_GET_LIC_REQ = 19,
  LINK_CMD_GET_LIC_RESP = 20,
  LINK_CMD_GET_VER_REQ = 21,
  LINK_CMD_GET_VER_RESP = 22,
  LinkCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinkCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
VE_LIBRARY_API bool LinkCmdType_IsValid(int value);
const LinkCmdType LinkCmdType_MIN = LINK_CMD_ZERO;
const LinkCmdType LinkCmdType_MAX = LINK_CMD_GET_VER_RESP;
const int LinkCmdType_ARRAYSIZE = LinkCmdType_MAX + 1;

VE_LIBRARY_API const ::google::protobuf::EnumDescriptor* LinkCmdType_descriptor();
inline const ::std::string& LinkCmdType_Name(LinkCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinkCmdType_descriptor(), value);
}
inline bool LinkCmdType_Parse(
    const ::std::string& name, LinkCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinkCmdType>(
    LinkCmdType_descriptor(), name, value);
}
// ===================================================================

class VE_LIBRARY_API LinkCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Link.LinkCmd) */ {
 public:
  LinkCmd();
  virtual ~LinkCmd();

  LinkCmd(const LinkCmd& from);

  inline LinkCmd& operator=(const LinkCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCmd& default_instance();

  enum CmdCase {
    kLoginReq = 2,
    kLoginResp = 3,
    kKeepaliveReq = 4,
    kKeepaliveResp = 5,
    kCamListReq = 6,
    kCamListResp = 7,
    kCamReq = 8,
    kCamResp = 9,
    kDiskListReq = 10,
    kDiskListResp = 11,
    kSysDiskListReq = 12,
    kSysDiskListResp = 13,
    kAddDiskReq = 14,
    kAddDiskResp = 15,
    kDelDiskReq = 16,
    kDelDiskResp = 17,
    kDiskLimitReq = 18,
    kDiskLimitResp = 19,
    kLicReq = 20,
    kLicResp = 21,
    kVerReq = 22,
    kVerResp = 23,
    CMD_NOT_SET = 0,
  };

  static inline const LinkCmd* internal_default_instance() {
    return reinterpret_cast<const LinkCmd*>(
               &_LinkCmd_default_instance_);
  }

  void Swap(LinkCmd* other);

  // implements Message ----------------------------------------------

  inline LinkCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCmd& from);
  void MergeFrom(const LinkCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Link.LinkCmdType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Link::LinkCmdType type() const;
  void set_type(::Link::LinkCmdType value);

  // .LinkLoginReq loginReq = 2;
  bool has_loginreq() const;
  void clear_loginreq();
  static const int kLoginReqFieldNumber = 2;
  const ::LinkLoginReq& loginreq() const;
  ::LinkLoginReq* mutable_loginreq();
  ::LinkLoginReq* release_loginreq();
  void set_allocated_loginreq(::LinkLoginReq* loginreq);

  // .LinkLoginResp loginResp = 3;
  bool has_loginresp() const;
  void clear_loginresp();
  static const int kLoginRespFieldNumber = 3;
  const ::LinkLoginResp& loginresp() const;
  ::LinkLoginResp* mutable_loginresp();
  ::LinkLoginResp* release_loginresp();
  void set_allocated_loginresp(::LinkLoginResp* loginresp);

  // .LinkKeepaliveReq keepaliveReq = 4;
  bool has_keepalivereq() const;
  void clear_keepalivereq();
  static const int kKeepaliveReqFieldNumber = 4;
  const ::LinkKeepaliveReq& keepalivereq() const;
  ::LinkKeepaliveReq* mutable_keepalivereq();
  ::LinkKeepaliveReq* release_keepalivereq();
  void set_allocated_keepalivereq(::LinkKeepaliveReq* keepalivereq);

  // .LinkKeepaliveResp keepaliveResp = 5;
  bool has_keepaliveresp() const;
  void clear_keepaliveresp();
  static const int kKeepaliveRespFieldNumber = 5;
  const ::LinkKeepaliveResp& keepaliveresp() const;
  ::LinkKeepaliveResp* mutable_keepaliveresp();
  ::LinkKeepaliveResp* release_keepaliveresp();
  void set_allocated_keepaliveresp(::LinkKeepaliveResp* keepaliveresp);

  // .LinkListCamReq camListReq = 6;
  bool has_camlistreq() const;
  void clear_camlistreq();
  static const int kCamListReqFieldNumber = 6;
  const ::LinkListCamReq& camlistreq() const;
  ::LinkListCamReq* mutable_camlistreq();
  ::LinkListCamReq* release_camlistreq();
  void set_allocated_camlistreq(::LinkListCamReq* camlistreq);

  // .LinkListCamResp camListResp = 7;
  bool has_camlistresp() const;
  void clear_camlistresp();
  static const int kCamListRespFieldNumber = 7;
  const ::LinkListCamResp& camlistresp() const;
  ::LinkListCamResp* mutable_camlistresp();
  ::LinkListCamResp* release_camlistresp();
  void set_allocated_camlistresp(::LinkListCamResp* camlistresp);

  // .LinkCamReq camReq = 8;
  bool has_camreq() const;
  void clear_camreq();
  static const int kCamReqFieldNumber = 8;
  const ::LinkCamReq& camreq() const;
  ::LinkCamReq* mutable_camreq();
  ::LinkCamReq* release_camreq();
  void set_allocated_camreq(::LinkCamReq* camreq);

  // .LinkCamResp camResp = 9;
  bool has_camresp() const;
  void clear_camresp();
  static const int kCamRespFieldNumber = 9;
  const ::LinkCamResp& camresp() const;
  ::LinkCamResp* mutable_camresp();
  ::LinkCamResp* release_camresp();
  void set_allocated_camresp(::LinkCamResp* camresp);

  // .LinkVidDiskListReq diskListReq = 10;
  bool has_disklistreq() const;
  void clear_disklistreq();
  static const int kDiskListReqFieldNumber = 10;
  const ::LinkVidDiskListReq& disklistreq() const;
  ::LinkVidDiskListReq* mutable_disklistreq();
  ::LinkVidDiskListReq* release_disklistreq();
  void set_allocated_disklistreq(::LinkVidDiskListReq* disklistreq);

  // .LinkVidDiskListResp diskListResp = 11;
  bool has_disklistresp() const;
  void clear_disklistresp();
  static const int kDiskListRespFieldNumber = 11;
  const ::LinkVidDiskListResp& disklistresp() const;
  ::LinkVidDiskListResp* mutable_disklistresp();
  ::LinkVidDiskListResp* release_disklistresp();
  void set_allocated_disklistresp(::LinkVidDiskListResp* disklistresp);

  // .LinkSysVidDiskListReq sysDiskListReq = 12;
  bool has_sysdisklistreq() const;
  void clear_sysdisklistreq();
  static const int kSysDiskListReqFieldNumber = 12;
  const ::LinkSysVidDiskListReq& sysdisklistreq() const;
  ::LinkSysVidDiskListReq* mutable_sysdisklistreq();
  ::LinkSysVidDiskListReq* release_sysdisklistreq();
  void set_allocated_sysdisklistreq(::LinkSysVidDiskListReq* sysdisklistreq);

  // .LinkSysVidDiskListResp sysDiskListResp = 13;
  bool has_sysdisklistresp() const;
  void clear_sysdisklistresp();
  static const int kSysDiskListRespFieldNumber = 13;
  const ::LinkSysVidDiskListResp& sysdisklistresp() const;
  ::LinkSysVidDiskListResp* mutable_sysdisklistresp();
  ::LinkSysVidDiskListResp* release_sysdisklistresp();
  void set_allocated_sysdisklistresp(::LinkSysVidDiskListResp* sysdisklistresp);

  // .LinkAddDiskReq addDiskReq = 14;
  bool has_adddiskreq() const;
  void clear_adddiskreq();
  static const int kAddDiskReqFieldNumber = 14;
  const ::LinkAddDiskReq& adddiskreq() const;
  ::LinkAddDiskReq* mutable_adddiskreq();
  ::LinkAddDiskReq* release_adddiskreq();
  void set_allocated_adddiskreq(::LinkAddDiskReq* adddiskreq);

  // .LinkAddDiskResp addDiskResp = 15;
  bool has_adddiskresp() const;
  void clear_adddiskresp();
  static const int kAddDiskRespFieldNumber = 15;
  const ::LinkAddDiskResp& adddiskresp() const;
  ::LinkAddDiskResp* mutable_adddiskresp();
  ::LinkAddDiskResp* release_adddiskresp();
  void set_allocated_adddiskresp(::LinkAddDiskResp* adddiskresp);

  // .LinkDelDiskReq delDiskReq = 16;
  bool has_deldiskreq() const;
  void clear_deldiskreq();
  static const int kDelDiskReqFieldNumber = 16;
  const ::LinkDelDiskReq& deldiskreq() const;
  ::LinkDelDiskReq* mutable_deldiskreq();
  ::LinkDelDiskReq* release_deldiskreq();
  void set_allocated_deldiskreq(::LinkDelDiskReq* deldiskreq);

  // .LinkDelDiskResp delDiskResp = 17;
  bool has_deldiskresp() const;
  void clear_deldiskresp();
  static const int kDelDiskRespFieldNumber = 17;
  const ::LinkDelDiskResp& deldiskresp() const;
  ::LinkDelDiskResp* mutable_deldiskresp();
  ::LinkDelDiskResp* release_deldiskresp();
  void set_allocated_deldiskresp(::LinkDelDiskResp* deldiskresp);

  // .LinkUpdateDiskLimitReq diskLimitReq = 18;
  bool has_disklimitreq() const;
  void clear_disklimitreq();
  static const int kDiskLimitReqFieldNumber = 18;
  const ::LinkUpdateDiskLimitReq& disklimitreq() const;
  ::LinkUpdateDiskLimitReq* mutable_disklimitreq();
  ::LinkUpdateDiskLimitReq* release_disklimitreq();
  void set_allocated_disklimitreq(::LinkUpdateDiskLimitReq* disklimitreq);

  // .LinkUpdateDiskLimitResp diskLimitResp = 19;
  bool has_disklimitresp() const;
  void clear_disklimitresp();
  static const int kDiskLimitRespFieldNumber = 19;
  const ::LinkUpdateDiskLimitResp& disklimitresp() const;
  ::LinkUpdateDiskLimitResp* mutable_disklimitresp();
  ::LinkUpdateDiskLimitResp* release_disklimitresp();
  void set_allocated_disklimitresp(::LinkUpdateDiskLimitResp* disklimitresp);

  // .LinkGetLicReq licReq = 20;
  bool has_licreq() const;
  void clear_licreq();
  static const int kLicReqFieldNumber = 20;
  const ::LinkGetLicReq& licreq() const;
  ::LinkGetLicReq* mutable_licreq();
  ::LinkGetLicReq* release_licreq();
  void set_allocated_licreq(::LinkGetLicReq* licreq);

  // .LinkGetLicResp licResp = 21;
  bool has_licresp() const;
  void clear_licresp();
  static const int kLicRespFieldNumber = 21;
  const ::LinkGetLicResp& licresp() const;
  ::LinkGetLicResp* mutable_licresp();
  ::LinkGetLicResp* release_licresp();
  void set_allocated_licresp(::LinkGetLicResp* licresp);

  // .LinkGetVerReq verReq = 22;
  bool has_verreq() const;
  void clear_verreq();
  static const int kVerReqFieldNumber = 22;
  const ::LinkGetVerReq& verreq() const;
  ::LinkGetVerReq* mutable_verreq();
  ::LinkGetVerReq* release_verreq();
  void set_allocated_verreq(::LinkGetVerReq* verreq);

  // .LinkGetVerResp verResp = 23;
  bool has_verresp() const;
  void clear_verresp();
  static const int kVerRespFieldNumber = 23;
  const ::LinkGetVerResp& verresp() const;
  ::LinkGetVerResp* mutable_verresp();
  ::LinkGetVerResp* release_verresp();
  void set_allocated_verresp(::LinkGetVerResp* verresp);

  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:Link.LinkCmd)
 private:
  void set_has_loginreq();
  void set_has_loginresp();
  void set_has_keepalivereq();
  void set_has_keepaliveresp();
  void set_has_camlistreq();
  void set_has_camlistresp();
  void set_has_camreq();
  void set_has_camresp();
  void set_has_disklistreq();
  void set_has_disklistresp();
  void set_has_sysdisklistreq();
  void set_has_sysdisklistresp();
  void set_has_adddiskreq();
  void set_has_adddiskresp();
  void set_has_deldiskreq();
  void set_has_deldiskresp();
  void set_has_disklimitreq();
  void set_has_disklimitresp();
  void set_has_licreq();
  void set_has_licresp();
  void set_has_verreq();
  void set_has_verresp();

  inline bool has_cmd() const;
  void clear_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union CmdUnion {
    CmdUnion() {}
    ::LinkLoginReq* loginreq_;
    ::LinkLoginResp* loginresp_;
    ::LinkKeepaliveReq* keepalivereq_;
    ::LinkKeepaliveResp* keepaliveresp_;
    ::LinkListCamReq* camlistreq_;
    ::LinkListCamResp* camlistresp_;
    ::LinkCamReq* camreq_;
    ::LinkCamResp* camresp_;
    ::LinkVidDiskListReq* disklistreq_;
    ::LinkVidDiskListResp* disklistresp_;
    ::LinkSysVidDiskListReq* sysdisklistreq_;
    ::LinkSysVidDiskListResp* sysdisklistresp_;
    ::LinkAddDiskReq* adddiskreq_;
    ::LinkAddDiskResp* adddiskresp_;
    ::LinkDelDiskReq* deldiskreq_;
    ::LinkDelDiskResp* deldiskresp_;
    ::LinkUpdateDiskLimitReq* disklimitreq_;
    ::LinkUpdateDiskLimitResp* disklimitresp_;
    ::LinkGetLicReq* licreq_;
    ::LinkGetLicResp* licresp_;
    ::LinkGetVerReq* verreq_;
    ::LinkGetVerResp* verresp_;
  } cmd_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct VE_LIBRARY_API protobuf_linkproto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkCmd

// .Link.LinkCmdType type = 1;
inline void LinkCmd::clear_type() {
  type_ = 0;
}
inline ::Link::LinkCmdType LinkCmd::type() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.type)
  return static_cast< ::Link::LinkCmdType >(type_);
}
inline void LinkCmd::set_type(::Link::LinkCmdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Link.LinkCmd.type)
}

// .LinkLoginReq loginReq = 2;
inline bool LinkCmd::has_loginreq() const {
  return cmd_case() == kLoginReq;
}
inline void LinkCmd::set_has_loginreq() {
  _oneof_case_[0] = kLoginReq;
}
inline void LinkCmd::clear_loginreq() {
  if (has_loginreq()) {
    delete cmd_.loginreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkLoginReq& LinkCmd::loginreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.loginReq)
  return has_loginreq()
      ? *cmd_.loginreq_
      : ::LinkLoginReq::default_instance();
}
inline ::LinkLoginReq* LinkCmd::mutable_loginreq() {
  if (!has_loginreq()) {
    clear_cmd();
    set_has_loginreq();
    cmd_.loginreq_ = new ::LinkLoginReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.loginReq)
  return cmd_.loginreq_;
}
inline ::LinkLoginReq* LinkCmd::release_loginreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.loginReq)
  if (has_loginreq()) {
    clear_has_cmd();
    ::LinkLoginReq* temp = cmd_.loginreq_;
    cmd_.loginreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_loginreq(::LinkLoginReq* loginreq) {
  clear_cmd();
  if (loginreq) {
    set_has_loginreq();
    cmd_.loginreq_ = loginreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.loginReq)
}

// .LinkLoginResp loginResp = 3;
inline bool LinkCmd::has_loginresp() const {
  return cmd_case() == kLoginResp;
}
inline void LinkCmd::set_has_loginresp() {
  _oneof_case_[0] = kLoginResp;
}
inline void LinkCmd::clear_loginresp() {
  if (has_loginresp()) {
    delete cmd_.loginresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkLoginResp& LinkCmd::loginresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.loginResp)
  return has_loginresp()
      ? *cmd_.loginresp_
      : ::LinkLoginResp::default_instance();
}
inline ::LinkLoginResp* LinkCmd::mutable_loginresp() {
  if (!has_loginresp()) {
    clear_cmd();
    set_has_loginresp();
    cmd_.loginresp_ = new ::LinkLoginResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.loginResp)
  return cmd_.loginresp_;
}
inline ::LinkLoginResp* LinkCmd::release_loginresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.loginResp)
  if (has_loginresp()) {
    clear_has_cmd();
    ::LinkLoginResp* temp = cmd_.loginresp_;
    cmd_.loginresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_loginresp(::LinkLoginResp* loginresp) {
  clear_cmd();
  if (loginresp) {
    set_has_loginresp();
    cmd_.loginresp_ = loginresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.loginResp)
}

// .LinkKeepaliveReq keepaliveReq = 4;
inline bool LinkCmd::has_keepalivereq() const {
  return cmd_case() == kKeepaliveReq;
}
inline void LinkCmd::set_has_keepalivereq() {
  _oneof_case_[0] = kKeepaliveReq;
}
inline void LinkCmd::clear_keepalivereq() {
  if (has_keepalivereq()) {
    delete cmd_.keepalivereq_;
    clear_has_cmd();
  }
}
inline  const ::LinkKeepaliveReq& LinkCmd::keepalivereq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.keepaliveReq)
  return has_keepalivereq()
      ? *cmd_.keepalivereq_
      : ::LinkKeepaliveReq::default_instance();
}
inline ::LinkKeepaliveReq* LinkCmd::mutable_keepalivereq() {
  if (!has_keepalivereq()) {
    clear_cmd();
    set_has_keepalivereq();
    cmd_.keepalivereq_ = new ::LinkKeepaliveReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.keepaliveReq)
  return cmd_.keepalivereq_;
}
inline ::LinkKeepaliveReq* LinkCmd::release_keepalivereq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.keepaliveReq)
  if (has_keepalivereq()) {
    clear_has_cmd();
    ::LinkKeepaliveReq* temp = cmd_.keepalivereq_;
    cmd_.keepalivereq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_keepalivereq(::LinkKeepaliveReq* keepalivereq) {
  clear_cmd();
  if (keepalivereq) {
    set_has_keepalivereq();
    cmd_.keepalivereq_ = keepalivereq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.keepaliveReq)
}

// .LinkKeepaliveResp keepaliveResp = 5;
inline bool LinkCmd::has_keepaliveresp() const {
  return cmd_case() == kKeepaliveResp;
}
inline void LinkCmd::set_has_keepaliveresp() {
  _oneof_case_[0] = kKeepaliveResp;
}
inline void LinkCmd::clear_keepaliveresp() {
  if (has_keepaliveresp()) {
    delete cmd_.keepaliveresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkKeepaliveResp& LinkCmd::keepaliveresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.keepaliveResp)
  return has_keepaliveresp()
      ? *cmd_.keepaliveresp_
      : ::LinkKeepaliveResp::default_instance();
}
inline ::LinkKeepaliveResp* LinkCmd::mutable_keepaliveresp() {
  if (!has_keepaliveresp()) {
    clear_cmd();
    set_has_keepaliveresp();
    cmd_.keepaliveresp_ = new ::LinkKeepaliveResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.keepaliveResp)
  return cmd_.keepaliveresp_;
}
inline ::LinkKeepaliveResp* LinkCmd::release_keepaliveresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.keepaliveResp)
  if (has_keepaliveresp()) {
    clear_has_cmd();
    ::LinkKeepaliveResp* temp = cmd_.keepaliveresp_;
    cmd_.keepaliveresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_keepaliveresp(::LinkKeepaliveResp* keepaliveresp) {
  clear_cmd();
  if (keepaliveresp) {
    set_has_keepaliveresp();
    cmd_.keepaliveresp_ = keepaliveresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.keepaliveResp)
}

// .LinkListCamReq camListReq = 6;
inline bool LinkCmd::has_camlistreq() const {
  return cmd_case() == kCamListReq;
}
inline void LinkCmd::set_has_camlistreq() {
  _oneof_case_[0] = kCamListReq;
}
inline void LinkCmd::clear_camlistreq() {
  if (has_camlistreq()) {
    delete cmd_.camlistreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkListCamReq& LinkCmd::camlistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camListReq)
  return has_camlistreq()
      ? *cmd_.camlistreq_
      : ::LinkListCamReq::default_instance();
}
inline ::LinkListCamReq* LinkCmd::mutable_camlistreq() {
  if (!has_camlistreq()) {
    clear_cmd();
    set_has_camlistreq();
    cmd_.camlistreq_ = new ::LinkListCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camListReq)
  return cmd_.camlistreq_;
}
inline ::LinkListCamReq* LinkCmd::release_camlistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camListReq)
  if (has_camlistreq()) {
    clear_has_cmd();
    ::LinkListCamReq* temp = cmd_.camlistreq_;
    cmd_.camlistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camlistreq(::LinkListCamReq* camlistreq) {
  clear_cmd();
  if (camlistreq) {
    set_has_camlistreq();
    cmd_.camlistreq_ = camlistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camListReq)
}

// .LinkListCamResp camListResp = 7;
inline bool LinkCmd::has_camlistresp() const {
  return cmd_case() == kCamListResp;
}
inline void LinkCmd::set_has_camlistresp() {
  _oneof_case_[0] = kCamListResp;
}
inline void LinkCmd::clear_camlistresp() {
  if (has_camlistresp()) {
    delete cmd_.camlistresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkListCamResp& LinkCmd::camlistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camListResp)
  return has_camlistresp()
      ? *cmd_.camlistresp_
      : ::LinkListCamResp::default_instance();
}
inline ::LinkListCamResp* LinkCmd::mutable_camlistresp() {
  if (!has_camlistresp()) {
    clear_cmd();
    set_has_camlistresp();
    cmd_.camlistresp_ = new ::LinkListCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camListResp)
  return cmd_.camlistresp_;
}
inline ::LinkListCamResp* LinkCmd::release_camlistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camListResp)
  if (has_camlistresp()) {
    clear_has_cmd();
    ::LinkListCamResp* temp = cmd_.camlistresp_;
    cmd_.camlistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camlistresp(::LinkListCamResp* camlistresp) {
  clear_cmd();
  if (camlistresp) {
    set_has_camlistresp();
    cmd_.camlistresp_ = camlistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camListResp)
}

// .LinkCamReq camReq = 8;
inline bool LinkCmd::has_camreq() const {
  return cmd_case() == kCamReq;
}
inline void LinkCmd::set_has_camreq() {
  _oneof_case_[0] = kCamReq;
}
inline void LinkCmd::clear_camreq() {
  if (has_camreq()) {
    delete cmd_.camreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamReq& LinkCmd::camreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camReq)
  return has_camreq()
      ? *cmd_.camreq_
      : ::LinkCamReq::default_instance();
}
inline ::LinkCamReq* LinkCmd::mutable_camreq() {
  if (!has_camreq()) {
    clear_cmd();
    set_has_camreq();
    cmd_.camreq_ = new ::LinkCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camReq)
  return cmd_.camreq_;
}
inline ::LinkCamReq* LinkCmd::release_camreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camReq)
  if (has_camreq()) {
    clear_has_cmd();
    ::LinkCamReq* temp = cmd_.camreq_;
    cmd_.camreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camreq(::LinkCamReq* camreq) {
  clear_cmd();
  if (camreq) {
    set_has_camreq();
    cmd_.camreq_ = camreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camReq)
}

// .LinkCamResp camResp = 9;
inline bool LinkCmd::has_camresp() const {
  return cmd_case() == kCamResp;
}
inline void LinkCmd::set_has_camresp() {
  _oneof_case_[0] = kCamResp;
}
inline void LinkCmd::clear_camresp() {
  if (has_camresp()) {
    delete cmd_.camresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamResp& LinkCmd::camresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camResp)
  return has_camresp()
      ? *cmd_.camresp_
      : ::LinkCamResp::default_instance();
}
inline ::LinkCamResp* LinkCmd::mutable_camresp() {
  if (!has_camresp()) {
    clear_cmd();
    set_has_camresp();
    cmd_.camresp_ = new ::LinkCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camResp)
  return cmd_.camresp_;
}
inline ::LinkCamResp* LinkCmd::release_camresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camResp)
  if (has_camresp()) {
    clear_has_cmd();
    ::LinkCamResp* temp = cmd_.camresp_;
    cmd_.camresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camresp(::LinkCamResp* camresp) {
  clear_cmd();
  if (camresp) {
    set_has_camresp();
    cmd_.camresp_ = camresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camResp)
}

// .LinkVidDiskListReq diskListReq = 10;
inline bool LinkCmd::has_disklistreq() const {
  return cmd_case() == kDiskListReq;
}
inline void LinkCmd::set_has_disklistreq() {
  _oneof_case_[0] = kDiskListReq;
}
inline void LinkCmd::clear_disklistreq() {
  if (has_disklistreq()) {
    delete cmd_.disklistreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkVidDiskListReq& LinkCmd::disklistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskListReq)
  return has_disklistreq()
      ? *cmd_.disklistreq_
      : ::LinkVidDiskListReq::default_instance();
}
inline ::LinkVidDiskListReq* LinkCmd::mutable_disklistreq() {
  if (!has_disklistreq()) {
    clear_cmd();
    set_has_disklistreq();
    cmd_.disklistreq_ = new ::LinkVidDiskListReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskListReq)
  return cmd_.disklistreq_;
}
inline ::LinkVidDiskListReq* LinkCmd::release_disklistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskListReq)
  if (has_disklistreq()) {
    clear_has_cmd();
    ::LinkVidDiskListReq* temp = cmd_.disklistreq_;
    cmd_.disklistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_disklistreq(::LinkVidDiskListReq* disklistreq) {
  clear_cmd();
  if (disklistreq) {
    set_has_disklistreq();
    cmd_.disklistreq_ = disklistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskListReq)
}

// .LinkVidDiskListResp diskListResp = 11;
inline bool LinkCmd::has_disklistresp() const {
  return cmd_case() == kDiskListResp;
}
inline void LinkCmd::set_has_disklistresp() {
  _oneof_case_[0] = kDiskListResp;
}
inline void LinkCmd::clear_disklistresp() {
  if (has_disklistresp()) {
    delete cmd_.disklistresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkVidDiskListResp& LinkCmd::disklistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskListResp)
  return has_disklistresp()
      ? *cmd_.disklistresp_
      : ::LinkVidDiskListResp::default_instance();
}
inline ::LinkVidDiskListResp* LinkCmd::mutable_disklistresp() {
  if (!has_disklistresp()) {
    clear_cmd();
    set_has_disklistresp();
    cmd_.disklistresp_ = new ::LinkVidDiskListResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskListResp)
  return cmd_.disklistresp_;
}
inline ::LinkVidDiskListResp* LinkCmd::release_disklistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskListResp)
  if (has_disklistresp()) {
    clear_has_cmd();
    ::LinkVidDiskListResp* temp = cmd_.disklistresp_;
    cmd_.disklistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_disklistresp(::LinkVidDiskListResp* disklistresp) {
  clear_cmd();
  if (disklistresp) {
    set_has_disklistresp();
    cmd_.disklistresp_ = disklistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskListResp)
}

// .LinkSysVidDiskListReq sysDiskListReq = 12;
inline bool LinkCmd::has_sysdisklistreq() const {
  return cmd_case() == kSysDiskListReq;
}
inline void LinkCmd::set_has_sysdisklistreq() {
  _oneof_case_[0] = kSysDiskListReq;
}
inline void LinkCmd::clear_sysdisklistreq() {
  if (has_sysdisklistreq()) {
    delete cmd_.sysdisklistreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkSysVidDiskListReq& LinkCmd::sysdisklistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.sysDiskListReq)
  return has_sysdisklistreq()
      ? *cmd_.sysdisklistreq_
      : ::LinkSysVidDiskListReq::default_instance();
}
inline ::LinkSysVidDiskListReq* LinkCmd::mutable_sysdisklistreq() {
  if (!has_sysdisklistreq()) {
    clear_cmd();
    set_has_sysdisklistreq();
    cmd_.sysdisklistreq_ = new ::LinkSysVidDiskListReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.sysDiskListReq)
  return cmd_.sysdisklistreq_;
}
inline ::LinkSysVidDiskListReq* LinkCmd::release_sysdisklistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.sysDiskListReq)
  if (has_sysdisklistreq()) {
    clear_has_cmd();
    ::LinkSysVidDiskListReq* temp = cmd_.sysdisklistreq_;
    cmd_.sysdisklistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_sysdisklistreq(::LinkSysVidDiskListReq* sysdisklistreq) {
  clear_cmd();
  if (sysdisklistreq) {
    set_has_sysdisklistreq();
    cmd_.sysdisklistreq_ = sysdisklistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.sysDiskListReq)
}

// .LinkSysVidDiskListResp sysDiskListResp = 13;
inline bool LinkCmd::has_sysdisklistresp() const {
  return cmd_case() == kSysDiskListResp;
}
inline void LinkCmd::set_has_sysdisklistresp() {
  _oneof_case_[0] = kSysDiskListResp;
}
inline void LinkCmd::clear_sysdisklistresp() {
  if (has_sysdisklistresp()) {
    delete cmd_.sysdisklistresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkSysVidDiskListResp& LinkCmd::sysdisklistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.sysDiskListResp)
  return has_sysdisklistresp()
      ? *cmd_.sysdisklistresp_
      : ::LinkSysVidDiskListResp::default_instance();
}
inline ::LinkSysVidDiskListResp* LinkCmd::mutable_sysdisklistresp() {
  if (!has_sysdisklistresp()) {
    clear_cmd();
    set_has_sysdisklistresp();
    cmd_.sysdisklistresp_ = new ::LinkSysVidDiskListResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.sysDiskListResp)
  return cmd_.sysdisklistresp_;
}
inline ::LinkSysVidDiskListResp* LinkCmd::release_sysdisklistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.sysDiskListResp)
  if (has_sysdisklistresp()) {
    clear_has_cmd();
    ::LinkSysVidDiskListResp* temp = cmd_.sysdisklistresp_;
    cmd_.sysdisklistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_sysdisklistresp(::LinkSysVidDiskListResp* sysdisklistresp) {
  clear_cmd();
  if (sysdisklistresp) {
    set_has_sysdisklistresp();
    cmd_.sysdisklistresp_ = sysdisklistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.sysDiskListResp)
}

// .LinkAddDiskReq addDiskReq = 14;
inline bool LinkCmd::has_adddiskreq() const {
  return cmd_case() == kAddDiskReq;
}
inline void LinkCmd::set_has_adddiskreq() {
  _oneof_case_[0] = kAddDiskReq;
}
inline void LinkCmd::clear_adddiskreq() {
  if (has_adddiskreq()) {
    delete cmd_.adddiskreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkAddDiskReq& LinkCmd::adddiskreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addDiskReq)
  return has_adddiskreq()
      ? *cmd_.adddiskreq_
      : ::LinkAddDiskReq::default_instance();
}
inline ::LinkAddDiskReq* LinkCmd::mutable_adddiskreq() {
  if (!has_adddiskreq()) {
    clear_cmd();
    set_has_adddiskreq();
    cmd_.adddiskreq_ = new ::LinkAddDiskReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addDiskReq)
  return cmd_.adddiskreq_;
}
inline ::LinkAddDiskReq* LinkCmd::release_adddiskreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addDiskReq)
  if (has_adddiskreq()) {
    clear_has_cmd();
    ::LinkAddDiskReq* temp = cmd_.adddiskreq_;
    cmd_.adddiskreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_adddiskreq(::LinkAddDiskReq* adddiskreq) {
  clear_cmd();
  if (adddiskreq) {
    set_has_adddiskreq();
    cmd_.adddiskreq_ = adddiskreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addDiskReq)
}

// .LinkAddDiskResp addDiskResp = 15;
inline bool LinkCmd::has_adddiskresp() const {
  return cmd_case() == kAddDiskResp;
}
inline void LinkCmd::set_has_adddiskresp() {
  _oneof_case_[0] = kAddDiskResp;
}
inline void LinkCmd::clear_adddiskresp() {
  if (has_adddiskresp()) {
    delete cmd_.adddiskresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkAddDiskResp& LinkCmd::adddiskresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addDiskResp)
  return has_adddiskresp()
      ? *cmd_.adddiskresp_
      : ::LinkAddDiskResp::default_instance();
}
inline ::LinkAddDiskResp* LinkCmd::mutable_adddiskresp() {
  if (!has_adddiskresp()) {
    clear_cmd();
    set_has_adddiskresp();
    cmd_.adddiskresp_ = new ::LinkAddDiskResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addDiskResp)
  return cmd_.adddiskresp_;
}
inline ::LinkAddDiskResp* LinkCmd::release_adddiskresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addDiskResp)
  if (has_adddiskresp()) {
    clear_has_cmd();
    ::LinkAddDiskResp* temp = cmd_.adddiskresp_;
    cmd_.adddiskresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_adddiskresp(::LinkAddDiskResp* adddiskresp) {
  clear_cmd();
  if (adddiskresp) {
    set_has_adddiskresp();
    cmd_.adddiskresp_ = adddiskresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addDiskResp)
}

// .LinkDelDiskReq delDiskReq = 16;
inline bool LinkCmd::has_deldiskreq() const {
  return cmd_case() == kDelDiskReq;
}
inline void LinkCmd::set_has_deldiskreq() {
  _oneof_case_[0] = kDelDiskReq;
}
inline void LinkCmd::clear_deldiskreq() {
  if (has_deldiskreq()) {
    delete cmd_.deldiskreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkDelDiskReq& LinkCmd::deldiskreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delDiskReq)
  return has_deldiskreq()
      ? *cmd_.deldiskreq_
      : ::LinkDelDiskReq::default_instance();
}
inline ::LinkDelDiskReq* LinkCmd::mutable_deldiskreq() {
  if (!has_deldiskreq()) {
    clear_cmd();
    set_has_deldiskreq();
    cmd_.deldiskreq_ = new ::LinkDelDiskReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delDiskReq)
  return cmd_.deldiskreq_;
}
inline ::LinkDelDiskReq* LinkCmd::release_deldiskreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delDiskReq)
  if (has_deldiskreq()) {
    clear_has_cmd();
    ::LinkDelDiskReq* temp = cmd_.deldiskreq_;
    cmd_.deldiskreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_deldiskreq(::LinkDelDiskReq* deldiskreq) {
  clear_cmd();
  if (deldiskreq) {
    set_has_deldiskreq();
    cmd_.deldiskreq_ = deldiskreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delDiskReq)
}

// .LinkDelDiskResp delDiskResp = 17;
inline bool LinkCmd::has_deldiskresp() const {
  return cmd_case() == kDelDiskResp;
}
inline void LinkCmd::set_has_deldiskresp() {
  _oneof_case_[0] = kDelDiskResp;
}
inline void LinkCmd::clear_deldiskresp() {
  if (has_deldiskresp()) {
    delete cmd_.deldiskresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkDelDiskResp& LinkCmd::deldiskresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delDiskResp)
  return has_deldiskresp()
      ? *cmd_.deldiskresp_
      : ::LinkDelDiskResp::default_instance();
}
inline ::LinkDelDiskResp* LinkCmd::mutable_deldiskresp() {
  if (!has_deldiskresp()) {
    clear_cmd();
    set_has_deldiskresp();
    cmd_.deldiskresp_ = new ::LinkDelDiskResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delDiskResp)
  return cmd_.deldiskresp_;
}
inline ::LinkDelDiskResp* LinkCmd::release_deldiskresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delDiskResp)
  if (has_deldiskresp()) {
    clear_has_cmd();
    ::LinkDelDiskResp* temp = cmd_.deldiskresp_;
    cmd_.deldiskresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_deldiskresp(::LinkDelDiskResp* deldiskresp) {
  clear_cmd();
  if (deldiskresp) {
    set_has_deldiskresp();
    cmd_.deldiskresp_ = deldiskresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delDiskResp)
}

// .LinkUpdateDiskLimitReq diskLimitReq = 18;
inline bool LinkCmd::has_disklimitreq() const {
  return cmd_case() == kDiskLimitReq;
}
inline void LinkCmd::set_has_disklimitreq() {
  _oneof_case_[0] = kDiskLimitReq;
}
inline void LinkCmd::clear_disklimitreq() {
  if (has_disklimitreq()) {
    delete cmd_.disklimitreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkUpdateDiskLimitReq& LinkCmd::disklimitreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskLimitReq)
  return has_disklimitreq()
      ? *cmd_.disklimitreq_
      : ::LinkUpdateDiskLimitReq::default_instance();
}
inline ::LinkUpdateDiskLimitReq* LinkCmd::mutable_disklimitreq() {
  if (!has_disklimitreq()) {
    clear_cmd();
    set_has_disklimitreq();
    cmd_.disklimitreq_ = new ::LinkUpdateDiskLimitReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskLimitReq)
  return cmd_.disklimitreq_;
}
inline ::LinkUpdateDiskLimitReq* LinkCmd::release_disklimitreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskLimitReq)
  if (has_disklimitreq()) {
    clear_has_cmd();
    ::LinkUpdateDiskLimitReq* temp = cmd_.disklimitreq_;
    cmd_.disklimitreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_disklimitreq(::LinkUpdateDiskLimitReq* disklimitreq) {
  clear_cmd();
  if (disklimitreq) {
    set_has_disklimitreq();
    cmd_.disklimitreq_ = disklimitreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskLimitReq)
}

// .LinkUpdateDiskLimitResp diskLimitResp = 19;
inline bool LinkCmd::has_disklimitresp() const {
  return cmd_case() == kDiskLimitResp;
}
inline void LinkCmd::set_has_disklimitresp() {
  _oneof_case_[0] = kDiskLimitResp;
}
inline void LinkCmd::clear_disklimitresp() {
  if (has_disklimitresp()) {
    delete cmd_.disklimitresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkUpdateDiskLimitResp& LinkCmd::disklimitresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskLimitResp)
  return has_disklimitresp()
      ? *cmd_.disklimitresp_
      : ::LinkUpdateDiskLimitResp::default_instance();
}
inline ::LinkUpdateDiskLimitResp* LinkCmd::mutable_disklimitresp() {
  if (!has_disklimitresp()) {
    clear_cmd();
    set_has_disklimitresp();
    cmd_.disklimitresp_ = new ::LinkUpdateDiskLimitResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskLimitResp)
  return cmd_.disklimitresp_;
}
inline ::LinkUpdateDiskLimitResp* LinkCmd::release_disklimitresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskLimitResp)
  if (has_disklimitresp()) {
    clear_has_cmd();
    ::LinkUpdateDiskLimitResp* temp = cmd_.disklimitresp_;
    cmd_.disklimitresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_disklimitresp(::LinkUpdateDiskLimitResp* disklimitresp) {
  clear_cmd();
  if (disklimitresp) {
    set_has_disklimitresp();
    cmd_.disklimitresp_ = disklimitresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskLimitResp)
}

// .LinkGetLicReq licReq = 20;
inline bool LinkCmd::has_licreq() const {
  return cmd_case() == kLicReq;
}
inline void LinkCmd::set_has_licreq() {
  _oneof_case_[0] = kLicReq;
}
inline void LinkCmd::clear_licreq() {
  if (has_licreq()) {
    delete cmd_.licreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetLicReq& LinkCmd::licreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.licReq)
  return has_licreq()
      ? *cmd_.licreq_
      : ::LinkGetLicReq::default_instance();
}
inline ::LinkGetLicReq* LinkCmd::mutable_licreq() {
  if (!has_licreq()) {
    clear_cmd();
    set_has_licreq();
    cmd_.licreq_ = new ::LinkGetLicReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.licReq)
  return cmd_.licreq_;
}
inline ::LinkGetLicReq* LinkCmd::release_licreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.licReq)
  if (has_licreq()) {
    clear_has_cmd();
    ::LinkGetLicReq* temp = cmd_.licreq_;
    cmd_.licreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_licreq(::LinkGetLicReq* licreq) {
  clear_cmd();
  if (licreq) {
    set_has_licreq();
    cmd_.licreq_ = licreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.licReq)
}

// .LinkGetLicResp licResp = 21;
inline bool LinkCmd::has_licresp() const {
  return cmd_case() == kLicResp;
}
inline void LinkCmd::set_has_licresp() {
  _oneof_case_[0] = kLicResp;
}
inline void LinkCmd::clear_licresp() {
  if (has_licresp()) {
    delete cmd_.licresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetLicResp& LinkCmd::licresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.licResp)
  return has_licresp()
      ? *cmd_.licresp_
      : ::LinkGetLicResp::default_instance();
}
inline ::LinkGetLicResp* LinkCmd::mutable_licresp() {
  if (!has_licresp()) {
    clear_cmd();
    set_has_licresp();
    cmd_.licresp_ = new ::LinkGetLicResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.licResp)
  return cmd_.licresp_;
}
inline ::LinkGetLicResp* LinkCmd::release_licresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.licResp)
  if (has_licresp()) {
    clear_has_cmd();
    ::LinkGetLicResp* temp = cmd_.licresp_;
    cmd_.licresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_licresp(::LinkGetLicResp* licresp) {
  clear_cmd();
  if (licresp) {
    set_has_licresp();
    cmd_.licresp_ = licresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.licResp)
}

// .LinkGetVerReq verReq = 22;
inline bool LinkCmd::has_verreq() const {
  return cmd_case() == kVerReq;
}
inline void LinkCmd::set_has_verreq() {
  _oneof_case_[0] = kVerReq;
}
inline void LinkCmd::clear_verreq() {
  if (has_verreq()) {
    delete cmd_.verreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetVerReq& LinkCmd::verreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.verReq)
  return has_verreq()
      ? *cmd_.verreq_
      : ::LinkGetVerReq::default_instance();
}
inline ::LinkGetVerReq* LinkCmd::mutable_verreq() {
  if (!has_verreq()) {
    clear_cmd();
    set_has_verreq();
    cmd_.verreq_ = new ::LinkGetVerReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.verReq)
  return cmd_.verreq_;
}
inline ::LinkGetVerReq* LinkCmd::release_verreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.verReq)
  if (has_verreq()) {
    clear_has_cmd();
    ::LinkGetVerReq* temp = cmd_.verreq_;
    cmd_.verreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_verreq(::LinkGetVerReq* verreq) {
  clear_cmd();
  if (verreq) {
    set_has_verreq();
    cmd_.verreq_ = verreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.verReq)
}

// .LinkGetVerResp verResp = 23;
inline bool LinkCmd::has_verresp() const {
  return cmd_case() == kVerResp;
}
inline void LinkCmd::set_has_verresp() {
  _oneof_case_[0] = kVerResp;
}
inline void LinkCmd::clear_verresp() {
  if (has_verresp()) {
    delete cmd_.verresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetVerResp& LinkCmd::verresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.verResp)
  return has_verresp()
      ? *cmd_.verresp_
      : ::LinkGetVerResp::default_instance();
}
inline ::LinkGetVerResp* LinkCmd::mutable_verresp() {
  if (!has_verresp()) {
    clear_cmd();
    set_has_verresp();
    cmd_.verresp_ = new ::LinkGetVerResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.verResp)
  return cmd_.verresp_;
}
inline ::LinkGetVerResp* LinkCmd::release_verresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.verResp)
  if (has_verresp()) {
    clear_has_cmd();
    ::LinkGetVerResp* temp = cmd_.verresp_;
    cmd_.verresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_verresp(::LinkGetVerResp* verresp) {
  clear_cmd();
  if (verresp) {
    set_has_verresp();
    cmd_.verresp_ = verresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.verResp)
}

inline bool LinkCmd::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void LinkCmd::clear_has_cmd() {
  _oneof_case_[0] = CMD_NOT_SET;
}
inline LinkCmd::CmdCase LinkCmd::cmd_case() const {
  return LinkCmd::CmdCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Link

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Link::LinkCmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Link::LinkCmdType>() {
  return ::Link::LinkCmdType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_linkproto_2eproto__INCLUDED
