// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linkproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "linkproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Link {
class LinkCmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkCmd> {
  public:
  const ::LinkLoginReq* loginreq_;
  const ::LinkLoginResp* loginresp_;
  const ::LinkKeepaliveReq* keepalivereq_;
  const ::LinkKeepaliveResp* keepaliveresp_;
  const ::LinkRegNotifyReq* regnotifyreq_;
  const ::LinkRegNotifyResp* regnotifyresp_;
  const ::LinkListCamReq* camlistreq_;
  const ::LinkListCamResp* camlistresp_;
  const ::LinkCamReq* camreq_;
  const ::LinkCamResp* camresp_;
  const ::LinkAddCamReq* addcamreq_;
  const ::LinkAddCamResp* addcamresp_;
  const ::LinkDelCamReq* delcamreq_;
  const ::LinkDelCamResp* delcamresp_;
  const ::LinkSetCamSchedReq* setcamschedreq_;
  const ::LinkSetCamSchedResp* setcamschedresp_;
  const ::LinkVidDiskListReq* disklistreq_;
  const ::LinkVidDiskListResp* disklistresp_;
  const ::LinkSysVidDiskListReq* sysdisklistreq_;
  const ::LinkSysVidDiskListResp* sysdisklistresp_;
  const ::LinkAddDiskReq* adddiskreq_;
  const ::LinkAddDiskResp* adddiskresp_;
  const ::LinkDelDiskReq* deldiskreq_;
  const ::LinkDelDiskResp* deldiskresp_;
  const ::LinkUpdateDiskLimitReq* disklimitreq_;
  const ::LinkUpdateDiskLimitResp* disklimitresp_;
  const ::LinkGetLicReq* licreq_;
  const ::LinkGetLicResp* licresp_;
  const ::LinkGetVerReq* verreq_;
  const ::LinkGetVerResp* verresp_;
  const ::LinkConfLicReq* conflicreq_;
  const ::LinkConfLicResp* conflicresp_;
  const ::LinkAddUserReq* adduserreq_;
  const ::LinkAddUserResp* adduserresp_;
  const ::LinkCamAddNotify* camaddnotify_;
  const ::LinkCamIdNotify* camidnotify_;
} _LinkCmd_default_instance_;

namespace protobuf_linkproto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCmd, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCmd, type_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), loginreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), loginresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), keepalivereq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), keepaliveresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), regnotifyreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), regnotifyresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), camlistreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), camlistresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), camreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), camresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), addcamreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), addcamresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), delcamreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), delcamresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), setcamschedreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), setcamschedresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), disklistreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), disklistresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), sysdisklistreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), sysdisklistresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), adddiskreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), adddiskresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), deldiskreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), deldiskresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), disklimitreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), disklimitresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), licreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), licresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), verreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), verresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), conflicreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), conflicresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), adduserreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), adduserresp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), camaddnotify_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), camidnotify_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCmd, cmd_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LinkCmd)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkCmd_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "linkproto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _LinkCmd_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_linksystem_2eproto::InitDefaults();
  _LinkCmd_default_instance_.DefaultConstruct();
  _LinkCmd_default_instance_.loginreq_ = const_cast< ::LinkLoginReq*>(
      ::LinkLoginReq::internal_default_instance());
  _LinkCmd_default_instance_.loginresp_ = const_cast< ::LinkLoginResp*>(
      ::LinkLoginResp::internal_default_instance());
  _LinkCmd_default_instance_.keepalivereq_ = const_cast< ::LinkKeepaliveReq*>(
      ::LinkKeepaliveReq::internal_default_instance());
  _LinkCmd_default_instance_.keepaliveresp_ = const_cast< ::LinkKeepaliveResp*>(
      ::LinkKeepaliveResp::internal_default_instance());
  _LinkCmd_default_instance_.regnotifyreq_ = const_cast< ::LinkRegNotifyReq*>(
      ::LinkRegNotifyReq::internal_default_instance());
  _LinkCmd_default_instance_.regnotifyresp_ = const_cast< ::LinkRegNotifyResp*>(
      ::LinkRegNotifyResp::internal_default_instance());
  _LinkCmd_default_instance_.camlistreq_ = const_cast< ::LinkListCamReq*>(
      ::LinkListCamReq::internal_default_instance());
  _LinkCmd_default_instance_.camlistresp_ = const_cast< ::LinkListCamResp*>(
      ::LinkListCamResp::internal_default_instance());
  _LinkCmd_default_instance_.camreq_ = const_cast< ::LinkCamReq*>(
      ::LinkCamReq::internal_default_instance());
  _LinkCmd_default_instance_.camresp_ = const_cast< ::LinkCamResp*>(
      ::LinkCamResp::internal_default_instance());
  _LinkCmd_default_instance_.addcamreq_ = const_cast< ::LinkAddCamReq*>(
      ::LinkAddCamReq::internal_default_instance());
  _LinkCmd_default_instance_.addcamresp_ = const_cast< ::LinkAddCamResp*>(
      ::LinkAddCamResp::internal_default_instance());
  _LinkCmd_default_instance_.delcamreq_ = const_cast< ::LinkDelCamReq*>(
      ::LinkDelCamReq::internal_default_instance());
  _LinkCmd_default_instance_.delcamresp_ = const_cast< ::LinkDelCamResp*>(
      ::LinkDelCamResp::internal_default_instance());
  _LinkCmd_default_instance_.setcamschedreq_ = const_cast< ::LinkSetCamSchedReq*>(
      ::LinkSetCamSchedReq::internal_default_instance());
  _LinkCmd_default_instance_.setcamschedresp_ = const_cast< ::LinkSetCamSchedResp*>(
      ::LinkSetCamSchedResp::internal_default_instance());
  _LinkCmd_default_instance_.disklistreq_ = const_cast< ::LinkVidDiskListReq*>(
      ::LinkVidDiskListReq::internal_default_instance());
  _LinkCmd_default_instance_.disklistresp_ = const_cast< ::LinkVidDiskListResp*>(
      ::LinkVidDiskListResp::internal_default_instance());
  _LinkCmd_default_instance_.sysdisklistreq_ = const_cast< ::LinkSysVidDiskListReq*>(
      ::LinkSysVidDiskListReq::internal_default_instance());
  _LinkCmd_default_instance_.sysdisklistresp_ = const_cast< ::LinkSysVidDiskListResp*>(
      ::LinkSysVidDiskListResp::internal_default_instance());
  _LinkCmd_default_instance_.adddiskreq_ = const_cast< ::LinkAddDiskReq*>(
      ::LinkAddDiskReq::internal_default_instance());
  _LinkCmd_default_instance_.adddiskresp_ = const_cast< ::LinkAddDiskResp*>(
      ::LinkAddDiskResp::internal_default_instance());
  _LinkCmd_default_instance_.deldiskreq_ = const_cast< ::LinkDelDiskReq*>(
      ::LinkDelDiskReq::internal_default_instance());
  _LinkCmd_default_instance_.deldiskresp_ = const_cast< ::LinkDelDiskResp*>(
      ::LinkDelDiskResp::internal_default_instance());
  _LinkCmd_default_instance_.disklimitreq_ = const_cast< ::LinkUpdateDiskLimitReq*>(
      ::LinkUpdateDiskLimitReq::internal_default_instance());
  _LinkCmd_default_instance_.disklimitresp_ = const_cast< ::LinkUpdateDiskLimitResp*>(
      ::LinkUpdateDiskLimitResp::internal_default_instance());
  _LinkCmd_default_instance_.licreq_ = const_cast< ::LinkGetLicReq*>(
      ::LinkGetLicReq::internal_default_instance());
  _LinkCmd_default_instance_.licresp_ = const_cast< ::LinkGetLicResp*>(
      ::LinkGetLicResp::internal_default_instance());
  _LinkCmd_default_instance_.verreq_ = const_cast< ::LinkGetVerReq*>(
      ::LinkGetVerReq::internal_default_instance());
  _LinkCmd_default_instance_.verresp_ = const_cast< ::LinkGetVerResp*>(
      ::LinkGetVerResp::internal_default_instance());
  _LinkCmd_default_instance_.conflicreq_ = const_cast< ::LinkConfLicReq*>(
      ::LinkConfLicReq::internal_default_instance());
  _LinkCmd_default_instance_.conflicresp_ = const_cast< ::LinkConfLicResp*>(
      ::LinkConfLicResp::internal_default_instance());
  _LinkCmd_default_instance_.adduserreq_ = const_cast< ::LinkAddUserReq*>(
      ::LinkAddUserReq::internal_default_instance());
  _LinkCmd_default_instance_.adduserresp_ = const_cast< ::LinkAddUserResp*>(
      ::LinkAddUserResp::internal_default_instance());
  _LinkCmd_default_instance_.camaddnotify_ = const_cast< ::LinkCamAddNotify*>(
      ::LinkCamAddNotify::internal_default_instance());
  _LinkCmd_default_instance_.camidnotify_ = const_cast< ::LinkCamIdNotify*>(
      ::LinkCamIdNotify::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017linkproto.proto\022\004Link\032\020linksystem.prot"
      "o\"\223\014\n\007LinkCmd\022\037\n\004type\030\001 \001(\0162\021.Link.LinkC"
      "mdType\022!\n\010loginReq\030f \001(\0132\r.LinkLoginReqH"
      "\000\022#\n\tloginResp\030g \001(\0132\016.LinkLoginRespH\000\022)"
      "\n\014keepaliveReq\030h \001(\0132\021.LinkKeepaliveReqH"
      "\000\022+\n\rkeepaliveResp\030i \001(\0132\022.LinkKeepalive"
      "RespH\000\022)\n\014regNotifyReq\030j \001(\0132\021.LinkRegNo"
      "tifyReqH\000\022+\n\rregNotifyResp\030k \001(\0132\022.LinkR"
      "egNotifyRespH\000\022&\n\ncamListReq\030\311\001 \001(\0132\017.Li"
      "nkListCamReqH\000\022(\n\013camListResp\030\312\001 \001(\0132\020.L"
      "inkListCamRespH\000\022\036\n\006camReq\030\313\001 \001(\0132\013.Link"
      "CamReqH\000\022 \n\007camResp\030\314\001 \001(\0132\014.LinkCamResp"
      "H\000\022$\n\taddCamReq\030\315\001 \001(\0132\016.LinkAddCamReqH\000"
      "\022&\n\naddCamResp\030\316\001 \001(\0132\017.LinkAddCamRespH\000"
      "\022$\n\tdelCamReq\030\317\001 \001(\0132\016.LinkDelCamReqH\000\022&"
      "\n\ndelCamResp\030\320\001 \001(\0132\017.LinkDelCamRespH\000\022."
      "\n\016setCamSchedReq\030\321\001 \001(\0132\023.LinkSetCamSche"
      "dReqH\000\0220\n\017setCamSchedResp\030\322\001 \001(\0132\024.LinkS"
      "etCamSchedRespH\000\022+\n\013diskListReq\030\255\002 \001(\0132\023"
      ".LinkVidDiskListReqH\000\022-\n\014diskListResp\030\256\002"
      " \001(\0132\024.LinkVidDiskListRespH\000\0221\n\016sysDiskL"
      "istReq\030\257\002 \001(\0132\026.LinkSysVidDiskListReqH\000\022"
      "3\n\017sysDiskListResp\030\260\002 \001(\0132\027.LinkSysVidDi"
      "skListRespH\000\022&\n\naddDiskReq\030\261\002 \001(\0132\017.Link"
      "AddDiskReqH\000\022(\n\013addDiskResp\030\262\002 \001(\0132\020.Lin"
      "kAddDiskRespH\000\022&\n\ndelDiskReq\030\263\002 \001(\0132\017.Li"
      "nkDelDiskReqH\000\022(\n\013delDiskResp\030\264\002 \001(\0132\020.L"
      "inkDelDiskRespH\000\0220\n\014diskLimitReq\030\265\002 \001(\0132"
      "\027.LinkUpdateDiskLimitReqH\000\0222\n\rdiskLimitR"
      "esp\030\266\002 \001(\0132\030.LinkUpdateDiskLimitRespH\000\022!"
      "\n\006licReq\030\221\003 \001(\0132\016.LinkGetLicReqH\000\022#\n\007lic"
      "Resp\030\222\003 \001(\0132\017.LinkGetLicRespH\000\022!\n\006verReq"
      "\030\223\003 \001(\0132\016.LinkGetVerReqH\000\022#\n\007verResp\030\224\003 "
      "\001(\0132\017.LinkGetVerRespH\000\022&\n\nconfLicReq\030\225\003 "
      "\001(\0132\017.LinkConfLicReqH\000\022(\n\013confLicResp\030\226\003"
      " \001(\0132\020.LinkConfLicRespH\000\022&\n\naddUserReq\030\365"
      "\003 \001(\0132\017.LinkAddUserReqH\000\022(\n\013addUserResp\030"
      "\366\003 \001(\0132\020.LinkAddUserRespH\000\022*\n\014camAddNoti"
      "fy\030\221N \001(\0132\021.LinkCamAddNotifyH\000\022(\n\013camIdN"
      "otify\030\222N \001(\0132\020.LinkCamIdNotifyH\000B\005\n\003cmd*"
      "\273\t\n\013LinkCmdType\022\021\n\rLINK_CMD_ZERO\020\000\022\026\n\022LI"
      "NK_CMD_LOGIN_REQ\020e\022\027\n\023LINK_CMD_LOGIN_RES"
      "P\020f\022\032\n\026LINK_CMD_KEEPALIVE_REQ\020g\022\033\n\027LINK_"
      "CMD_KEEPALIVE_RESP\020h\022\033\n\027LINK_CMD_REG_NOT"
      "IFY_REQ\020i\022\034\n\030LINK_CMD_REG_NOTIFY_RESP\020j\022"
      "\032\n\025LINK_CMD_CAM_LIST_REQ\020\311\001\022\033\n\026LINK_CMD_"
      "CAM_LIST_RESP\020\312\001\022\025\n\020LINK_CMD_CAM_REQ\020\313\001\022"
      "\026\n\021LINK_CMD_CAM_RESP\020\314\001\022\031\n\024LINK_CMD_ADD_"
      "CAM_REQ\020\315\001\022\032\n\025LINK_CMD_ADD_CAM_RESP\020\316\001\022\031"
      "\n\024LINK_CMD_DEL_CAM_REQ\020\317\001\022\032\n\025LINK_CMD_DE"
      "L_CAM_RESP\020\320\001\022\037\n\032LINK_CMD_SET_CAM_SCHED_"
      "REQ\020\321\001\022 \n\033LINK_CMD_SET_CAM_SCHED_RESP\020\322\001"
      "\022\033\n\026LINK_CMD_DISK_LIST_REQ\020\255\002\022\034\n\027LINK_CM"
      "D_DISK_LIST_RESP\020\256\002\022\037\n\032LINK_CMD_SYS_DISK"
      "_LIST_REQ\020\257\002\022 \n\033LINK_CMD_SYS_DISK_LIST_R"
      "ESP\020\260\002\022\032\n\025LINK_CMD_ADD_DISK_REQ\020\261\002\022\033\n\026LI"
      "NK_CMD_ADD_DISK_RESP\020\262\002\022\032\n\025LINK_CMD_DEL_"
      "DISK_REQ\020\263\002\022\033\n\026LINK_CMD_DEL_DISK_RESP\020\264\002"
      "\022#\n\036LINK_CMD_UPDATE_DISK_LIMIT_REQ\020\265\002\022$\n"
      "\037LINK_CMD_UPDATE_DISK_LIMIT_RESP\020\266\002\022\031\n\024L"
      "INK_CMD_GET_LIC_REQ\020\221\003\022\032\n\025LINK_CMD_GET_L"
      "IC_RESP\020\222\003\022\031\n\024LINK_CMD_GET_VER_REQ\020\223\003\022\032\n"
      "\025LINK_CMD_GET_VER_RESP\020\224\003\022\032\n\025LINK_CMD_CO"
      "NF_LIC_REQ\020\225\003\022\033\n\026LINK_CMD_CONF_LIC_RESP\020"
      "\226\003\022\032\n\025LINK_CMD_ADD_USER_REQ\020\365\003\022\033\n\026LINK_C"
      "MD_ADD_USER_RESP\020\366\003\022\034\n\027LINK_CMD_CAM_ADD_"
      "NOTIFY\020\221N\022\034\n\027LINK_CMD_CAM_DEL_NOTIFY\020\222N\022"
      "\037\n\032LINK_CMD_CAM_ONLINE_NOTIFY\020\223N\022 \n\033LINK"
      "_CMD_CAM_OFFLINE_NOTIFY\020\224N\022\037\n\032LINK_CMD_C"
      "AM_REC_ON_NOTIFY\020\225N\022 \n\033LINK_CMD_CAM_REC_"
      "OFF_NOTIFY\020\226Nb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2821);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "linkproto.proto", &protobuf_RegisterTypes);
  ::protobuf_linksystem_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_linkproto_2eproto

const ::google::protobuf::EnumDescriptor* LinkCmdType_descriptor() {
  protobuf_linkproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linkproto_2eproto::file_level_enum_descriptors[0];
}
bool LinkCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 501:
    case 502:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkCmd::kTypeFieldNumber;
const int LinkCmd::kLoginReqFieldNumber;
const int LinkCmd::kLoginRespFieldNumber;
const int LinkCmd::kKeepaliveReqFieldNumber;
const int LinkCmd::kKeepaliveRespFieldNumber;
const int LinkCmd::kRegNotifyReqFieldNumber;
const int LinkCmd::kRegNotifyRespFieldNumber;
const int LinkCmd::kCamListReqFieldNumber;
const int LinkCmd::kCamListRespFieldNumber;
const int LinkCmd::kCamReqFieldNumber;
const int LinkCmd::kCamRespFieldNumber;
const int LinkCmd::kAddCamReqFieldNumber;
const int LinkCmd::kAddCamRespFieldNumber;
const int LinkCmd::kDelCamReqFieldNumber;
const int LinkCmd::kDelCamRespFieldNumber;
const int LinkCmd::kSetCamSchedReqFieldNumber;
const int LinkCmd::kSetCamSchedRespFieldNumber;
const int LinkCmd::kDiskListReqFieldNumber;
const int LinkCmd::kDiskListRespFieldNumber;
const int LinkCmd::kSysDiskListReqFieldNumber;
const int LinkCmd::kSysDiskListRespFieldNumber;
const int LinkCmd::kAddDiskReqFieldNumber;
const int LinkCmd::kAddDiskRespFieldNumber;
const int LinkCmd::kDelDiskReqFieldNumber;
const int LinkCmd::kDelDiskRespFieldNumber;
const int LinkCmd::kDiskLimitReqFieldNumber;
const int LinkCmd::kDiskLimitRespFieldNumber;
const int LinkCmd::kLicReqFieldNumber;
const int LinkCmd::kLicRespFieldNumber;
const int LinkCmd::kVerReqFieldNumber;
const int LinkCmd::kVerRespFieldNumber;
const int LinkCmd::kConfLicReqFieldNumber;
const int LinkCmd::kConfLicRespFieldNumber;
const int LinkCmd::kAddUserReqFieldNumber;
const int LinkCmd::kAddUserRespFieldNumber;
const int LinkCmd::kCamAddNotifyFieldNumber;
const int LinkCmd::kCamIdNotifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkCmd::LinkCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linkproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Link.LinkCmd)
}
LinkCmd::LinkCmd(const LinkCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_cmd();
  switch (from.cmd_case()) {
    case kLoginReq: {
      mutable_loginreq()->::LinkLoginReq::MergeFrom(from.loginreq());
      break;
    }
    case kLoginResp: {
      mutable_loginresp()->::LinkLoginResp::MergeFrom(from.loginresp());
      break;
    }
    case kKeepaliveReq: {
      mutable_keepalivereq()->::LinkKeepaliveReq::MergeFrom(from.keepalivereq());
      break;
    }
    case kKeepaliveResp: {
      mutable_keepaliveresp()->::LinkKeepaliveResp::MergeFrom(from.keepaliveresp());
      break;
    }
    case kRegNotifyReq: {
      mutable_regnotifyreq()->::LinkRegNotifyReq::MergeFrom(from.regnotifyreq());
      break;
    }
    case kRegNotifyResp: {
      mutable_regnotifyresp()->::LinkRegNotifyResp::MergeFrom(from.regnotifyresp());
      break;
    }
    case kCamListReq: {
      mutable_camlistreq()->::LinkListCamReq::MergeFrom(from.camlistreq());
      break;
    }
    case kCamListResp: {
      mutable_camlistresp()->::LinkListCamResp::MergeFrom(from.camlistresp());
      break;
    }
    case kCamReq: {
      mutable_camreq()->::LinkCamReq::MergeFrom(from.camreq());
      break;
    }
    case kCamResp: {
      mutable_camresp()->::LinkCamResp::MergeFrom(from.camresp());
      break;
    }
    case kAddCamReq: {
      mutable_addcamreq()->::LinkAddCamReq::MergeFrom(from.addcamreq());
      break;
    }
    case kAddCamResp: {
      mutable_addcamresp()->::LinkAddCamResp::MergeFrom(from.addcamresp());
      break;
    }
    case kDelCamReq: {
      mutable_delcamreq()->::LinkDelCamReq::MergeFrom(from.delcamreq());
      break;
    }
    case kDelCamResp: {
      mutable_delcamresp()->::LinkDelCamResp::MergeFrom(from.delcamresp());
      break;
    }
    case kSetCamSchedReq: {
      mutable_setcamschedreq()->::LinkSetCamSchedReq::MergeFrom(from.setcamschedreq());
      break;
    }
    case kSetCamSchedResp: {
      mutable_setcamschedresp()->::LinkSetCamSchedResp::MergeFrom(from.setcamschedresp());
      break;
    }
    case kDiskListReq: {
      mutable_disklistreq()->::LinkVidDiskListReq::MergeFrom(from.disklistreq());
      break;
    }
    case kDiskListResp: {
      mutable_disklistresp()->::LinkVidDiskListResp::MergeFrom(from.disklistresp());
      break;
    }
    case kSysDiskListReq: {
      mutable_sysdisklistreq()->::LinkSysVidDiskListReq::MergeFrom(from.sysdisklistreq());
      break;
    }
    case kSysDiskListResp: {
      mutable_sysdisklistresp()->::LinkSysVidDiskListResp::MergeFrom(from.sysdisklistresp());
      break;
    }
    case kAddDiskReq: {
      mutable_adddiskreq()->::LinkAddDiskReq::MergeFrom(from.adddiskreq());
      break;
    }
    case kAddDiskResp: {
      mutable_adddiskresp()->::LinkAddDiskResp::MergeFrom(from.adddiskresp());
      break;
    }
    case kDelDiskReq: {
      mutable_deldiskreq()->::LinkDelDiskReq::MergeFrom(from.deldiskreq());
      break;
    }
    case kDelDiskResp: {
      mutable_deldiskresp()->::LinkDelDiskResp::MergeFrom(from.deldiskresp());
      break;
    }
    case kDiskLimitReq: {
      mutable_disklimitreq()->::LinkUpdateDiskLimitReq::MergeFrom(from.disklimitreq());
      break;
    }
    case kDiskLimitResp: {
      mutable_disklimitresp()->::LinkUpdateDiskLimitResp::MergeFrom(from.disklimitresp());
      break;
    }
    case kLicReq: {
      mutable_licreq()->::LinkGetLicReq::MergeFrom(from.licreq());
      break;
    }
    case kLicResp: {
      mutable_licresp()->::LinkGetLicResp::MergeFrom(from.licresp());
      break;
    }
    case kVerReq: {
      mutable_verreq()->::LinkGetVerReq::MergeFrom(from.verreq());
      break;
    }
    case kVerResp: {
      mutable_verresp()->::LinkGetVerResp::MergeFrom(from.verresp());
      break;
    }
    case kConfLicReq: {
      mutable_conflicreq()->::LinkConfLicReq::MergeFrom(from.conflicreq());
      break;
    }
    case kConfLicResp: {
      mutable_conflicresp()->::LinkConfLicResp::MergeFrom(from.conflicresp());
      break;
    }
    case kAddUserReq: {
      mutable_adduserreq()->::LinkAddUserReq::MergeFrom(from.adduserreq());
      break;
    }
    case kAddUserResp: {
      mutable_adduserresp()->::LinkAddUserResp::MergeFrom(from.adduserresp());
      break;
    }
    case kCamAddNotify: {
      mutable_camaddnotify()->::LinkCamAddNotify::MergeFrom(from.camaddnotify());
      break;
    }
    case kCamIdNotify: {
      mutable_camidnotify()->::LinkCamIdNotify::MergeFrom(from.camidnotify());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Link.LinkCmd)
}

void LinkCmd::SharedCtor() {
  type_ = 0;
  clear_has_cmd();
  _cached_size_ = 0;
}

LinkCmd::~LinkCmd() {
  // @@protoc_insertion_point(destructor:Link.LinkCmd)
  SharedDtor();
}

void LinkCmd::SharedDtor() {
  if (has_cmd()) {
    clear_cmd();
  }
}

void LinkCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkCmd::descriptor() {
  protobuf_linkproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linkproto_2eproto::file_level_metadata[0].descriptor;
}

const LinkCmd& LinkCmd::default_instance() {
  protobuf_linkproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkCmd* LinkCmd::New(::google::protobuf::Arena* arena) const {
  LinkCmd* n = new LinkCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkCmd::clear_cmd() {
// @@protoc_insertion_point(one_of_clear_start:Link.LinkCmd)
  switch (cmd_case()) {
    case kLoginReq: {
      delete cmd_.loginreq_;
      break;
    }
    case kLoginResp: {
      delete cmd_.loginresp_;
      break;
    }
    case kKeepaliveReq: {
      delete cmd_.keepalivereq_;
      break;
    }
    case kKeepaliveResp: {
      delete cmd_.keepaliveresp_;
      break;
    }
    case kRegNotifyReq: {
      delete cmd_.regnotifyreq_;
      break;
    }
    case kRegNotifyResp: {
      delete cmd_.regnotifyresp_;
      break;
    }
    case kCamListReq: {
      delete cmd_.camlistreq_;
      break;
    }
    case kCamListResp: {
      delete cmd_.camlistresp_;
      break;
    }
    case kCamReq: {
      delete cmd_.camreq_;
      break;
    }
    case kCamResp: {
      delete cmd_.camresp_;
      break;
    }
    case kAddCamReq: {
      delete cmd_.addcamreq_;
      break;
    }
    case kAddCamResp: {
      delete cmd_.addcamresp_;
      break;
    }
    case kDelCamReq: {
      delete cmd_.delcamreq_;
      break;
    }
    case kDelCamResp: {
      delete cmd_.delcamresp_;
      break;
    }
    case kSetCamSchedReq: {
      delete cmd_.setcamschedreq_;
      break;
    }
    case kSetCamSchedResp: {
      delete cmd_.setcamschedresp_;
      break;
    }
    case kDiskListReq: {
      delete cmd_.disklistreq_;
      break;
    }
    case kDiskListResp: {
      delete cmd_.disklistresp_;
      break;
    }
    case kSysDiskListReq: {
      delete cmd_.sysdisklistreq_;
      break;
    }
    case kSysDiskListResp: {
      delete cmd_.sysdisklistresp_;
      break;
    }
    case kAddDiskReq: {
      delete cmd_.adddiskreq_;
      break;
    }
    case kAddDiskResp: {
      delete cmd_.adddiskresp_;
      break;
    }
    case kDelDiskReq: {
      delete cmd_.deldiskreq_;
      break;
    }
    case kDelDiskResp: {
      delete cmd_.deldiskresp_;
      break;
    }
    case kDiskLimitReq: {
      delete cmd_.disklimitreq_;
      break;
    }
    case kDiskLimitResp: {
      delete cmd_.disklimitresp_;
      break;
    }
    case kLicReq: {
      delete cmd_.licreq_;
      break;
    }
    case kLicResp: {
      delete cmd_.licresp_;
      break;
    }
    case kVerReq: {
      delete cmd_.verreq_;
      break;
    }
    case kVerResp: {
      delete cmd_.verresp_;
      break;
    }
    case kConfLicReq: {
      delete cmd_.conflicreq_;
      break;
    }
    case kConfLicResp: {
      delete cmd_.conflicresp_;
      break;
    }
    case kAddUserReq: {
      delete cmd_.adduserreq_;
      break;
    }
    case kAddUserResp: {
      delete cmd_.adduserresp_;
      break;
    }
    case kCamAddNotify: {
      delete cmd_.camaddnotify_;
      break;
    }
    case kCamIdNotify: {
      delete cmd_.camidnotify_;
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CMD_NOT_SET;
}


void LinkCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:Link.LinkCmd)
  type_ = 0;
  clear_cmd();
}

bool LinkCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Link.LinkCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(80018u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Link.LinkCmdType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Link::LinkCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkLoginReq loginReq = 102;
      case 102: {
        if (tag == 818u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkLoginResp loginResp = 103;
      case 103: {
        if (tag == 826u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkKeepaliveReq keepaliveReq = 104;
      case 104: {
        if (tag == 834u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keepalivereq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkKeepaliveResp keepaliveResp = 105;
      case 105: {
        if (tag == 842u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keepaliveresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkRegNotifyReq regNotifyReq = 106;
      case 106: {
        if (tag == 850u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regnotifyreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkRegNotifyResp regNotifyResp = 107;
      case 107: {
        if (tag == 858u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regnotifyresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkListCamReq camListReq = 201;
      case 201: {
        if (tag == 1610u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camlistreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkListCamResp camListResp = 202;
      case 202: {
        if (tag == 1618u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camlistresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkCamReq camReq = 203;
      case 203: {
        if (tag == 1626u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkCamResp camResp = 204;
      case 204: {
        if (tag == 1634u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkAddCamReq addCamReq = 205;
      case 205: {
        if (tag == 1642u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addcamreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkAddCamResp addCamResp = 206;
      case 206: {
        if (tag == 1650u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addcamresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkDelCamReq delCamReq = 207;
      case 207: {
        if (tag == 1658u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delcamreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkDelCamResp delCamResp = 208;
      case 208: {
        if (tag == 1666u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delcamresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkSetCamSchedReq setCamSchedReq = 209;
      case 209: {
        if (tag == 1674u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setcamschedreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkSetCamSchedResp setCamSchedResp = 210;
      case 210: {
        if (tag == 1682u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setcamschedresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkVidDiskListReq diskListReq = 301;
      case 301: {
        if (tag == 2410u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disklistreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkVidDiskListResp diskListResp = 302;
      case 302: {
        if (tag == 2418u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disklistresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkSysVidDiskListReq sysDiskListReq = 303;
      case 303: {
        if (tag == 2426u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sysdisklistreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkSysVidDiskListResp sysDiskListResp = 304;
      case 304: {
        if (tag == 2434u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sysdisklistresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkAddDiskReq addDiskReq = 305;
      case 305: {
        if (tag == 2442u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adddiskreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkAddDiskResp addDiskResp = 306;
      case 306: {
        if (tag == 2450u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adddiskresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkDelDiskReq delDiskReq = 307;
      case 307: {
        if (tag == 2458u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deldiskreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkDelDiskResp delDiskResp = 308;
      case 308: {
        if (tag == 2466u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deldiskresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkUpdateDiskLimitReq diskLimitReq = 309;
      case 309: {
        if (tag == 2474u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disklimitreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkUpdateDiskLimitResp diskLimitResp = 310;
      case 310: {
        if (tag == 2482u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disklimitresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkGetLicReq licReq = 401;
      case 401: {
        if (tag == 3210u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_licreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkGetLicResp licResp = 402;
      case 402: {
        if (tag == 3218u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_licresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkGetVerReq verReq = 403;
      case 403: {
        if (tag == 3226u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkGetVerResp verResp = 404;
      case 404: {
        if (tag == 3234u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkConfLicReq confLicReq = 405;
      case 405: {
        if (tag == 3242u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conflicreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkConfLicResp confLicResp = 406;
      case 406: {
        if (tag == 3250u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conflicresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkAddUserReq addUserReq = 501;
      case 501: {
        if (tag == 4010u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adduserreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkAddUserResp addUserResp = 502;
      case 502: {
        if (tag == 4018u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adduserresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkCamAddNotify camAddNotify = 10001;
      case 10001: {
        if (tag == 80010u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camaddnotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkCamIdNotify camIdNotify = 10002;
      case 10002: {
        if (tag == 80018u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camidnotify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Link.LinkCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Link.LinkCmd)
  return false;
#undef DO_
}

void LinkCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Link.LinkCmd)
  // .Link.LinkCmdType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .LinkLoginReq loginReq = 102;
  if (has_loginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *cmd_.loginreq_, output);
  }

  // .LinkLoginResp loginResp = 103;
  if (has_loginresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *cmd_.loginresp_, output);
  }

  // .LinkKeepaliveReq keepaliveReq = 104;
  if (has_keepalivereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *cmd_.keepalivereq_, output);
  }

  // .LinkKeepaliveResp keepaliveResp = 105;
  if (has_keepaliveresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *cmd_.keepaliveresp_, output);
  }

  // .LinkRegNotifyReq regNotifyReq = 106;
  if (has_regnotifyreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *cmd_.regnotifyreq_, output);
  }

  // .LinkRegNotifyResp regNotifyResp = 107;
  if (has_regnotifyresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, *cmd_.regnotifyresp_, output);
  }

  // .LinkListCamReq camListReq = 201;
  if (has_camlistreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, *cmd_.camlistreq_, output);
  }

  // .LinkListCamResp camListResp = 202;
  if (has_camlistresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202, *cmd_.camlistresp_, output);
  }

  // .LinkCamReq camReq = 203;
  if (has_camreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      203, *cmd_.camreq_, output);
  }

  // .LinkCamResp camResp = 204;
  if (has_camresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      204, *cmd_.camresp_, output);
  }

  // .LinkAddCamReq addCamReq = 205;
  if (has_addcamreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      205, *cmd_.addcamreq_, output);
  }

  // .LinkAddCamResp addCamResp = 206;
  if (has_addcamresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      206, *cmd_.addcamresp_, output);
  }

  // .LinkDelCamReq delCamReq = 207;
  if (has_delcamreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      207, *cmd_.delcamreq_, output);
  }

  // .LinkDelCamResp delCamResp = 208;
  if (has_delcamresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      208, *cmd_.delcamresp_, output);
  }

  // .LinkSetCamSchedReq setCamSchedReq = 209;
  if (has_setcamschedreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      209, *cmd_.setcamschedreq_, output);
  }

  // .LinkSetCamSchedResp setCamSchedResp = 210;
  if (has_setcamschedresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      210, *cmd_.setcamschedresp_, output);
  }

  // .LinkVidDiskListReq diskListReq = 301;
  if (has_disklistreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, *cmd_.disklistreq_, output);
  }

  // .LinkVidDiskListResp diskListResp = 302;
  if (has_disklistresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302, *cmd_.disklistresp_, output);
  }

  // .LinkSysVidDiskListReq sysDiskListReq = 303;
  if (has_sysdisklistreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303, *cmd_.sysdisklistreq_, output);
  }

  // .LinkSysVidDiskListResp sysDiskListResp = 304;
  if (has_sysdisklistresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      304, *cmd_.sysdisklistresp_, output);
  }

  // .LinkAddDiskReq addDiskReq = 305;
  if (has_adddiskreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      305, *cmd_.adddiskreq_, output);
  }

  // .LinkAddDiskResp addDiskResp = 306;
  if (has_adddiskresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      306, *cmd_.adddiskresp_, output);
  }

  // .LinkDelDiskReq delDiskReq = 307;
  if (has_deldiskreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      307, *cmd_.deldiskreq_, output);
  }

  // .LinkDelDiskResp delDiskResp = 308;
  if (has_deldiskresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      308, *cmd_.deldiskresp_, output);
  }

  // .LinkUpdateDiskLimitReq diskLimitReq = 309;
  if (has_disklimitreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      309, *cmd_.disklimitreq_, output);
  }

  // .LinkUpdateDiskLimitResp diskLimitResp = 310;
  if (has_disklimitresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      310, *cmd_.disklimitresp_, output);
  }

  // .LinkGetLicReq licReq = 401;
  if (has_licreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      401, *cmd_.licreq_, output);
  }

  // .LinkGetLicResp licResp = 402;
  if (has_licresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      402, *cmd_.licresp_, output);
  }

  // .LinkGetVerReq verReq = 403;
  if (has_verreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      403, *cmd_.verreq_, output);
  }

  // .LinkGetVerResp verResp = 404;
  if (has_verresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      404, *cmd_.verresp_, output);
  }

  // .LinkConfLicReq confLicReq = 405;
  if (has_conflicreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      405, *cmd_.conflicreq_, output);
  }

  // .LinkConfLicResp confLicResp = 406;
  if (has_conflicresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      406, *cmd_.conflicresp_, output);
  }

  // .LinkAddUserReq addUserReq = 501;
  if (has_adduserreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      501, *cmd_.adduserreq_, output);
  }

  // .LinkAddUserResp addUserResp = 502;
  if (has_adduserresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      502, *cmd_.adduserresp_, output);
  }

  // .LinkCamAddNotify camAddNotify = 10001;
  if (has_camaddnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10001, *cmd_.camaddnotify_, output);
  }

  // .LinkCamIdNotify camIdNotify = 10002;
  if (has_camidnotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10002, *cmd_.camidnotify_, output);
  }

  // @@protoc_insertion_point(serialize_end:Link.LinkCmd)
}

::google::protobuf::uint8* LinkCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Link.LinkCmd)
  // .Link.LinkCmdType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .LinkLoginReq loginReq = 102;
  if (has_loginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *cmd_.loginreq_, false, target);
  }

  // .LinkLoginResp loginResp = 103;
  if (has_loginresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *cmd_.loginresp_, false, target);
  }

  // .LinkKeepaliveReq keepaliveReq = 104;
  if (has_keepalivereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *cmd_.keepalivereq_, false, target);
  }

  // .LinkKeepaliveResp keepaliveResp = 105;
  if (has_keepaliveresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *cmd_.keepaliveresp_, false, target);
  }

  // .LinkRegNotifyReq regNotifyReq = 106;
  if (has_regnotifyreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *cmd_.regnotifyreq_, false, target);
  }

  // .LinkRegNotifyResp regNotifyResp = 107;
  if (has_regnotifyresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        107, *cmd_.regnotifyresp_, false, target);
  }

  // .LinkListCamReq camListReq = 201;
  if (has_camlistreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        201, *cmd_.camlistreq_, false, target);
  }

  // .LinkListCamResp camListResp = 202;
  if (has_camlistresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        202, *cmd_.camlistresp_, false, target);
  }

  // .LinkCamReq camReq = 203;
  if (has_camreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        203, *cmd_.camreq_, false, target);
  }

  // .LinkCamResp camResp = 204;
  if (has_camresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        204, *cmd_.camresp_, false, target);
  }

  // .LinkAddCamReq addCamReq = 205;
  if (has_addcamreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        205, *cmd_.addcamreq_, false, target);
  }

  // .LinkAddCamResp addCamResp = 206;
  if (has_addcamresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        206, *cmd_.addcamresp_, false, target);
  }

  // .LinkDelCamReq delCamReq = 207;
  if (has_delcamreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        207, *cmd_.delcamreq_, false, target);
  }

  // .LinkDelCamResp delCamResp = 208;
  if (has_delcamresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        208, *cmd_.delcamresp_, false, target);
  }

  // .LinkSetCamSchedReq setCamSchedReq = 209;
  if (has_setcamschedreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        209, *cmd_.setcamschedreq_, false, target);
  }

  // .LinkSetCamSchedResp setCamSchedResp = 210;
  if (has_setcamschedresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        210, *cmd_.setcamschedresp_, false, target);
  }

  // .LinkVidDiskListReq diskListReq = 301;
  if (has_disklistreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        301, *cmd_.disklistreq_, false, target);
  }

  // .LinkVidDiskListResp diskListResp = 302;
  if (has_disklistresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        302, *cmd_.disklistresp_, false, target);
  }

  // .LinkSysVidDiskListReq sysDiskListReq = 303;
  if (has_sysdisklistreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        303, *cmd_.sysdisklistreq_, false, target);
  }

  // .LinkSysVidDiskListResp sysDiskListResp = 304;
  if (has_sysdisklistresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        304, *cmd_.sysdisklistresp_, false, target);
  }

  // .LinkAddDiskReq addDiskReq = 305;
  if (has_adddiskreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        305, *cmd_.adddiskreq_, false, target);
  }

  // .LinkAddDiskResp addDiskResp = 306;
  if (has_adddiskresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        306, *cmd_.adddiskresp_, false, target);
  }

  // .LinkDelDiskReq delDiskReq = 307;
  if (has_deldiskreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        307, *cmd_.deldiskreq_, false, target);
  }

  // .LinkDelDiskResp delDiskResp = 308;
  if (has_deldiskresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        308, *cmd_.deldiskresp_, false, target);
  }

  // .LinkUpdateDiskLimitReq diskLimitReq = 309;
  if (has_disklimitreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        309, *cmd_.disklimitreq_, false, target);
  }

  // .LinkUpdateDiskLimitResp diskLimitResp = 310;
  if (has_disklimitresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        310, *cmd_.disklimitresp_, false, target);
  }

  // .LinkGetLicReq licReq = 401;
  if (has_licreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        401, *cmd_.licreq_, false, target);
  }

  // .LinkGetLicResp licResp = 402;
  if (has_licresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        402, *cmd_.licresp_, false, target);
  }

  // .LinkGetVerReq verReq = 403;
  if (has_verreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        403, *cmd_.verreq_, false, target);
  }

  // .LinkGetVerResp verResp = 404;
  if (has_verresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        404, *cmd_.verresp_, false, target);
  }

  // .LinkConfLicReq confLicReq = 405;
  if (has_conflicreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        405, *cmd_.conflicreq_, false, target);
  }

  // .LinkConfLicResp confLicResp = 406;
  if (has_conflicresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        406, *cmd_.conflicresp_, false, target);
  }

  // .LinkAddUserReq addUserReq = 501;
  if (has_adduserreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        501, *cmd_.adduserreq_, false, target);
  }

  // .LinkAddUserResp addUserResp = 502;
  if (has_adduserresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        502, *cmd_.adduserresp_, false, target);
  }

  // .LinkCamAddNotify camAddNotify = 10001;
  if (has_camaddnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10001, *cmd_.camaddnotify_, false, target);
  }

  // .LinkCamIdNotify camIdNotify = 10002;
  if (has_camidnotify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10002, *cmd_.camidnotify_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Link.LinkCmd)
  return target;
}

size_t LinkCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Link.LinkCmd)
  size_t total_size = 0;

  // .Link.LinkCmdType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (cmd_case()) {
    // .LinkLoginReq loginReq = 102;
    case kLoginReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.loginreq_);
      break;
    }
    // .LinkLoginResp loginResp = 103;
    case kLoginResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.loginresp_);
      break;
    }
    // .LinkKeepaliveReq keepaliveReq = 104;
    case kKeepaliveReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.keepalivereq_);
      break;
    }
    // .LinkKeepaliveResp keepaliveResp = 105;
    case kKeepaliveResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.keepaliveresp_);
      break;
    }
    // .LinkRegNotifyReq regNotifyReq = 106;
    case kRegNotifyReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.regnotifyreq_);
      break;
    }
    // .LinkRegNotifyResp regNotifyResp = 107;
    case kRegNotifyResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.regnotifyresp_);
      break;
    }
    // .LinkListCamReq camListReq = 201;
    case kCamListReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.camlistreq_);
      break;
    }
    // .LinkListCamResp camListResp = 202;
    case kCamListResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.camlistresp_);
      break;
    }
    // .LinkCamReq camReq = 203;
    case kCamReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.camreq_);
      break;
    }
    // .LinkCamResp camResp = 204;
    case kCamResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.camresp_);
      break;
    }
    // .LinkAddCamReq addCamReq = 205;
    case kAddCamReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.addcamreq_);
      break;
    }
    // .LinkAddCamResp addCamResp = 206;
    case kAddCamResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.addcamresp_);
      break;
    }
    // .LinkDelCamReq delCamReq = 207;
    case kDelCamReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.delcamreq_);
      break;
    }
    // .LinkDelCamResp delCamResp = 208;
    case kDelCamResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.delcamresp_);
      break;
    }
    // .LinkSetCamSchedReq setCamSchedReq = 209;
    case kSetCamSchedReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.setcamschedreq_);
      break;
    }
    // .LinkSetCamSchedResp setCamSchedResp = 210;
    case kSetCamSchedResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.setcamschedresp_);
      break;
    }
    // .LinkVidDiskListReq diskListReq = 301;
    case kDiskListReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.disklistreq_);
      break;
    }
    // .LinkVidDiskListResp diskListResp = 302;
    case kDiskListResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.disklistresp_);
      break;
    }
    // .LinkSysVidDiskListReq sysDiskListReq = 303;
    case kSysDiskListReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.sysdisklistreq_);
      break;
    }
    // .LinkSysVidDiskListResp sysDiskListResp = 304;
    case kSysDiskListResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.sysdisklistresp_);
      break;
    }
    // .LinkAddDiskReq addDiskReq = 305;
    case kAddDiskReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.adddiskreq_);
      break;
    }
    // .LinkAddDiskResp addDiskResp = 306;
    case kAddDiskResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.adddiskresp_);
      break;
    }
    // .LinkDelDiskReq delDiskReq = 307;
    case kDelDiskReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.deldiskreq_);
      break;
    }
    // .LinkDelDiskResp delDiskResp = 308;
    case kDelDiskResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.deldiskresp_);
      break;
    }
    // .LinkUpdateDiskLimitReq diskLimitReq = 309;
    case kDiskLimitReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.disklimitreq_);
      break;
    }
    // .LinkUpdateDiskLimitResp diskLimitResp = 310;
    case kDiskLimitResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.disklimitresp_);
      break;
    }
    // .LinkGetLicReq licReq = 401;
    case kLicReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.licreq_);
      break;
    }
    // .LinkGetLicResp licResp = 402;
    case kLicResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.licresp_);
      break;
    }
    // .LinkGetVerReq verReq = 403;
    case kVerReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.verreq_);
      break;
    }
    // .LinkGetVerResp verResp = 404;
    case kVerResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.verresp_);
      break;
    }
    // .LinkConfLicReq confLicReq = 405;
    case kConfLicReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.conflicreq_);
      break;
    }
    // .LinkConfLicResp confLicResp = 406;
    case kConfLicResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.conflicresp_);
      break;
    }
    // .LinkAddUserReq addUserReq = 501;
    case kAddUserReq: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.adduserreq_);
      break;
    }
    // .LinkAddUserResp addUserResp = 502;
    case kAddUserResp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.adduserresp_);
      break;
    }
    // .LinkCamAddNotify camAddNotify = 10001;
    case kCamAddNotify: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.camaddnotify_);
      break;
    }
    // .LinkCamIdNotify camIdNotify = 10002;
    case kCamIdNotify: {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.camidnotify_);
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Link.LinkCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Link.LinkCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Link.LinkCmd)
    MergeFrom(*source);
  }
}

void LinkCmd::MergeFrom(const LinkCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Link.LinkCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.cmd_case()) {
    case kLoginReq: {
      mutable_loginreq()->::LinkLoginReq::MergeFrom(from.loginreq());
      break;
    }
    case kLoginResp: {
      mutable_loginresp()->::LinkLoginResp::MergeFrom(from.loginresp());
      break;
    }
    case kKeepaliveReq: {
      mutable_keepalivereq()->::LinkKeepaliveReq::MergeFrom(from.keepalivereq());
      break;
    }
    case kKeepaliveResp: {
      mutable_keepaliveresp()->::LinkKeepaliveResp::MergeFrom(from.keepaliveresp());
      break;
    }
    case kRegNotifyReq: {
      mutable_regnotifyreq()->::LinkRegNotifyReq::MergeFrom(from.regnotifyreq());
      break;
    }
    case kRegNotifyResp: {
      mutable_regnotifyresp()->::LinkRegNotifyResp::MergeFrom(from.regnotifyresp());
      break;
    }
    case kCamListReq: {
      mutable_camlistreq()->::LinkListCamReq::MergeFrom(from.camlistreq());
      break;
    }
    case kCamListResp: {
      mutable_camlistresp()->::LinkListCamResp::MergeFrom(from.camlistresp());
      break;
    }
    case kCamReq: {
      mutable_camreq()->::LinkCamReq::MergeFrom(from.camreq());
      break;
    }
    case kCamResp: {
      mutable_camresp()->::LinkCamResp::MergeFrom(from.camresp());
      break;
    }
    case kAddCamReq: {
      mutable_addcamreq()->::LinkAddCamReq::MergeFrom(from.addcamreq());
      break;
    }
    case kAddCamResp: {
      mutable_addcamresp()->::LinkAddCamResp::MergeFrom(from.addcamresp());
      break;
    }
    case kDelCamReq: {
      mutable_delcamreq()->::LinkDelCamReq::MergeFrom(from.delcamreq());
      break;
    }
    case kDelCamResp: {
      mutable_delcamresp()->::LinkDelCamResp::MergeFrom(from.delcamresp());
      break;
    }
    case kSetCamSchedReq: {
      mutable_setcamschedreq()->::LinkSetCamSchedReq::MergeFrom(from.setcamschedreq());
      break;
    }
    case kSetCamSchedResp: {
      mutable_setcamschedresp()->::LinkSetCamSchedResp::MergeFrom(from.setcamschedresp());
      break;
    }
    case kDiskListReq: {
      mutable_disklistreq()->::LinkVidDiskListReq::MergeFrom(from.disklistreq());
      break;
    }
    case kDiskListResp: {
      mutable_disklistresp()->::LinkVidDiskListResp::MergeFrom(from.disklistresp());
      break;
    }
    case kSysDiskListReq: {
      mutable_sysdisklistreq()->::LinkSysVidDiskListReq::MergeFrom(from.sysdisklistreq());
      break;
    }
    case kSysDiskListResp: {
      mutable_sysdisklistresp()->::LinkSysVidDiskListResp::MergeFrom(from.sysdisklistresp());
      break;
    }
    case kAddDiskReq: {
      mutable_adddiskreq()->::LinkAddDiskReq::MergeFrom(from.adddiskreq());
      break;
    }
    case kAddDiskResp: {
      mutable_adddiskresp()->::LinkAddDiskResp::MergeFrom(from.adddiskresp());
      break;
    }
    case kDelDiskReq: {
      mutable_deldiskreq()->::LinkDelDiskReq::MergeFrom(from.deldiskreq());
      break;
    }
    case kDelDiskResp: {
      mutable_deldiskresp()->::LinkDelDiskResp::MergeFrom(from.deldiskresp());
      break;
    }
    case kDiskLimitReq: {
      mutable_disklimitreq()->::LinkUpdateDiskLimitReq::MergeFrom(from.disklimitreq());
      break;
    }
    case kDiskLimitResp: {
      mutable_disklimitresp()->::LinkUpdateDiskLimitResp::MergeFrom(from.disklimitresp());
      break;
    }
    case kLicReq: {
      mutable_licreq()->::LinkGetLicReq::MergeFrom(from.licreq());
      break;
    }
    case kLicResp: {
      mutable_licresp()->::LinkGetLicResp::MergeFrom(from.licresp());
      break;
    }
    case kVerReq: {
      mutable_verreq()->::LinkGetVerReq::MergeFrom(from.verreq());
      break;
    }
    case kVerResp: {
      mutable_verresp()->::LinkGetVerResp::MergeFrom(from.verresp());
      break;
    }
    case kConfLicReq: {
      mutable_conflicreq()->::LinkConfLicReq::MergeFrom(from.conflicreq());
      break;
    }
    case kConfLicResp: {
      mutable_conflicresp()->::LinkConfLicResp::MergeFrom(from.conflicresp());
      break;
    }
    case kAddUserReq: {
      mutable_adduserreq()->::LinkAddUserReq::MergeFrom(from.adduserreq());
      break;
    }
    case kAddUserResp: {
      mutable_adduserresp()->::LinkAddUserResp::MergeFrom(from.adduserresp());
      break;
    }
    case kCamAddNotify: {
      mutable_camaddnotify()->::LinkCamAddNotify::MergeFrom(from.camaddnotify());
      break;
    }
    case kCamIdNotify: {
      mutable_camidnotify()->::LinkCamIdNotify::MergeFrom(from.camidnotify());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
}

void LinkCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Link.LinkCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkCmd::CopyFrom(const LinkCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Link.LinkCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkCmd::IsInitialized() const {
  return true;
}

void LinkCmd::Swap(LinkCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkCmd::InternalSwap(LinkCmd* other) {
  std::swap(type_, other->type_);
  std::swap(cmd_, other->cmd_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkCmd::GetMetadata() const {
  protobuf_linkproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linkproto_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkCmd

// .Link.LinkCmdType type = 1;
void LinkCmd::clear_type() {
  type_ = 0;
}
::Link::LinkCmdType LinkCmd::type() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.type)
  return static_cast< ::Link::LinkCmdType >(type_);
}
void LinkCmd::set_type(::Link::LinkCmdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Link.LinkCmd.type)
}

// .LinkLoginReq loginReq = 102;
bool LinkCmd::has_loginreq() const {
  return cmd_case() == kLoginReq;
}
void LinkCmd::set_has_loginreq() {
  _oneof_case_[0] = kLoginReq;
}
void LinkCmd::clear_loginreq() {
  if (has_loginreq()) {
    delete cmd_.loginreq_;
    clear_has_cmd();
  }
}
 const ::LinkLoginReq& LinkCmd::loginreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.loginReq)
  return has_loginreq()
      ? *cmd_.loginreq_
      : ::LinkLoginReq::default_instance();
}
::LinkLoginReq* LinkCmd::mutable_loginreq() {
  if (!has_loginreq()) {
    clear_cmd();
    set_has_loginreq();
    cmd_.loginreq_ = new ::LinkLoginReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.loginReq)
  return cmd_.loginreq_;
}
::LinkLoginReq* LinkCmd::release_loginreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.loginReq)
  if (has_loginreq()) {
    clear_has_cmd();
    ::LinkLoginReq* temp = cmd_.loginreq_;
    cmd_.loginreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_loginreq(::LinkLoginReq* loginreq) {
  clear_cmd();
  if (loginreq) {
    set_has_loginreq();
    cmd_.loginreq_ = loginreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.loginReq)
}

// .LinkLoginResp loginResp = 103;
bool LinkCmd::has_loginresp() const {
  return cmd_case() == kLoginResp;
}
void LinkCmd::set_has_loginresp() {
  _oneof_case_[0] = kLoginResp;
}
void LinkCmd::clear_loginresp() {
  if (has_loginresp()) {
    delete cmd_.loginresp_;
    clear_has_cmd();
  }
}
 const ::LinkLoginResp& LinkCmd::loginresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.loginResp)
  return has_loginresp()
      ? *cmd_.loginresp_
      : ::LinkLoginResp::default_instance();
}
::LinkLoginResp* LinkCmd::mutable_loginresp() {
  if (!has_loginresp()) {
    clear_cmd();
    set_has_loginresp();
    cmd_.loginresp_ = new ::LinkLoginResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.loginResp)
  return cmd_.loginresp_;
}
::LinkLoginResp* LinkCmd::release_loginresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.loginResp)
  if (has_loginresp()) {
    clear_has_cmd();
    ::LinkLoginResp* temp = cmd_.loginresp_;
    cmd_.loginresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_loginresp(::LinkLoginResp* loginresp) {
  clear_cmd();
  if (loginresp) {
    set_has_loginresp();
    cmd_.loginresp_ = loginresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.loginResp)
}

// .LinkKeepaliveReq keepaliveReq = 104;
bool LinkCmd::has_keepalivereq() const {
  return cmd_case() == kKeepaliveReq;
}
void LinkCmd::set_has_keepalivereq() {
  _oneof_case_[0] = kKeepaliveReq;
}
void LinkCmd::clear_keepalivereq() {
  if (has_keepalivereq()) {
    delete cmd_.keepalivereq_;
    clear_has_cmd();
  }
}
 const ::LinkKeepaliveReq& LinkCmd::keepalivereq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.keepaliveReq)
  return has_keepalivereq()
      ? *cmd_.keepalivereq_
      : ::LinkKeepaliveReq::default_instance();
}
::LinkKeepaliveReq* LinkCmd::mutable_keepalivereq() {
  if (!has_keepalivereq()) {
    clear_cmd();
    set_has_keepalivereq();
    cmd_.keepalivereq_ = new ::LinkKeepaliveReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.keepaliveReq)
  return cmd_.keepalivereq_;
}
::LinkKeepaliveReq* LinkCmd::release_keepalivereq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.keepaliveReq)
  if (has_keepalivereq()) {
    clear_has_cmd();
    ::LinkKeepaliveReq* temp = cmd_.keepalivereq_;
    cmd_.keepalivereq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_keepalivereq(::LinkKeepaliveReq* keepalivereq) {
  clear_cmd();
  if (keepalivereq) {
    set_has_keepalivereq();
    cmd_.keepalivereq_ = keepalivereq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.keepaliveReq)
}

// .LinkKeepaliveResp keepaliveResp = 105;
bool LinkCmd::has_keepaliveresp() const {
  return cmd_case() == kKeepaliveResp;
}
void LinkCmd::set_has_keepaliveresp() {
  _oneof_case_[0] = kKeepaliveResp;
}
void LinkCmd::clear_keepaliveresp() {
  if (has_keepaliveresp()) {
    delete cmd_.keepaliveresp_;
    clear_has_cmd();
  }
}
 const ::LinkKeepaliveResp& LinkCmd::keepaliveresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.keepaliveResp)
  return has_keepaliveresp()
      ? *cmd_.keepaliveresp_
      : ::LinkKeepaliveResp::default_instance();
}
::LinkKeepaliveResp* LinkCmd::mutable_keepaliveresp() {
  if (!has_keepaliveresp()) {
    clear_cmd();
    set_has_keepaliveresp();
    cmd_.keepaliveresp_ = new ::LinkKeepaliveResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.keepaliveResp)
  return cmd_.keepaliveresp_;
}
::LinkKeepaliveResp* LinkCmd::release_keepaliveresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.keepaliveResp)
  if (has_keepaliveresp()) {
    clear_has_cmd();
    ::LinkKeepaliveResp* temp = cmd_.keepaliveresp_;
    cmd_.keepaliveresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_keepaliveresp(::LinkKeepaliveResp* keepaliveresp) {
  clear_cmd();
  if (keepaliveresp) {
    set_has_keepaliveresp();
    cmd_.keepaliveresp_ = keepaliveresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.keepaliveResp)
}

// .LinkRegNotifyReq regNotifyReq = 106;
bool LinkCmd::has_regnotifyreq() const {
  return cmd_case() == kRegNotifyReq;
}
void LinkCmd::set_has_regnotifyreq() {
  _oneof_case_[0] = kRegNotifyReq;
}
void LinkCmd::clear_regnotifyreq() {
  if (has_regnotifyreq()) {
    delete cmd_.regnotifyreq_;
    clear_has_cmd();
  }
}
 const ::LinkRegNotifyReq& LinkCmd::regnotifyreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.regNotifyReq)
  return has_regnotifyreq()
      ? *cmd_.regnotifyreq_
      : ::LinkRegNotifyReq::default_instance();
}
::LinkRegNotifyReq* LinkCmd::mutable_regnotifyreq() {
  if (!has_regnotifyreq()) {
    clear_cmd();
    set_has_regnotifyreq();
    cmd_.regnotifyreq_ = new ::LinkRegNotifyReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.regNotifyReq)
  return cmd_.regnotifyreq_;
}
::LinkRegNotifyReq* LinkCmd::release_regnotifyreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.regNotifyReq)
  if (has_regnotifyreq()) {
    clear_has_cmd();
    ::LinkRegNotifyReq* temp = cmd_.regnotifyreq_;
    cmd_.regnotifyreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_regnotifyreq(::LinkRegNotifyReq* regnotifyreq) {
  clear_cmd();
  if (regnotifyreq) {
    set_has_regnotifyreq();
    cmd_.regnotifyreq_ = regnotifyreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.regNotifyReq)
}

// .LinkRegNotifyResp regNotifyResp = 107;
bool LinkCmd::has_regnotifyresp() const {
  return cmd_case() == kRegNotifyResp;
}
void LinkCmd::set_has_regnotifyresp() {
  _oneof_case_[0] = kRegNotifyResp;
}
void LinkCmd::clear_regnotifyresp() {
  if (has_regnotifyresp()) {
    delete cmd_.regnotifyresp_;
    clear_has_cmd();
  }
}
 const ::LinkRegNotifyResp& LinkCmd::regnotifyresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.regNotifyResp)
  return has_regnotifyresp()
      ? *cmd_.regnotifyresp_
      : ::LinkRegNotifyResp::default_instance();
}
::LinkRegNotifyResp* LinkCmd::mutable_regnotifyresp() {
  if (!has_regnotifyresp()) {
    clear_cmd();
    set_has_regnotifyresp();
    cmd_.regnotifyresp_ = new ::LinkRegNotifyResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.regNotifyResp)
  return cmd_.regnotifyresp_;
}
::LinkRegNotifyResp* LinkCmd::release_regnotifyresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.regNotifyResp)
  if (has_regnotifyresp()) {
    clear_has_cmd();
    ::LinkRegNotifyResp* temp = cmd_.regnotifyresp_;
    cmd_.regnotifyresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_regnotifyresp(::LinkRegNotifyResp* regnotifyresp) {
  clear_cmd();
  if (regnotifyresp) {
    set_has_regnotifyresp();
    cmd_.regnotifyresp_ = regnotifyresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.regNotifyResp)
}

// .LinkListCamReq camListReq = 201;
bool LinkCmd::has_camlistreq() const {
  return cmd_case() == kCamListReq;
}
void LinkCmd::set_has_camlistreq() {
  _oneof_case_[0] = kCamListReq;
}
void LinkCmd::clear_camlistreq() {
  if (has_camlistreq()) {
    delete cmd_.camlistreq_;
    clear_has_cmd();
  }
}
 const ::LinkListCamReq& LinkCmd::camlistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camListReq)
  return has_camlistreq()
      ? *cmd_.camlistreq_
      : ::LinkListCamReq::default_instance();
}
::LinkListCamReq* LinkCmd::mutable_camlistreq() {
  if (!has_camlistreq()) {
    clear_cmd();
    set_has_camlistreq();
    cmd_.camlistreq_ = new ::LinkListCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camListReq)
  return cmd_.camlistreq_;
}
::LinkListCamReq* LinkCmd::release_camlistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camListReq)
  if (has_camlistreq()) {
    clear_has_cmd();
    ::LinkListCamReq* temp = cmd_.camlistreq_;
    cmd_.camlistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_camlistreq(::LinkListCamReq* camlistreq) {
  clear_cmd();
  if (camlistreq) {
    set_has_camlistreq();
    cmd_.camlistreq_ = camlistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camListReq)
}

// .LinkListCamResp camListResp = 202;
bool LinkCmd::has_camlistresp() const {
  return cmd_case() == kCamListResp;
}
void LinkCmd::set_has_camlistresp() {
  _oneof_case_[0] = kCamListResp;
}
void LinkCmd::clear_camlistresp() {
  if (has_camlistresp()) {
    delete cmd_.camlistresp_;
    clear_has_cmd();
  }
}
 const ::LinkListCamResp& LinkCmd::camlistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camListResp)
  return has_camlistresp()
      ? *cmd_.camlistresp_
      : ::LinkListCamResp::default_instance();
}
::LinkListCamResp* LinkCmd::mutable_camlistresp() {
  if (!has_camlistresp()) {
    clear_cmd();
    set_has_camlistresp();
    cmd_.camlistresp_ = new ::LinkListCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camListResp)
  return cmd_.camlistresp_;
}
::LinkListCamResp* LinkCmd::release_camlistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camListResp)
  if (has_camlistresp()) {
    clear_has_cmd();
    ::LinkListCamResp* temp = cmd_.camlistresp_;
    cmd_.camlistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_camlistresp(::LinkListCamResp* camlistresp) {
  clear_cmd();
  if (camlistresp) {
    set_has_camlistresp();
    cmd_.camlistresp_ = camlistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camListResp)
}

// .LinkCamReq camReq = 203;
bool LinkCmd::has_camreq() const {
  return cmd_case() == kCamReq;
}
void LinkCmd::set_has_camreq() {
  _oneof_case_[0] = kCamReq;
}
void LinkCmd::clear_camreq() {
  if (has_camreq()) {
    delete cmd_.camreq_;
    clear_has_cmd();
  }
}
 const ::LinkCamReq& LinkCmd::camreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camReq)
  return has_camreq()
      ? *cmd_.camreq_
      : ::LinkCamReq::default_instance();
}
::LinkCamReq* LinkCmd::mutable_camreq() {
  if (!has_camreq()) {
    clear_cmd();
    set_has_camreq();
    cmd_.camreq_ = new ::LinkCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camReq)
  return cmd_.camreq_;
}
::LinkCamReq* LinkCmd::release_camreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camReq)
  if (has_camreq()) {
    clear_has_cmd();
    ::LinkCamReq* temp = cmd_.camreq_;
    cmd_.camreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_camreq(::LinkCamReq* camreq) {
  clear_cmd();
  if (camreq) {
    set_has_camreq();
    cmd_.camreq_ = camreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camReq)
}

// .LinkCamResp camResp = 204;
bool LinkCmd::has_camresp() const {
  return cmd_case() == kCamResp;
}
void LinkCmd::set_has_camresp() {
  _oneof_case_[0] = kCamResp;
}
void LinkCmd::clear_camresp() {
  if (has_camresp()) {
    delete cmd_.camresp_;
    clear_has_cmd();
  }
}
 const ::LinkCamResp& LinkCmd::camresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camResp)
  return has_camresp()
      ? *cmd_.camresp_
      : ::LinkCamResp::default_instance();
}
::LinkCamResp* LinkCmd::mutable_camresp() {
  if (!has_camresp()) {
    clear_cmd();
    set_has_camresp();
    cmd_.camresp_ = new ::LinkCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camResp)
  return cmd_.camresp_;
}
::LinkCamResp* LinkCmd::release_camresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camResp)
  if (has_camresp()) {
    clear_has_cmd();
    ::LinkCamResp* temp = cmd_.camresp_;
    cmd_.camresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_camresp(::LinkCamResp* camresp) {
  clear_cmd();
  if (camresp) {
    set_has_camresp();
    cmd_.camresp_ = camresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camResp)
}

// .LinkAddCamReq addCamReq = 205;
bool LinkCmd::has_addcamreq() const {
  return cmd_case() == kAddCamReq;
}
void LinkCmd::set_has_addcamreq() {
  _oneof_case_[0] = kAddCamReq;
}
void LinkCmd::clear_addcamreq() {
  if (has_addcamreq()) {
    delete cmd_.addcamreq_;
    clear_has_cmd();
  }
}
 const ::LinkAddCamReq& LinkCmd::addcamreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addCamReq)
  return has_addcamreq()
      ? *cmd_.addcamreq_
      : ::LinkAddCamReq::default_instance();
}
::LinkAddCamReq* LinkCmd::mutable_addcamreq() {
  if (!has_addcamreq()) {
    clear_cmd();
    set_has_addcamreq();
    cmd_.addcamreq_ = new ::LinkAddCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addCamReq)
  return cmd_.addcamreq_;
}
::LinkAddCamReq* LinkCmd::release_addcamreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addCamReq)
  if (has_addcamreq()) {
    clear_has_cmd();
    ::LinkAddCamReq* temp = cmd_.addcamreq_;
    cmd_.addcamreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_addcamreq(::LinkAddCamReq* addcamreq) {
  clear_cmd();
  if (addcamreq) {
    set_has_addcamreq();
    cmd_.addcamreq_ = addcamreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addCamReq)
}

// .LinkAddCamResp addCamResp = 206;
bool LinkCmd::has_addcamresp() const {
  return cmd_case() == kAddCamResp;
}
void LinkCmd::set_has_addcamresp() {
  _oneof_case_[0] = kAddCamResp;
}
void LinkCmd::clear_addcamresp() {
  if (has_addcamresp()) {
    delete cmd_.addcamresp_;
    clear_has_cmd();
  }
}
 const ::LinkAddCamResp& LinkCmd::addcamresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addCamResp)
  return has_addcamresp()
      ? *cmd_.addcamresp_
      : ::LinkAddCamResp::default_instance();
}
::LinkAddCamResp* LinkCmd::mutable_addcamresp() {
  if (!has_addcamresp()) {
    clear_cmd();
    set_has_addcamresp();
    cmd_.addcamresp_ = new ::LinkAddCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addCamResp)
  return cmd_.addcamresp_;
}
::LinkAddCamResp* LinkCmd::release_addcamresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addCamResp)
  if (has_addcamresp()) {
    clear_has_cmd();
    ::LinkAddCamResp* temp = cmd_.addcamresp_;
    cmd_.addcamresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_addcamresp(::LinkAddCamResp* addcamresp) {
  clear_cmd();
  if (addcamresp) {
    set_has_addcamresp();
    cmd_.addcamresp_ = addcamresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addCamResp)
}

// .LinkDelCamReq delCamReq = 207;
bool LinkCmd::has_delcamreq() const {
  return cmd_case() == kDelCamReq;
}
void LinkCmd::set_has_delcamreq() {
  _oneof_case_[0] = kDelCamReq;
}
void LinkCmd::clear_delcamreq() {
  if (has_delcamreq()) {
    delete cmd_.delcamreq_;
    clear_has_cmd();
  }
}
 const ::LinkDelCamReq& LinkCmd::delcamreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delCamReq)
  return has_delcamreq()
      ? *cmd_.delcamreq_
      : ::LinkDelCamReq::default_instance();
}
::LinkDelCamReq* LinkCmd::mutable_delcamreq() {
  if (!has_delcamreq()) {
    clear_cmd();
    set_has_delcamreq();
    cmd_.delcamreq_ = new ::LinkDelCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delCamReq)
  return cmd_.delcamreq_;
}
::LinkDelCamReq* LinkCmd::release_delcamreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delCamReq)
  if (has_delcamreq()) {
    clear_has_cmd();
    ::LinkDelCamReq* temp = cmd_.delcamreq_;
    cmd_.delcamreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_delcamreq(::LinkDelCamReq* delcamreq) {
  clear_cmd();
  if (delcamreq) {
    set_has_delcamreq();
    cmd_.delcamreq_ = delcamreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delCamReq)
}

// .LinkDelCamResp delCamResp = 208;
bool LinkCmd::has_delcamresp() const {
  return cmd_case() == kDelCamResp;
}
void LinkCmd::set_has_delcamresp() {
  _oneof_case_[0] = kDelCamResp;
}
void LinkCmd::clear_delcamresp() {
  if (has_delcamresp()) {
    delete cmd_.delcamresp_;
    clear_has_cmd();
  }
}
 const ::LinkDelCamResp& LinkCmd::delcamresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delCamResp)
  return has_delcamresp()
      ? *cmd_.delcamresp_
      : ::LinkDelCamResp::default_instance();
}
::LinkDelCamResp* LinkCmd::mutable_delcamresp() {
  if (!has_delcamresp()) {
    clear_cmd();
    set_has_delcamresp();
    cmd_.delcamresp_ = new ::LinkDelCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delCamResp)
  return cmd_.delcamresp_;
}
::LinkDelCamResp* LinkCmd::release_delcamresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delCamResp)
  if (has_delcamresp()) {
    clear_has_cmd();
    ::LinkDelCamResp* temp = cmd_.delcamresp_;
    cmd_.delcamresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_delcamresp(::LinkDelCamResp* delcamresp) {
  clear_cmd();
  if (delcamresp) {
    set_has_delcamresp();
    cmd_.delcamresp_ = delcamresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delCamResp)
}

// .LinkSetCamSchedReq setCamSchedReq = 209;
bool LinkCmd::has_setcamschedreq() const {
  return cmd_case() == kSetCamSchedReq;
}
void LinkCmd::set_has_setcamschedreq() {
  _oneof_case_[0] = kSetCamSchedReq;
}
void LinkCmd::clear_setcamschedreq() {
  if (has_setcamschedreq()) {
    delete cmd_.setcamschedreq_;
    clear_has_cmd();
  }
}
 const ::LinkSetCamSchedReq& LinkCmd::setcamschedreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.setCamSchedReq)
  return has_setcamschedreq()
      ? *cmd_.setcamschedreq_
      : ::LinkSetCamSchedReq::default_instance();
}
::LinkSetCamSchedReq* LinkCmd::mutable_setcamschedreq() {
  if (!has_setcamschedreq()) {
    clear_cmd();
    set_has_setcamschedreq();
    cmd_.setcamschedreq_ = new ::LinkSetCamSchedReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.setCamSchedReq)
  return cmd_.setcamschedreq_;
}
::LinkSetCamSchedReq* LinkCmd::release_setcamschedreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.setCamSchedReq)
  if (has_setcamschedreq()) {
    clear_has_cmd();
    ::LinkSetCamSchedReq* temp = cmd_.setcamschedreq_;
    cmd_.setcamschedreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_setcamschedreq(::LinkSetCamSchedReq* setcamschedreq) {
  clear_cmd();
  if (setcamschedreq) {
    set_has_setcamschedreq();
    cmd_.setcamschedreq_ = setcamschedreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.setCamSchedReq)
}

// .LinkSetCamSchedResp setCamSchedResp = 210;
bool LinkCmd::has_setcamschedresp() const {
  return cmd_case() == kSetCamSchedResp;
}
void LinkCmd::set_has_setcamschedresp() {
  _oneof_case_[0] = kSetCamSchedResp;
}
void LinkCmd::clear_setcamschedresp() {
  if (has_setcamschedresp()) {
    delete cmd_.setcamschedresp_;
    clear_has_cmd();
  }
}
 const ::LinkSetCamSchedResp& LinkCmd::setcamschedresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.setCamSchedResp)
  return has_setcamschedresp()
      ? *cmd_.setcamschedresp_
      : ::LinkSetCamSchedResp::default_instance();
}
::LinkSetCamSchedResp* LinkCmd::mutable_setcamschedresp() {
  if (!has_setcamschedresp()) {
    clear_cmd();
    set_has_setcamschedresp();
    cmd_.setcamschedresp_ = new ::LinkSetCamSchedResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.setCamSchedResp)
  return cmd_.setcamschedresp_;
}
::LinkSetCamSchedResp* LinkCmd::release_setcamschedresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.setCamSchedResp)
  if (has_setcamschedresp()) {
    clear_has_cmd();
    ::LinkSetCamSchedResp* temp = cmd_.setcamschedresp_;
    cmd_.setcamschedresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_setcamschedresp(::LinkSetCamSchedResp* setcamschedresp) {
  clear_cmd();
  if (setcamschedresp) {
    set_has_setcamschedresp();
    cmd_.setcamschedresp_ = setcamschedresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.setCamSchedResp)
}

// .LinkVidDiskListReq diskListReq = 301;
bool LinkCmd::has_disklistreq() const {
  return cmd_case() == kDiskListReq;
}
void LinkCmd::set_has_disklistreq() {
  _oneof_case_[0] = kDiskListReq;
}
void LinkCmd::clear_disklistreq() {
  if (has_disklistreq()) {
    delete cmd_.disklistreq_;
    clear_has_cmd();
  }
}
 const ::LinkVidDiskListReq& LinkCmd::disklistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskListReq)
  return has_disklistreq()
      ? *cmd_.disklistreq_
      : ::LinkVidDiskListReq::default_instance();
}
::LinkVidDiskListReq* LinkCmd::mutable_disklistreq() {
  if (!has_disklistreq()) {
    clear_cmd();
    set_has_disklistreq();
    cmd_.disklistreq_ = new ::LinkVidDiskListReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskListReq)
  return cmd_.disklistreq_;
}
::LinkVidDiskListReq* LinkCmd::release_disklistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskListReq)
  if (has_disklistreq()) {
    clear_has_cmd();
    ::LinkVidDiskListReq* temp = cmd_.disklistreq_;
    cmd_.disklistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_disklistreq(::LinkVidDiskListReq* disklistreq) {
  clear_cmd();
  if (disklistreq) {
    set_has_disklistreq();
    cmd_.disklistreq_ = disklistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskListReq)
}

// .LinkVidDiskListResp diskListResp = 302;
bool LinkCmd::has_disklistresp() const {
  return cmd_case() == kDiskListResp;
}
void LinkCmd::set_has_disklistresp() {
  _oneof_case_[0] = kDiskListResp;
}
void LinkCmd::clear_disklistresp() {
  if (has_disklistresp()) {
    delete cmd_.disklistresp_;
    clear_has_cmd();
  }
}
 const ::LinkVidDiskListResp& LinkCmd::disklistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskListResp)
  return has_disklistresp()
      ? *cmd_.disklistresp_
      : ::LinkVidDiskListResp::default_instance();
}
::LinkVidDiskListResp* LinkCmd::mutable_disklistresp() {
  if (!has_disklistresp()) {
    clear_cmd();
    set_has_disklistresp();
    cmd_.disklistresp_ = new ::LinkVidDiskListResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskListResp)
  return cmd_.disklistresp_;
}
::LinkVidDiskListResp* LinkCmd::release_disklistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskListResp)
  if (has_disklistresp()) {
    clear_has_cmd();
    ::LinkVidDiskListResp* temp = cmd_.disklistresp_;
    cmd_.disklistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_disklistresp(::LinkVidDiskListResp* disklistresp) {
  clear_cmd();
  if (disklistresp) {
    set_has_disklistresp();
    cmd_.disklistresp_ = disklistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskListResp)
}

// .LinkSysVidDiskListReq sysDiskListReq = 303;
bool LinkCmd::has_sysdisklistreq() const {
  return cmd_case() == kSysDiskListReq;
}
void LinkCmd::set_has_sysdisklistreq() {
  _oneof_case_[0] = kSysDiskListReq;
}
void LinkCmd::clear_sysdisklistreq() {
  if (has_sysdisklistreq()) {
    delete cmd_.sysdisklistreq_;
    clear_has_cmd();
  }
}
 const ::LinkSysVidDiskListReq& LinkCmd::sysdisklistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.sysDiskListReq)
  return has_sysdisklistreq()
      ? *cmd_.sysdisklistreq_
      : ::LinkSysVidDiskListReq::default_instance();
}
::LinkSysVidDiskListReq* LinkCmd::mutable_sysdisklistreq() {
  if (!has_sysdisklistreq()) {
    clear_cmd();
    set_has_sysdisklistreq();
    cmd_.sysdisklistreq_ = new ::LinkSysVidDiskListReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.sysDiskListReq)
  return cmd_.sysdisklistreq_;
}
::LinkSysVidDiskListReq* LinkCmd::release_sysdisklistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.sysDiskListReq)
  if (has_sysdisklistreq()) {
    clear_has_cmd();
    ::LinkSysVidDiskListReq* temp = cmd_.sysdisklistreq_;
    cmd_.sysdisklistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_sysdisklistreq(::LinkSysVidDiskListReq* sysdisklistreq) {
  clear_cmd();
  if (sysdisklistreq) {
    set_has_sysdisklistreq();
    cmd_.sysdisklistreq_ = sysdisklistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.sysDiskListReq)
}

// .LinkSysVidDiskListResp sysDiskListResp = 304;
bool LinkCmd::has_sysdisklistresp() const {
  return cmd_case() == kSysDiskListResp;
}
void LinkCmd::set_has_sysdisklistresp() {
  _oneof_case_[0] = kSysDiskListResp;
}
void LinkCmd::clear_sysdisklistresp() {
  if (has_sysdisklistresp()) {
    delete cmd_.sysdisklistresp_;
    clear_has_cmd();
  }
}
 const ::LinkSysVidDiskListResp& LinkCmd::sysdisklistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.sysDiskListResp)
  return has_sysdisklistresp()
      ? *cmd_.sysdisklistresp_
      : ::LinkSysVidDiskListResp::default_instance();
}
::LinkSysVidDiskListResp* LinkCmd::mutable_sysdisklistresp() {
  if (!has_sysdisklistresp()) {
    clear_cmd();
    set_has_sysdisklistresp();
    cmd_.sysdisklistresp_ = new ::LinkSysVidDiskListResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.sysDiskListResp)
  return cmd_.sysdisklistresp_;
}
::LinkSysVidDiskListResp* LinkCmd::release_sysdisklistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.sysDiskListResp)
  if (has_sysdisklistresp()) {
    clear_has_cmd();
    ::LinkSysVidDiskListResp* temp = cmd_.sysdisklistresp_;
    cmd_.sysdisklistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_sysdisklistresp(::LinkSysVidDiskListResp* sysdisklistresp) {
  clear_cmd();
  if (sysdisklistresp) {
    set_has_sysdisklistresp();
    cmd_.sysdisklistresp_ = sysdisklistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.sysDiskListResp)
}

// .LinkAddDiskReq addDiskReq = 305;
bool LinkCmd::has_adddiskreq() const {
  return cmd_case() == kAddDiskReq;
}
void LinkCmd::set_has_adddiskreq() {
  _oneof_case_[0] = kAddDiskReq;
}
void LinkCmd::clear_adddiskreq() {
  if (has_adddiskreq()) {
    delete cmd_.adddiskreq_;
    clear_has_cmd();
  }
}
 const ::LinkAddDiskReq& LinkCmd::adddiskreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addDiskReq)
  return has_adddiskreq()
      ? *cmd_.adddiskreq_
      : ::LinkAddDiskReq::default_instance();
}
::LinkAddDiskReq* LinkCmd::mutable_adddiskreq() {
  if (!has_adddiskreq()) {
    clear_cmd();
    set_has_adddiskreq();
    cmd_.adddiskreq_ = new ::LinkAddDiskReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addDiskReq)
  return cmd_.adddiskreq_;
}
::LinkAddDiskReq* LinkCmd::release_adddiskreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addDiskReq)
  if (has_adddiskreq()) {
    clear_has_cmd();
    ::LinkAddDiskReq* temp = cmd_.adddiskreq_;
    cmd_.adddiskreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_adddiskreq(::LinkAddDiskReq* adddiskreq) {
  clear_cmd();
  if (adddiskreq) {
    set_has_adddiskreq();
    cmd_.adddiskreq_ = adddiskreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addDiskReq)
}

// .LinkAddDiskResp addDiskResp = 306;
bool LinkCmd::has_adddiskresp() const {
  return cmd_case() == kAddDiskResp;
}
void LinkCmd::set_has_adddiskresp() {
  _oneof_case_[0] = kAddDiskResp;
}
void LinkCmd::clear_adddiskresp() {
  if (has_adddiskresp()) {
    delete cmd_.adddiskresp_;
    clear_has_cmd();
  }
}
 const ::LinkAddDiskResp& LinkCmd::adddiskresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addDiskResp)
  return has_adddiskresp()
      ? *cmd_.adddiskresp_
      : ::LinkAddDiskResp::default_instance();
}
::LinkAddDiskResp* LinkCmd::mutable_adddiskresp() {
  if (!has_adddiskresp()) {
    clear_cmd();
    set_has_adddiskresp();
    cmd_.adddiskresp_ = new ::LinkAddDiskResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addDiskResp)
  return cmd_.adddiskresp_;
}
::LinkAddDiskResp* LinkCmd::release_adddiskresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addDiskResp)
  if (has_adddiskresp()) {
    clear_has_cmd();
    ::LinkAddDiskResp* temp = cmd_.adddiskresp_;
    cmd_.adddiskresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_adddiskresp(::LinkAddDiskResp* adddiskresp) {
  clear_cmd();
  if (adddiskresp) {
    set_has_adddiskresp();
    cmd_.adddiskresp_ = adddiskresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addDiskResp)
}

// .LinkDelDiskReq delDiskReq = 307;
bool LinkCmd::has_deldiskreq() const {
  return cmd_case() == kDelDiskReq;
}
void LinkCmd::set_has_deldiskreq() {
  _oneof_case_[0] = kDelDiskReq;
}
void LinkCmd::clear_deldiskreq() {
  if (has_deldiskreq()) {
    delete cmd_.deldiskreq_;
    clear_has_cmd();
  }
}
 const ::LinkDelDiskReq& LinkCmd::deldiskreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delDiskReq)
  return has_deldiskreq()
      ? *cmd_.deldiskreq_
      : ::LinkDelDiskReq::default_instance();
}
::LinkDelDiskReq* LinkCmd::mutable_deldiskreq() {
  if (!has_deldiskreq()) {
    clear_cmd();
    set_has_deldiskreq();
    cmd_.deldiskreq_ = new ::LinkDelDiskReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delDiskReq)
  return cmd_.deldiskreq_;
}
::LinkDelDiskReq* LinkCmd::release_deldiskreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delDiskReq)
  if (has_deldiskreq()) {
    clear_has_cmd();
    ::LinkDelDiskReq* temp = cmd_.deldiskreq_;
    cmd_.deldiskreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_deldiskreq(::LinkDelDiskReq* deldiskreq) {
  clear_cmd();
  if (deldiskreq) {
    set_has_deldiskreq();
    cmd_.deldiskreq_ = deldiskreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delDiskReq)
}

// .LinkDelDiskResp delDiskResp = 308;
bool LinkCmd::has_deldiskresp() const {
  return cmd_case() == kDelDiskResp;
}
void LinkCmd::set_has_deldiskresp() {
  _oneof_case_[0] = kDelDiskResp;
}
void LinkCmd::clear_deldiskresp() {
  if (has_deldiskresp()) {
    delete cmd_.deldiskresp_;
    clear_has_cmd();
  }
}
 const ::LinkDelDiskResp& LinkCmd::deldiskresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delDiskResp)
  return has_deldiskresp()
      ? *cmd_.deldiskresp_
      : ::LinkDelDiskResp::default_instance();
}
::LinkDelDiskResp* LinkCmd::mutable_deldiskresp() {
  if (!has_deldiskresp()) {
    clear_cmd();
    set_has_deldiskresp();
    cmd_.deldiskresp_ = new ::LinkDelDiskResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delDiskResp)
  return cmd_.deldiskresp_;
}
::LinkDelDiskResp* LinkCmd::release_deldiskresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delDiskResp)
  if (has_deldiskresp()) {
    clear_has_cmd();
    ::LinkDelDiskResp* temp = cmd_.deldiskresp_;
    cmd_.deldiskresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_deldiskresp(::LinkDelDiskResp* deldiskresp) {
  clear_cmd();
  if (deldiskresp) {
    set_has_deldiskresp();
    cmd_.deldiskresp_ = deldiskresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delDiskResp)
}

// .LinkUpdateDiskLimitReq diskLimitReq = 309;
bool LinkCmd::has_disklimitreq() const {
  return cmd_case() == kDiskLimitReq;
}
void LinkCmd::set_has_disklimitreq() {
  _oneof_case_[0] = kDiskLimitReq;
}
void LinkCmd::clear_disklimitreq() {
  if (has_disklimitreq()) {
    delete cmd_.disklimitreq_;
    clear_has_cmd();
  }
}
 const ::LinkUpdateDiskLimitReq& LinkCmd::disklimitreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskLimitReq)
  return has_disklimitreq()
      ? *cmd_.disklimitreq_
      : ::LinkUpdateDiskLimitReq::default_instance();
}
::LinkUpdateDiskLimitReq* LinkCmd::mutable_disklimitreq() {
  if (!has_disklimitreq()) {
    clear_cmd();
    set_has_disklimitreq();
    cmd_.disklimitreq_ = new ::LinkUpdateDiskLimitReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskLimitReq)
  return cmd_.disklimitreq_;
}
::LinkUpdateDiskLimitReq* LinkCmd::release_disklimitreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskLimitReq)
  if (has_disklimitreq()) {
    clear_has_cmd();
    ::LinkUpdateDiskLimitReq* temp = cmd_.disklimitreq_;
    cmd_.disklimitreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_disklimitreq(::LinkUpdateDiskLimitReq* disklimitreq) {
  clear_cmd();
  if (disklimitreq) {
    set_has_disklimitreq();
    cmd_.disklimitreq_ = disklimitreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskLimitReq)
}

// .LinkUpdateDiskLimitResp diskLimitResp = 310;
bool LinkCmd::has_disklimitresp() const {
  return cmd_case() == kDiskLimitResp;
}
void LinkCmd::set_has_disklimitresp() {
  _oneof_case_[0] = kDiskLimitResp;
}
void LinkCmd::clear_disklimitresp() {
  if (has_disklimitresp()) {
    delete cmd_.disklimitresp_;
    clear_has_cmd();
  }
}
 const ::LinkUpdateDiskLimitResp& LinkCmd::disklimitresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskLimitResp)
  return has_disklimitresp()
      ? *cmd_.disklimitresp_
      : ::LinkUpdateDiskLimitResp::default_instance();
}
::LinkUpdateDiskLimitResp* LinkCmd::mutable_disklimitresp() {
  if (!has_disklimitresp()) {
    clear_cmd();
    set_has_disklimitresp();
    cmd_.disklimitresp_ = new ::LinkUpdateDiskLimitResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskLimitResp)
  return cmd_.disklimitresp_;
}
::LinkUpdateDiskLimitResp* LinkCmd::release_disklimitresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskLimitResp)
  if (has_disklimitresp()) {
    clear_has_cmd();
    ::LinkUpdateDiskLimitResp* temp = cmd_.disklimitresp_;
    cmd_.disklimitresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_disklimitresp(::LinkUpdateDiskLimitResp* disklimitresp) {
  clear_cmd();
  if (disklimitresp) {
    set_has_disklimitresp();
    cmd_.disklimitresp_ = disklimitresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskLimitResp)
}

// .LinkGetLicReq licReq = 401;
bool LinkCmd::has_licreq() const {
  return cmd_case() == kLicReq;
}
void LinkCmd::set_has_licreq() {
  _oneof_case_[0] = kLicReq;
}
void LinkCmd::clear_licreq() {
  if (has_licreq()) {
    delete cmd_.licreq_;
    clear_has_cmd();
  }
}
 const ::LinkGetLicReq& LinkCmd::licreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.licReq)
  return has_licreq()
      ? *cmd_.licreq_
      : ::LinkGetLicReq::default_instance();
}
::LinkGetLicReq* LinkCmd::mutable_licreq() {
  if (!has_licreq()) {
    clear_cmd();
    set_has_licreq();
    cmd_.licreq_ = new ::LinkGetLicReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.licReq)
  return cmd_.licreq_;
}
::LinkGetLicReq* LinkCmd::release_licreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.licReq)
  if (has_licreq()) {
    clear_has_cmd();
    ::LinkGetLicReq* temp = cmd_.licreq_;
    cmd_.licreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_licreq(::LinkGetLicReq* licreq) {
  clear_cmd();
  if (licreq) {
    set_has_licreq();
    cmd_.licreq_ = licreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.licReq)
}

// .LinkGetLicResp licResp = 402;
bool LinkCmd::has_licresp() const {
  return cmd_case() == kLicResp;
}
void LinkCmd::set_has_licresp() {
  _oneof_case_[0] = kLicResp;
}
void LinkCmd::clear_licresp() {
  if (has_licresp()) {
    delete cmd_.licresp_;
    clear_has_cmd();
  }
}
 const ::LinkGetLicResp& LinkCmd::licresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.licResp)
  return has_licresp()
      ? *cmd_.licresp_
      : ::LinkGetLicResp::default_instance();
}
::LinkGetLicResp* LinkCmd::mutable_licresp() {
  if (!has_licresp()) {
    clear_cmd();
    set_has_licresp();
    cmd_.licresp_ = new ::LinkGetLicResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.licResp)
  return cmd_.licresp_;
}
::LinkGetLicResp* LinkCmd::release_licresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.licResp)
  if (has_licresp()) {
    clear_has_cmd();
    ::LinkGetLicResp* temp = cmd_.licresp_;
    cmd_.licresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_licresp(::LinkGetLicResp* licresp) {
  clear_cmd();
  if (licresp) {
    set_has_licresp();
    cmd_.licresp_ = licresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.licResp)
}

// .LinkGetVerReq verReq = 403;
bool LinkCmd::has_verreq() const {
  return cmd_case() == kVerReq;
}
void LinkCmd::set_has_verreq() {
  _oneof_case_[0] = kVerReq;
}
void LinkCmd::clear_verreq() {
  if (has_verreq()) {
    delete cmd_.verreq_;
    clear_has_cmd();
  }
}
 const ::LinkGetVerReq& LinkCmd::verreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.verReq)
  return has_verreq()
      ? *cmd_.verreq_
      : ::LinkGetVerReq::default_instance();
}
::LinkGetVerReq* LinkCmd::mutable_verreq() {
  if (!has_verreq()) {
    clear_cmd();
    set_has_verreq();
    cmd_.verreq_ = new ::LinkGetVerReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.verReq)
  return cmd_.verreq_;
}
::LinkGetVerReq* LinkCmd::release_verreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.verReq)
  if (has_verreq()) {
    clear_has_cmd();
    ::LinkGetVerReq* temp = cmd_.verreq_;
    cmd_.verreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_verreq(::LinkGetVerReq* verreq) {
  clear_cmd();
  if (verreq) {
    set_has_verreq();
    cmd_.verreq_ = verreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.verReq)
}

// .LinkGetVerResp verResp = 404;
bool LinkCmd::has_verresp() const {
  return cmd_case() == kVerResp;
}
void LinkCmd::set_has_verresp() {
  _oneof_case_[0] = kVerResp;
}
void LinkCmd::clear_verresp() {
  if (has_verresp()) {
    delete cmd_.verresp_;
    clear_has_cmd();
  }
}
 const ::LinkGetVerResp& LinkCmd::verresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.verResp)
  return has_verresp()
      ? *cmd_.verresp_
      : ::LinkGetVerResp::default_instance();
}
::LinkGetVerResp* LinkCmd::mutable_verresp() {
  if (!has_verresp()) {
    clear_cmd();
    set_has_verresp();
    cmd_.verresp_ = new ::LinkGetVerResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.verResp)
  return cmd_.verresp_;
}
::LinkGetVerResp* LinkCmd::release_verresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.verResp)
  if (has_verresp()) {
    clear_has_cmd();
    ::LinkGetVerResp* temp = cmd_.verresp_;
    cmd_.verresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_verresp(::LinkGetVerResp* verresp) {
  clear_cmd();
  if (verresp) {
    set_has_verresp();
    cmd_.verresp_ = verresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.verResp)
}

// .LinkConfLicReq confLicReq = 405;
bool LinkCmd::has_conflicreq() const {
  return cmd_case() == kConfLicReq;
}
void LinkCmd::set_has_conflicreq() {
  _oneof_case_[0] = kConfLicReq;
}
void LinkCmd::clear_conflicreq() {
  if (has_conflicreq()) {
    delete cmd_.conflicreq_;
    clear_has_cmd();
  }
}
 const ::LinkConfLicReq& LinkCmd::conflicreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.confLicReq)
  return has_conflicreq()
      ? *cmd_.conflicreq_
      : ::LinkConfLicReq::default_instance();
}
::LinkConfLicReq* LinkCmd::mutable_conflicreq() {
  if (!has_conflicreq()) {
    clear_cmd();
    set_has_conflicreq();
    cmd_.conflicreq_ = new ::LinkConfLicReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.confLicReq)
  return cmd_.conflicreq_;
}
::LinkConfLicReq* LinkCmd::release_conflicreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.confLicReq)
  if (has_conflicreq()) {
    clear_has_cmd();
    ::LinkConfLicReq* temp = cmd_.conflicreq_;
    cmd_.conflicreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_conflicreq(::LinkConfLicReq* conflicreq) {
  clear_cmd();
  if (conflicreq) {
    set_has_conflicreq();
    cmd_.conflicreq_ = conflicreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.confLicReq)
}

// .LinkConfLicResp confLicResp = 406;
bool LinkCmd::has_conflicresp() const {
  return cmd_case() == kConfLicResp;
}
void LinkCmd::set_has_conflicresp() {
  _oneof_case_[0] = kConfLicResp;
}
void LinkCmd::clear_conflicresp() {
  if (has_conflicresp()) {
    delete cmd_.conflicresp_;
    clear_has_cmd();
  }
}
 const ::LinkConfLicResp& LinkCmd::conflicresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.confLicResp)
  return has_conflicresp()
      ? *cmd_.conflicresp_
      : ::LinkConfLicResp::default_instance();
}
::LinkConfLicResp* LinkCmd::mutable_conflicresp() {
  if (!has_conflicresp()) {
    clear_cmd();
    set_has_conflicresp();
    cmd_.conflicresp_ = new ::LinkConfLicResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.confLicResp)
  return cmd_.conflicresp_;
}
::LinkConfLicResp* LinkCmd::release_conflicresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.confLicResp)
  if (has_conflicresp()) {
    clear_has_cmd();
    ::LinkConfLicResp* temp = cmd_.conflicresp_;
    cmd_.conflicresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_conflicresp(::LinkConfLicResp* conflicresp) {
  clear_cmd();
  if (conflicresp) {
    set_has_conflicresp();
    cmd_.conflicresp_ = conflicresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.confLicResp)
}

// .LinkAddUserReq addUserReq = 501;
bool LinkCmd::has_adduserreq() const {
  return cmd_case() == kAddUserReq;
}
void LinkCmd::set_has_adduserreq() {
  _oneof_case_[0] = kAddUserReq;
}
void LinkCmd::clear_adduserreq() {
  if (has_adduserreq()) {
    delete cmd_.adduserreq_;
    clear_has_cmd();
  }
}
 const ::LinkAddUserReq& LinkCmd::adduserreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addUserReq)
  return has_adduserreq()
      ? *cmd_.adduserreq_
      : ::LinkAddUserReq::default_instance();
}
::LinkAddUserReq* LinkCmd::mutable_adduserreq() {
  if (!has_adduserreq()) {
    clear_cmd();
    set_has_adduserreq();
    cmd_.adduserreq_ = new ::LinkAddUserReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addUserReq)
  return cmd_.adduserreq_;
}
::LinkAddUserReq* LinkCmd::release_adduserreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addUserReq)
  if (has_adduserreq()) {
    clear_has_cmd();
    ::LinkAddUserReq* temp = cmd_.adduserreq_;
    cmd_.adduserreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_adduserreq(::LinkAddUserReq* adduserreq) {
  clear_cmd();
  if (adduserreq) {
    set_has_adduserreq();
    cmd_.adduserreq_ = adduserreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addUserReq)
}

// .LinkAddUserResp addUserResp = 502;
bool LinkCmd::has_adduserresp() const {
  return cmd_case() == kAddUserResp;
}
void LinkCmd::set_has_adduserresp() {
  _oneof_case_[0] = kAddUserResp;
}
void LinkCmd::clear_adduserresp() {
  if (has_adduserresp()) {
    delete cmd_.adduserresp_;
    clear_has_cmd();
  }
}
 const ::LinkAddUserResp& LinkCmd::adduserresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addUserResp)
  return has_adduserresp()
      ? *cmd_.adduserresp_
      : ::LinkAddUserResp::default_instance();
}
::LinkAddUserResp* LinkCmd::mutable_adduserresp() {
  if (!has_adduserresp()) {
    clear_cmd();
    set_has_adduserresp();
    cmd_.adduserresp_ = new ::LinkAddUserResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addUserResp)
  return cmd_.adduserresp_;
}
::LinkAddUserResp* LinkCmd::release_adduserresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addUserResp)
  if (has_adduserresp()) {
    clear_has_cmd();
    ::LinkAddUserResp* temp = cmd_.adduserresp_;
    cmd_.adduserresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_adduserresp(::LinkAddUserResp* adduserresp) {
  clear_cmd();
  if (adduserresp) {
    set_has_adduserresp();
    cmd_.adduserresp_ = adduserresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addUserResp)
}

// .LinkCamAddNotify camAddNotify = 10001;
bool LinkCmd::has_camaddnotify() const {
  return cmd_case() == kCamAddNotify;
}
void LinkCmd::set_has_camaddnotify() {
  _oneof_case_[0] = kCamAddNotify;
}
void LinkCmd::clear_camaddnotify() {
  if (has_camaddnotify()) {
    delete cmd_.camaddnotify_;
    clear_has_cmd();
  }
}
 const ::LinkCamAddNotify& LinkCmd::camaddnotify() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camAddNotify)
  return has_camaddnotify()
      ? *cmd_.camaddnotify_
      : ::LinkCamAddNotify::default_instance();
}
::LinkCamAddNotify* LinkCmd::mutable_camaddnotify() {
  if (!has_camaddnotify()) {
    clear_cmd();
    set_has_camaddnotify();
    cmd_.camaddnotify_ = new ::LinkCamAddNotify;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camAddNotify)
  return cmd_.camaddnotify_;
}
::LinkCamAddNotify* LinkCmd::release_camaddnotify() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camAddNotify)
  if (has_camaddnotify()) {
    clear_has_cmd();
    ::LinkCamAddNotify* temp = cmd_.camaddnotify_;
    cmd_.camaddnotify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_camaddnotify(::LinkCamAddNotify* camaddnotify) {
  clear_cmd();
  if (camaddnotify) {
    set_has_camaddnotify();
    cmd_.camaddnotify_ = camaddnotify;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camAddNotify)
}

// .LinkCamIdNotify camIdNotify = 10002;
bool LinkCmd::has_camidnotify() const {
  return cmd_case() == kCamIdNotify;
}
void LinkCmd::set_has_camidnotify() {
  _oneof_case_[0] = kCamIdNotify;
}
void LinkCmd::clear_camidnotify() {
  if (has_camidnotify()) {
    delete cmd_.camidnotify_;
    clear_has_cmd();
  }
}
 const ::LinkCamIdNotify& LinkCmd::camidnotify() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camIdNotify)
  return has_camidnotify()
      ? *cmd_.camidnotify_
      : ::LinkCamIdNotify::default_instance();
}
::LinkCamIdNotify* LinkCmd::mutable_camidnotify() {
  if (!has_camidnotify()) {
    clear_cmd();
    set_has_camidnotify();
    cmd_.camidnotify_ = new ::LinkCamIdNotify;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camIdNotify)
  return cmd_.camidnotify_;
}
::LinkCamIdNotify* LinkCmd::release_camidnotify() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camIdNotify)
  if (has_camidnotify()) {
    clear_has_cmd();
    ::LinkCamIdNotify* temp = cmd_.camidnotify_;
    cmd_.camidnotify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_camidnotify(::LinkCamIdNotify* camidnotify) {
  clear_cmd();
  if (camidnotify) {
    set_has_camidnotify();
    cmd_.camidnotify_ = camidnotify;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camIdNotify)
}

bool LinkCmd::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
void LinkCmd::clear_has_cmd() {
  _oneof_case_[0] = CMD_NOT_SET;
}
LinkCmd::CmdCase LinkCmd::cmd_case() const {
  return LinkCmd::CmdCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Link

// @@protoc_insertion_point(global_scope)
