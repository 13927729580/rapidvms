// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linkproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "linkproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class LinkCmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LinkCmd> {
  public:
  const ::LinkLoginReq* loginreq_;
  const ::LinkLoginResp* loginresp_;
} _LinkCmd_default_instance_;

namespace protobuf_linkproto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCmd, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCmd, type_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), loginreq_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_LinkCmd_default_instance_), loginresp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkCmd, cmd_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LinkCmd)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LinkCmd_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "linkproto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _LinkCmd_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_linksystem_2eproto::InitDefaults();
  _LinkCmd_default_instance_.DefaultConstruct();
  _LinkCmd_default_instance_.loginreq_ = const_cast< ::LinkLoginReq*>(
      ::LinkLoginReq::internal_default_instance());
  _LinkCmd_default_instance_.loginresp_ = const_cast< ::LinkLoginResp*>(
      ::LinkLoginResp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017linkproto.proto\032\020linksystem.proto\"t\n\007L"
      "inkCmd\022\032\n\004type\030\001 \001(\0162\014.LinkCmdType\022!\n\010lo"
      "ginReq\030\002 \001(\0132\r.LinkLoginReqH\000\022#\n\tloginRe"
      "sp\030\003 \001(\0132\016.LinkLoginRespH\000B\005\n\003cmd*\210\001\n\013Li"
      "nkCmdType\022\021\n\rLINK_CMD_ZERO\020\000\022\026\n\022LINK_CMD"
      "_LOGIN_REQ\020\001\022\027\n\023LINK_CMD_LOGIN_RESP\020\002\022\031\n"
      "\025LINK_CMD_CAM_LIST_REQ\020\003\022\032\n\026LINK_CMD_CAM"
      "_LIST_RESP\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "linkproto.proto", &protobuf_RegisterTypes);
  ::protobuf_linksystem_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_linkproto_2eproto

const ::google::protobuf::EnumDescriptor* LinkCmdType_descriptor() {
  protobuf_linkproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linkproto_2eproto::file_level_enum_descriptors[0];
}
bool LinkCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkCmd::kTypeFieldNumber;
const int LinkCmd::kLoginReqFieldNumber;
const int LinkCmd::kLoginRespFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkCmd::LinkCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_linkproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinkCmd)
}
LinkCmd::LinkCmd(const LinkCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_cmd();
  switch (from.cmd_case()) {
    case kLoginReq: {
      mutable_loginreq()->::LinkLoginReq::MergeFrom(from.loginreq());
      break;
    }
    case kLoginResp: {
      mutable_loginresp()->::LinkLoginResp::MergeFrom(from.loginresp());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LinkCmd)
}

void LinkCmd::SharedCtor() {
  type_ = 0;
  clear_has_cmd();
  _cached_size_ = 0;
}

LinkCmd::~LinkCmd() {
  // @@protoc_insertion_point(destructor:LinkCmd)
  SharedDtor();
}

void LinkCmd::SharedDtor() {
  if (has_cmd()) {
    clear_cmd();
  }
}

void LinkCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkCmd::descriptor() {
  protobuf_linkproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linkproto_2eproto::file_level_metadata[0].descriptor;
}

const LinkCmd& LinkCmd::default_instance() {
  protobuf_linkproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

LinkCmd* LinkCmd::New(::google::protobuf::Arena* arena) const {
  LinkCmd* n = new LinkCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkCmd::clear_cmd() {
// @@protoc_insertion_point(one_of_clear_start:LinkCmd)
  switch (cmd_case()) {
    case kLoginReq: {
      delete cmd_.loginreq_;
      break;
    }
    case kLoginResp: {
      delete cmd_.loginresp_;
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CMD_NOT_SET;
}


void LinkCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkCmd)
  type_ = 0;
  clear_cmd();
}

bool LinkCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinkCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LinkCmdType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::LinkCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkLoginReq loginReq = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LinkLoginResp loginResp = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginresp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinkCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinkCmd)
  return false;
#undef DO_
}

void LinkCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinkCmd)
  // .LinkCmdType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .LinkLoginReq loginReq = 2;
  if (has_loginreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *cmd_.loginreq_, output);
  }

  // .LinkLoginResp loginResp = 3;
  if (has_loginresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *cmd_.loginresp_, output);
  }

  // @@protoc_insertion_point(serialize_end:LinkCmd)
}

::google::protobuf::uint8* LinkCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinkCmd)
  // .LinkCmdType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .LinkLoginReq loginReq = 2;
  if (has_loginreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *cmd_.loginreq_, false, target);
  }

  // .LinkLoginResp loginResp = 3;
  if (has_loginresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *cmd_.loginresp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LinkCmd)
  return target;
}

size_t LinkCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkCmd)
  size_t total_size = 0;

  // .LinkCmdType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (cmd_case()) {
    // .LinkLoginReq loginReq = 2;
    case kLoginReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.loginreq_);
      break;
    }
    // .LinkLoginResp loginResp = 3;
    case kLoginResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_.loginresp_);
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinkCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinkCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinkCmd)
    MergeFrom(*source);
  }
}

void LinkCmd::MergeFrom(const LinkCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinkCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.cmd_case()) {
    case kLoginReq: {
      mutable_loginreq()->::LinkLoginReq::MergeFrom(from.loginreq());
      break;
    }
    case kLoginResp: {
      mutable_loginresp()->::LinkLoginResp::MergeFrom(from.loginresp());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
}

void LinkCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinkCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkCmd::CopyFrom(const LinkCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkCmd::IsInitialized() const {
  return true;
}

void LinkCmd::Swap(LinkCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkCmd::InternalSwap(LinkCmd* other) {
  std::swap(type_, other->type_);
  std::swap(cmd_, other->cmd_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkCmd::GetMetadata() const {
  protobuf_linkproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_linkproto_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkCmd

// .LinkCmdType type = 1;
void LinkCmd::clear_type() {
  type_ = 0;
}
::LinkCmdType LinkCmd::type() const {
  // @@protoc_insertion_point(field_get:LinkCmd.type)
  return static_cast< ::LinkCmdType >(type_);
}
void LinkCmd::set_type(::LinkCmdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:LinkCmd.type)
}

// .LinkLoginReq loginReq = 2;
bool LinkCmd::has_loginreq() const {
  return cmd_case() == kLoginReq;
}
void LinkCmd::set_has_loginreq() {
  _oneof_case_[0] = kLoginReq;
}
void LinkCmd::clear_loginreq() {
  if (has_loginreq()) {
    delete cmd_.loginreq_;
    clear_has_cmd();
  }
}
 const ::LinkLoginReq& LinkCmd::loginreq() const {
  // @@protoc_insertion_point(field_get:LinkCmd.loginReq)
  return has_loginreq()
      ? *cmd_.loginreq_
      : ::LinkLoginReq::default_instance();
}
::LinkLoginReq* LinkCmd::mutable_loginreq() {
  if (!has_loginreq()) {
    clear_cmd();
    set_has_loginreq();
    cmd_.loginreq_ = new ::LinkLoginReq;
  }
  // @@protoc_insertion_point(field_mutable:LinkCmd.loginReq)
  return cmd_.loginreq_;
}
::LinkLoginReq* LinkCmd::release_loginreq() {
  // @@protoc_insertion_point(field_release:LinkCmd.loginReq)
  if (has_loginreq()) {
    clear_has_cmd();
    ::LinkLoginReq* temp = cmd_.loginreq_;
    cmd_.loginreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_loginreq(::LinkLoginReq* loginreq) {
  clear_cmd();
  if (loginreq) {
    set_has_loginreq();
    cmd_.loginreq_ = loginreq;
  }
  // @@protoc_insertion_point(field_set_allocated:LinkCmd.loginReq)
}

// .LinkLoginResp loginResp = 3;
bool LinkCmd::has_loginresp() const {
  return cmd_case() == kLoginResp;
}
void LinkCmd::set_has_loginresp() {
  _oneof_case_[0] = kLoginResp;
}
void LinkCmd::clear_loginresp() {
  if (has_loginresp()) {
    delete cmd_.loginresp_;
    clear_has_cmd();
  }
}
 const ::LinkLoginResp& LinkCmd::loginresp() const {
  // @@protoc_insertion_point(field_get:LinkCmd.loginResp)
  return has_loginresp()
      ? *cmd_.loginresp_
      : ::LinkLoginResp::default_instance();
}
::LinkLoginResp* LinkCmd::mutable_loginresp() {
  if (!has_loginresp()) {
    clear_cmd();
    set_has_loginresp();
    cmd_.loginresp_ = new ::LinkLoginResp;
  }
  // @@protoc_insertion_point(field_mutable:LinkCmd.loginResp)
  return cmd_.loginresp_;
}
::LinkLoginResp* LinkCmd::release_loginresp() {
  // @@protoc_insertion_point(field_release:LinkCmd.loginResp)
  if (has_loginresp()) {
    clear_has_cmd();
    ::LinkLoginResp* temp = cmd_.loginresp_;
    cmd_.loginresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LinkCmd::set_allocated_loginresp(::LinkLoginResp* loginresp) {
  clear_cmd();
  if (loginresp) {
    set_has_loginresp();
    cmd_.loginresp_ = loginresp;
  }
  // @@protoc_insertion_point(field_set_allocated:LinkCmd.loginResp)
}

bool LinkCmd::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
void LinkCmd::clear_has_cmd() {
  _oneof_case_[0] = CMD_NOT_SET;
}
LinkCmd::CmdCase LinkCmd::cmd_case() const {
  return LinkCmd::CmdCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
